
angularity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f68  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08007078  08007078  00017078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007154  08007154  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007154  08007154  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007154  08007154  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007154  08007154  00017154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007158  08007158  00017158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800715c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d6c  20000074  080071d0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001de0  080071d0  00021de0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f43a  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c67  00000000  00000000  0003f4d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a40  00000000  00000000  00043140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018f0  00000000  00000000  00044b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004815  00000000  00000000  00046470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d34a  00000000  00000000  0004ac85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ec6a  00000000  00000000  00067fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00106c39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007370  00000000  00000000  00106c8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08007060 	.word	0x08007060

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08007060 	.word	0x08007060

08000150 <as5600_init>:
 * @retval              AS5600_ERROR_SUCCESS    If everything went well
 * @retval              AS5600_ERROR_RUNTIME_ERROR Module already initialized
 * @retval              AS5600_ERROR_BAD_PARAMETER Invalid transfer function pointer
 */
as5600_error_t as5600_init(pf_i2c_xfer_as5600_t const pf_transfer_func)
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
        as5600_error_t result = AS5600_ERROR_SUCCESS;
 8000158:	2300      	movs	r3, #0
 800015a:	73fb      	strb	r3, [r7, #15]

        if (m_is_initialized) {
 800015c:	4b0d      	ldr	r3, [pc, #52]	; (8000194 <as5600_init+0x44>)
 800015e:	781b      	ldrb	r3, [r3, #0]
 8000160:	2b00      	cmp	r3, #0
 8000162:	d002      	beq.n	800016a <as5600_init+0x1a>
                result = AS5600_ERROR_RUNTIME_ERROR;
 8000164:	2302      	movs	r3, #2
 8000166:	73fb      	strb	r3, [r7, #15]
 8000168:	e004      	b.n	8000174 <as5600_init+0x24>
        } else if (NULL == pf_transfer_func) {
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	2b00      	cmp	r3, #0
 800016e:	d101      	bne.n	8000174 <as5600_init+0x24>
                result = AS5600_ERROR_BAD_PARAMETER;
 8000170:	2301      	movs	r3, #1
 8000172:	73fb      	strb	r3, [r7, #15]
        }

        if (AS5600_ERROR_SUCCESS == result) {
 8000174:	7bfb      	ldrb	r3, [r7, #15]
 8000176:	2b00      	cmp	r3, #0
 8000178:	d105      	bne.n	8000186 <as5600_init+0x36>
                m_as5600_xfer_func = pf_transfer_func;
 800017a:	4a07      	ldr	r2, [pc, #28]	; (8000198 <as5600_init+0x48>)
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	6013      	str	r3, [r2, #0]
                m_is_initialized = true;
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <as5600_init+0x44>)
 8000182:	2201      	movs	r2, #1
 8000184:	701a      	strb	r2, [r3, #0]
        }

        return result;
 8000186:	7bfb      	ldrb	r3, [r7, #15]
}
 8000188:	4618      	mov	r0, r3
 800018a:	3714      	adds	r7, #20
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	20000094 	.word	0x20000094
 8000198:	20000090 	.word	0x20000090

0800019c <as5600_get_angle>:
 * @retval          AS5600_ERROR_BAD_PARAMETER  Pointer invalid
 * @retval          *                           Any other errors returned by the
 *                                              sub-callees
 */
as5600_error_t as5600_get_angle(uint16_t * const p_angle)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b084      	sub	sp, #16
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
        as5600_register_t const reg = AS5600_REGISTER_ANGLE_H;
 80001a4:	230e      	movs	r3, #14
 80001a6:	73bb      	strb	r3, [r7, #14]
        as5600_error_t success = AS5600_ERROR_SUCCESS;
 80001a8:	2300      	movs	r3, #0
 80001aa:	73fb      	strb	r3, [r7, #15]
        uint16_t buffer;

        if (NULL == p_angle) {
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d101      	bne.n	80001b6 <as5600_get_angle+0x1a>
                success = AS5600_ERROR_BAD_PARAMETER;
 80001b2:	2301      	movs	r3, #1
 80001b4:	73fb      	strb	r3, [r7, #15]
        }

        if (AS5600_ERROR_SUCCESS == success) {
 80001b6:	7bfb      	ldrb	r3, [r7, #15]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d108      	bne.n	80001ce <as5600_get_angle+0x32>
                success = as5600_read_16register(reg, &buffer);
 80001bc:	f107 020c 	add.w	r2, r7, #12
 80001c0:	7bbb      	ldrb	r3, [r7, #14]
 80001c2:	4611      	mov	r1, r2
 80001c4:	4618      	mov	r0, r3
 80001c6:	f000 f878 	bl	80002ba <as5600_read_16register>
 80001ca:	4603      	mov	r3, r0
 80001cc:	73fb      	strb	r3, [r7, #15]
        }

        if (AS5600_ERROR_SUCCESS == success) {
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d102      	bne.n	80001da <as5600_get_angle+0x3e>
                *p_angle = buffer;
 80001d4:	89ba      	ldrh	r2, [r7, #12]
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	801a      	strh	r2, [r3, #0]
        }

        return success;
 80001da:	7bfb      	ldrb	r3, [r7, #15]
}
 80001dc:	4618      	mov	r0, r3
 80001de:	3710      	adds	r7, #16
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <as5600_get_status>:
 * @retval          AS5600_ERROR_BAD_PARAMETER  Pointer invalid
 * @retval          *                           Any other errors returned by the
 *                                              sub-callees
 */
as5600_error_t as5600_get_status(as5600_status_t * const p_status)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b084      	sub	sp, #16
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
        as5600_register_t const reg = AS5600_REGISTER_STATUS;
 80001ec:	230b      	movs	r3, #11
 80001ee:	733b      	strb	r3, [r7, #12]
        as5600_error_t success = AS5600_ERROR_SUCCESS;
 80001f0:	2300      	movs	r3, #0
 80001f2:	73fb      	strb	r3, [r7, #15]
        bool found = false;
 80001f4:	2300      	movs	r3, #0
 80001f6:	73bb      	strb	r3, [r7, #14]
        uint8_t reg_value;
        uint8_t i;

        if (NULL == p_status) {
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d101      	bne.n	8000202 <as5600_get_status+0x1e>
                success = AS5600_ERROR_BAD_PARAMETER;
 80001fe:	2301      	movs	r3, #1
 8000200:	73fb      	strb	r3, [r7, #15]
        }

        if (AS5600_ERROR_SUCCESS == success) {
 8000202:	7bfb      	ldrb	r3, [r7, #15]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d108      	bne.n	800021a <as5600_get_status+0x36>
                success = as5600_read_8register(reg, &reg_value);
 8000208:	f107 020b 	add.w	r2, r7, #11
 800020c:	7b3b      	ldrb	r3, [r7, #12]
 800020e:	4611      	mov	r1, r2
 8000210:	4618      	mov	r0, r3
 8000212:	f000 f833 	bl	800027c <as5600_read_8register>
 8000216:	4603      	mov	r3, r0
 8000218:	73fb      	strb	r3, [r7, #15]
        }

        if (AS5600_ERROR_SUCCESS == success) {
 800021a:	7bfb      	ldrb	r3, [r7, #15]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d11f      	bne.n	8000260 <as5600_get_status+0x7c>

                for (i = 0; (m_available_status_len > i) && (!found); ++i) {
 8000220:	2300      	movs	r3, #0
 8000222:	737b      	strb	r3, [r7, #13]
 8000224:	e00a      	b.n	800023c <as5600_get_status+0x58>
                        if (m_available_status[i] == reg_value) {
 8000226:	7b7b      	ldrb	r3, [r7, #13]
 8000228:	4a13      	ldr	r2, [pc, #76]	; (8000278 <as5600_get_status+0x94>)
 800022a:	5cd2      	ldrb	r2, [r2, r3]
 800022c:	7afb      	ldrb	r3, [r7, #11]
 800022e:	429a      	cmp	r2, r3
 8000230:	d101      	bne.n	8000236 <as5600_get_status+0x52>
                                found = true;
 8000232:	2301      	movs	r3, #1
 8000234:	73bb      	strb	r3, [r7, #14]
                for (i = 0; (m_available_status_len > i) && (!found); ++i) {
 8000236:	7b7b      	ldrb	r3, [r7, #13]
 8000238:	3301      	adds	r3, #1
 800023a:	737b      	strb	r3, [r7, #13]
 800023c:	2206      	movs	r2, #6
 800023e:	7b7b      	ldrb	r3, [r7, #13]
 8000240:	4293      	cmp	r3, r2
 8000242:	d205      	bcs.n	8000250 <as5600_get_status+0x6c>
 8000244:	7bbb      	ldrb	r3, [r7, #14]
 8000246:	f083 0301 	eor.w	r3, r3, #1
 800024a:	b2db      	uxtb	r3, r3
 800024c:	2b00      	cmp	r3, #0
 800024e:	d1ea      	bne.n	8000226 <as5600_get_status+0x42>
                        }
                }

                if (!found) {
 8000250:	7bbb      	ldrb	r3, [r7, #14]
 8000252:	f083 0301 	eor.w	r3, r3, #1
 8000256:	b2db      	uxtb	r3, r3
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <as5600_get_status+0x7c>
                        success = AS5600_ERROR_RUNTIME_ERROR;
 800025c:	2302      	movs	r3, #2
 800025e:	73fb      	strb	r3, [r7, #15]
                }
        }

        if (AS5600_ERROR_SUCCESS == success) {
 8000260:	7bfb      	ldrb	r3, [r7, #15]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d102      	bne.n	800026c <as5600_get_status+0x88>
                *p_status = (as5600_status_t)reg_value;
 8000266:	7afa      	ldrb	r2, [r7, #11]
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	701a      	strb	r2, [r3, #0]
        }

        return success;
 800026c:	7bfb      	ldrb	r3, [r7, #15]
}
 800026e:	4618      	mov	r0, r3
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	0800709c 	.word	0x0800709c

0800027c <as5600_read_8register>:
 * @retval          *                           Any other errors returned by the
 *                                              sub-callees
 */
static as5600_error_t as5600_read_8register(as5600_register_t const reg,
                                            uint8_t * const p_rx_buffer)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
 8000282:	4603      	mov	r3, r0
 8000284:	6039      	str	r1, [r7, #0]
 8000286:	71fb      	strb	r3, [r7, #7]
        as5600_error_t result = AS5600_ERROR_SUCCESS;
 8000288:	2300      	movs	r3, #0
 800028a:	73fb      	strb	r3, [r7, #15]
        size_t const count = sizeof(uint8_t);
 800028c:	2301      	movs	r3, #1
 800028e:	60bb      	str	r3, [r7, #8]

        if (NULL == p_rx_buffer) {
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d101      	bne.n	800029a <as5600_read_8register+0x1e>
                result = AS5600_ERROR_BAD_PARAMETER;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
        }

        if (AS5600_ERROR_SUCCESS == result) {
 800029a:	7bfb      	ldrb	r3, [r7, #15]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d107      	bne.n	80002b0 <as5600_read_8register+0x34>
                result = as5600_read_n_consecutive_bytes(reg,
 80002a0:	79fb      	ldrb	r3, [r7, #7]
 80002a2:	68ba      	ldr	r2, [r7, #8]
 80002a4:	6839      	ldr	r1, [r7, #0]
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 f860 	bl	800036c <as5600_read_n_consecutive_bytes>
 80002ac:	4603      	mov	r3, r0
 80002ae:	73fb      	strb	r3, [r7, #15]
                                                         p_rx_buffer, count);
        }

        return result;
 80002b0:	7bfb      	ldrb	r3, [r7, #15]

}
 80002b2:	4618      	mov	r0, r3
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}

080002ba <as5600_read_16register>:
 * @retval          *                           Any other errors returned by the
 *                                              sub-callees
 */
static as5600_error_t as5600_read_16register(as5600_register_t const reg,
                                             uint16_t * const p_rx_buffer)
{
 80002ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80002be:	b087      	sub	sp, #28
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	6039      	str	r1, [r7, #0]
 80002c6:	71fb      	strb	r3, [r7, #7]
 80002c8:	466b      	mov	r3, sp
 80002ca:	461e      	mov	r6, r3
        size_t const count = sizeof(uint16_t);
 80002cc:	2302      	movs	r3, #2
 80002ce:	613b      	str	r3, [r7, #16]
        uint8_t buffer[count];
 80002d0:	693b      	ldr	r3, [r7, #16]
 80002d2:	3b01      	subs	r3, #1
 80002d4:	60fb      	str	r3, [r7, #12]
 80002d6:	693b      	ldr	r3, [r7, #16]
 80002d8:	2200      	movs	r2, #0
 80002da:	4698      	mov	r8, r3
 80002dc:	4691      	mov	r9, r2
 80002de:	f04f 0200 	mov.w	r2, #0
 80002e2:	f04f 0300 	mov.w	r3, #0
 80002e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80002ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80002ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80002f2:	693b      	ldr	r3, [r7, #16]
 80002f4:	2200      	movs	r2, #0
 80002f6:	461c      	mov	r4, r3
 80002f8:	4615      	mov	r5, r2
 80002fa:	f04f 0200 	mov.w	r2, #0
 80002fe:	f04f 0300 	mov.w	r3, #0
 8000302:	00eb      	lsls	r3, r5, #3
 8000304:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000308:	00e2      	lsls	r2, r4, #3
 800030a:	693b      	ldr	r3, [r7, #16]
 800030c:	3307      	adds	r3, #7
 800030e:	08db      	lsrs	r3, r3, #3
 8000310:	00db      	lsls	r3, r3, #3
 8000312:	ebad 0d03 	sub.w	sp, sp, r3
 8000316:	466b      	mov	r3, sp
 8000318:	3300      	adds	r3, #0
 800031a:	60bb      	str	r3, [r7, #8]
        as5600_error_t result = AS5600_ERROR_SUCCESS;
 800031c:	2300      	movs	r3, #0
 800031e:	75fb      	strb	r3, [r7, #23]

        if (NULL == p_rx_buffer) {
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d101      	bne.n	800032a <as5600_read_16register+0x70>
                result = AS5600_ERROR_BAD_PARAMETER;
 8000326:	2301      	movs	r3, #1
 8000328:	75fb      	strb	r3, [r7, #23]
        }

        if (AS5600_ERROR_SUCCESS == result) {
 800032a:	7dfb      	ldrb	r3, [r7, #23]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d107      	bne.n	8000340 <as5600_read_16register+0x86>
                result = as5600_read_n_consecutive_bytes(reg,
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	693a      	ldr	r2, [r7, #16]
 8000334:	68b9      	ldr	r1, [r7, #8]
 8000336:	4618      	mov	r0, r3
 8000338:	f000 f818 	bl	800036c <as5600_read_n_consecutive_bytes>
 800033c:	4603      	mov	r3, r0
 800033e:	75fb      	strb	r3, [r7, #23]
                                                         buffer, count);
        }

        if (AS5600_ERROR_SUCCESS == result) {
 8000340:	7dfb      	ldrb	r3, [r7, #23]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d10b      	bne.n	800035e <as5600_read_16register+0xa4>
                *p_rx_buffer = ((uint16_t)buffer[0] << 8) | ((uint16_t)buffer[1]);
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	021b      	lsls	r3, r3, #8
 800034c:	b21a      	sxth	r2, r3
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	785b      	ldrb	r3, [r3, #1]
 8000352:	b21b      	sxth	r3, r3
 8000354:	4313      	orrs	r3, r2
 8000356:	b21b      	sxth	r3, r3
 8000358:	b29a      	uxth	r2, r3
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	801a      	strh	r2, [r3, #0]
        }

        return result;
 800035e:	7dfb      	ldrb	r3, [r7, #23]
 8000360:	46b5      	mov	sp, r6

}
 8000362:	4618      	mov	r0, r3
 8000364:	371c      	adds	r7, #28
 8000366:	46bd      	mov	sp, r7
 8000368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800036c <as5600_read_n_consecutive_bytes>:
 */
static as5600_error_t as5600_read_n_consecutive_bytes(
                                                    as5600_register_t const reg,
                                                    uint8_t * const p_rx_buffer,
                                                    size_t const bytes_count)
{
 800036c:	b590      	push	{r4, r7, lr}
 800036e:	b089      	sub	sp, #36	; 0x24
 8000370:	af02      	add	r7, sp, #8
 8000372:	4603      	mov	r3, r0
 8000374:	60b9      	str	r1, [r7, #8]
 8000376:	607a      	str	r2, [r7, #4]
 8000378:	73fb      	strb	r3, [r7, #15]
        as5600_error_t result = AS5600_ERROR_SUCCESS;
 800037a:	2300      	movs	r3, #0
 800037c:	75fb      	strb	r3, [r7, #23]
        uint8_t const reg_addr = (uint8_t)reg;
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	757b      	strb	r3, [r7, #21]
        uint8_t xfer_func_result;

        if ((NULL == p_rx_buffer) || (!as5600_is_register_valid(reg))) {
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d009      	beq.n	800039c <as5600_read_n_consecutive_bytes+0x30>
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	4618      	mov	r0, r3
 800038c:	f000 f836 	bl	80003fc <as5600_is_register_valid>
 8000390:	4603      	mov	r3, r0
 8000392:	f083 0301 	eor.w	r3, r3, #1
 8000396:	b2db      	uxtb	r3, r3
 8000398:	2b00      	cmp	r3, #0
 800039a:	d002      	beq.n	80003a2 <as5600_read_n_consecutive_bytes+0x36>
                result = AS5600_ERROR_BAD_PARAMETER;
 800039c:	2301      	movs	r3, #1
 800039e:	75fb      	strb	r3, [r7, #23]
 80003a0:	e00f      	b.n	80003c2 <as5600_read_n_consecutive_bytes+0x56>
        } else if (!m_is_initialized) {
 80003a2:	4b14      	ldr	r3, [pc, #80]	; (80003f4 <as5600_read_n_consecutive_bytes+0x88>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	f083 0301 	eor.w	r3, r3, #1
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d002      	beq.n	80003b6 <as5600_read_n_consecutive_bytes+0x4a>
                result = AS5600_ERROR_NOT_INITIALIZED;
 80003b0:	2304      	movs	r3, #4
 80003b2:	75fb      	strb	r3, [r7, #23]
 80003b4:	e005      	b.n	80003c2 <as5600_read_n_consecutive_bytes+0x56>
        } else if (NULL == m_as5600_xfer_func) {
 80003b6:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <as5600_read_n_consecutive_bytes+0x8c>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d101      	bne.n	80003c2 <as5600_read_n_consecutive_bytes+0x56>
                result = AS5600_ERROR_GENERAL_ERROR;
 80003be:	2308      	movs	r3, #8
 80003c0:	75fb      	strb	r3, [r7, #23]
        }

        if (AS5600_ERROR_SUCCESS == result) {
 80003c2:	7dfb      	ldrb	r3, [r7, #23]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d110      	bne.n	80003ea <as5600_read_n_consecutive_bytes+0x7e>


                xfer_func_result = m_as5600_xfer_func(m_as5600_i2c_addr,
 80003c8:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <as5600_read_n_consecutive_bytes+0x8c>)
 80003ca:	681c      	ldr	r4, [r3, #0]
 80003cc:	2036      	movs	r0, #54	; 0x36
 80003ce:	f107 0115 	add.w	r1, r7, #21
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	9300      	str	r3, [sp, #0]
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	2201      	movs	r2, #1
 80003da:	47a0      	blx	r4
 80003dc:	4603      	mov	r3, r0
 80003de:	75bb      	strb	r3, [r7, #22]
                                                      &reg_addr,
                                                      sizeof(reg_addr),
                                                      p_rx_buffer, bytes_count);

                if (0 != xfer_func_result) {
 80003e0:	7dbb      	ldrb	r3, [r7, #22]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <as5600_read_n_consecutive_bytes+0x7e>
                        result = AS5600_ERROR_I2C_ERROR;
 80003e6:	2303      	movs	r3, #3
 80003e8:	75fb      	strb	r3, [r7, #23]
                }
        }

        return result;
 80003ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	371c      	adds	r7, #28
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd90      	pop	{r4, r7, pc}
 80003f4:	20000094 	.word	0x20000094
 80003f8:	20000090 	.word	0x20000090

080003fc <as5600_is_register_valid>:
 * @return              bool                Result of the operation
 * @retval              True                Valid register
 * @retval              False               Invalid register
 */
static bool as5600_is_register_valid(as5600_register_t const reg)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]
        bool is_valid;

        switch (reg) {
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	2b1c      	cmp	r3, #28
 800040a:	dc0f      	bgt.n	800042c <as5600_is_register_valid+0x30>
 800040c:	2b00      	cmp	r3, #0
 800040e:	db12      	blt.n	8000436 <as5600_is_register_valid+0x3a>
 8000410:	461a      	mov	r2, r3
 8000412:	2301      	movs	r3, #1
 8000414:	fa03 f202 	lsl.w	r2, r3, r2
 8000418:	4b0b      	ldr	r3, [pc, #44]	; (8000448 <as5600_is_register_valid+0x4c>)
 800041a:	4013      	ands	r3, r2
 800041c:	2b00      	cmp	r3, #0
 800041e:	bf14      	ite	ne
 8000420:	2301      	movne	r3, #1
 8000422:	2300      	moveq	r3, #0
 8000424:	b2db      	uxtb	r3, r3
 8000426:	2b00      	cmp	r3, #0
 8000428:	d102      	bne.n	8000430 <as5600_is_register_valid+0x34>
 800042a:	e004      	b.n	8000436 <as5600_is_register_valid+0x3a>
 800042c:	2bff      	cmp	r3, #255	; 0xff
 800042e:	d102      	bne.n	8000436 <as5600_is_register_valid+0x3a>
        case AS5600_REGISTER_ANGLE_L:
        case AS5600_REGISTER_AGC:
        case AS5600_REGISTER_MAGNITUDE_H:
        case AS5600_REGISTER_MAGNITUDE_L:
        case AS5600_REGISTER_BURN:
                is_valid = true;
 8000430:	2301      	movs	r3, #1
 8000432:	73fb      	strb	r3, [r7, #15]
                break;
 8000434:	e002      	b.n	800043c <as5600_is_register_valid+0x40>
        default:
                is_valid = false;
 8000436:	2300      	movs	r3, #0
 8000438:	73fb      	strb	r3, [r7, #15]
                break;
 800043a:	bf00      	nop
        }
        return is_valid;
 800043c:	7bfb      	ldrb	r3, [r7, #15]
}
 800043e:	4618      	mov	r0, r3
 8000440:	3714      	adds	r7, #20
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr
 8000448:	1c00f9ff 	.word	0x1c00f9ff

0800044c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000450:	f000 ff6c 	bl	800132c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000454:	f000 f828 	bl	80004a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000458:	f000 fae6 	bl	8000a28 <MX_GPIO_Init>
  MX_DMA_Init();
 800045c:	f000 faae 	bl	80009bc <MX_DMA_Init>
  MX_ADC1_Init();
 8000460:	f000 f87e 	bl	8000560 <MX_ADC1_Init>
  MX_CAN_Init();
 8000464:	f000 f8ba 	bl	80005dc <MX_CAN_Init>
  MX_I2C1_Init();
 8000468:	f000 f8ec 	bl	8000644 <MX_I2C1_Init>
  MX_I2C2_Init();
 800046c:	f000 f918 	bl	80006a0 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000470:	f000 f944 	bl	80006fc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000474:	f000 f9c6 	bl	8000804 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000478:	f000 fa1c 	bl	80008b4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 800047c:	f000 fa74 	bl	8000968 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000480:	f003 fff2 	bl	8004468 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000484:	4a05      	ldr	r2, [pc, #20]	; (800049c <main+0x50>)
 8000486:	2100      	movs	r1, #0
 8000488:	4805      	ldr	r0, [pc, #20]	; (80004a0 <main+0x54>)
 800048a:	f004 f853 	bl	8004534 <osThreadNew>
 800048e:	4603      	mov	r3, r0
 8000490:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <main+0x58>)
 8000492:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000494:	f004 f81a 	bl	80044cc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000498:	e7fe      	b.n	8000498 <main+0x4c>
 800049a:	bf00      	nop
 800049c:	080070a4 	.word	0x080070a4
 80004a0:	08000b5d 	.word	0x08000b5d
 80004a4:	200003c8 	.word	0x200003c8

080004a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b094      	sub	sp, #80	; 0x50
 80004ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004b2:	2228      	movs	r2, #40	; 0x28
 80004b4:	2100      	movs	r1, #0
 80004b6:	4618      	mov	r0, r3
 80004b8:	f006 fd0c 	bl	8006ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]
 80004ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004d8:	2301      	movs	r3, #1
 80004da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e6:	2301      	movs	r3, #1
 80004e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ea:	2302      	movs	r3, #2
 80004ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80004f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004fe:	4618      	mov	r0, r3
 8000500:	f002 fec0 	bl	8003284 <HAL_RCC_OscConfig>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800050a:	f000 fb32 	bl	8000b72 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050e:	230f      	movs	r3, #15
 8000510:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000512:	2302      	movs	r3, #2
 8000514:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000516:	2300      	movs	r3, #0
 8000518:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800051a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800051e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000520:	2300      	movs	r3, #0
 8000522:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000524:	f107 0314 	add.w	r3, r7, #20
 8000528:	2102      	movs	r1, #2
 800052a:	4618      	mov	r0, r3
 800052c:	f003 f92c 	bl	8003788 <HAL_RCC_ClockConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000536:	f000 fb1c 	bl	8000b72 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800053a:	2302      	movs	r3, #2
 800053c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800053e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000542:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	4618      	mov	r0, r3
 8000548:	f003 faac 	bl	8003aa4 <HAL_RCCEx_PeriphCLKConfig>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000552:	f000 fb0e 	bl	8000b72 <Error_Handler>
  }
}
 8000556:	bf00      	nop
 8000558:	3750      	adds	r7, #80	; 0x50
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000570:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <MX_ADC1_Init+0x74>)
 8000572:	4a19      	ldr	r2, [pc, #100]	; (80005d8 <MX_ADC1_Init+0x78>)
 8000574:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000576:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <MX_ADC1_Init+0x74>)
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800057c:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <MX_ADC1_Init+0x74>)
 800057e:	2200      	movs	r2, #0
 8000580:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <MX_ADC1_Init+0x74>)
 8000584:	2200      	movs	r2, #0
 8000586:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <MX_ADC1_Init+0x74>)
 800058a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800058e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000590:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <MX_ADC1_Init+0x74>)
 8000592:	2200      	movs	r2, #0
 8000594:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_ADC1_Init+0x74>)
 8000598:	2201      	movs	r2, #1
 800059a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800059c:	480d      	ldr	r0, [pc, #52]	; (80005d4 <MX_ADC1_Init+0x74>)
 800059e:	f000 ff27 	bl	80013f0 <HAL_ADC_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80005a8:	f000 fae3 	bl	8000b72 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80005ac:	2310      	movs	r3, #16
 80005ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005b0:	2301      	movs	r3, #1
 80005b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	4619      	mov	r1, r3
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <MX_ADC1_Init+0x74>)
 80005be:	f000 ffef 	bl	80015a0 <HAL_ADC_ConfigChannel>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80005c8:	f000 fad3 	bl	8000b72 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000098 	.word	0x20000098
 80005d8:	40012400 	.word	0x40012400

080005dc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80005e0:	4b16      	ldr	r3, [pc, #88]	; (800063c <MX_CAN_Init+0x60>)
 80005e2:	4a17      	ldr	r2, [pc, #92]	; (8000640 <MX_CAN_Init+0x64>)
 80005e4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80005e6:	4b15      	ldr	r3, [pc, #84]	; (800063c <MX_CAN_Init+0x60>)
 80005e8:	2210      	movs	r2, #16
 80005ea:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005ec:	4b13      	ldr	r3, [pc, #76]	; (800063c <MX_CAN_Init+0x60>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005f2:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_CAN_Init+0x60>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80005f8:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_CAN_Init+0x60>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_CAN_Init+0x60>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000604:	4b0d      	ldr	r3, [pc, #52]	; (800063c <MX_CAN_Init+0x60>)
 8000606:	2200      	movs	r2, #0
 8000608:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800060a:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_CAN_Init+0x60>)
 800060c:	2200      	movs	r2, #0
 800060e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <MX_CAN_Init+0x60>)
 8000612:	2200      	movs	r2, #0
 8000614:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_CAN_Init+0x60>)
 8000618:	2200      	movs	r2, #0
 800061a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <MX_CAN_Init+0x60>)
 800061e:	2200      	movs	r2, #0
 8000620:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_CAN_Init+0x60>)
 8000624:	2200      	movs	r2, #0
 8000626:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_CAN_Init+0x60>)
 800062a:	f001 f8f2 	bl	8001812 <HAL_CAN_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8000634:	f000 fa9d 	bl	8000b72 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	2000010c 	.word	0x2000010c
 8000640:	40006400 	.word	0x40006400

08000644 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_I2C1_Init+0x50>)
 800064a:	4a13      	ldr	r2, [pc, #76]	; (8000698 <MX_I2C1_Init+0x54>)
 800064c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_I2C1_Init+0x50>)
 8000650:	4a12      	ldr	r2, [pc, #72]	; (800069c <MX_I2C1_Init+0x58>)
 8000652:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_I2C1_Init+0x50>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_I2C1_Init+0x50>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_I2C1_Init+0x50>)
 8000662:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000666:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <MX_I2C1_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_I2C1_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_I2C1_Init+0x50>)
 8000682:	f001 fdcb 	bl	800221c <HAL_I2C_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800068c:	f000 fa71 	bl	8000b72 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000134 	.word	0x20000134
 8000698:	40005400 	.word	0x40005400
 800069c:	00061a80 	.word	0x00061a80

080006a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2C2_Init+0x50>)
 80006a6:	4a13      	ldr	r2, [pc, #76]	; (80006f4 <MX_I2C2_Init+0x54>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_I2C2_Init+0x50>)
 80006ac:	4a12      	ldr	r2, [pc, #72]	; (80006f8 <MX_I2C2_Init+0x58>)
 80006ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_I2C2_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <MX_I2C2_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MX_I2C2_Init+0x50>)
 80006be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_I2C2_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_I2C2_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <MX_I2C2_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d6:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_I2C2_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_I2C2_Init+0x50>)
 80006de:	f001 fd9d 	bl	800221c <HAL_I2C_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006e8:	f000 fa43 	bl	8000b72 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000188 	.word	0x20000188
 80006f4:	40005800 	.word	0x40005800
 80006f8:	00061a80 	.word	0x00061a80

080006fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b092      	sub	sp, #72	; 0x48
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000702:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800070c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
 800071c:	615a      	str	r2, [r3, #20]
 800071e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2220      	movs	r2, #32
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f006 fbd4 	bl	8006ed4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800072c:	4b33      	ldr	r3, [pc, #204]	; (80007fc <MX_TIM1_Init+0x100>)
 800072e:	4a34      	ldr	r2, [pc, #208]	; (8000800 <MX_TIM1_Init+0x104>)
 8000730:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000732:	4b32      	ldr	r3, [pc, #200]	; (80007fc <MX_TIM1_Init+0x100>)
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000738:	4b30      	ldr	r3, [pc, #192]	; (80007fc <MX_TIM1_Init+0x100>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800073e:	4b2f      	ldr	r3, [pc, #188]	; (80007fc <MX_TIM1_Init+0x100>)
 8000740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000744:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000746:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <MX_TIM1_Init+0x100>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800074c:	4b2b      	ldr	r3, [pc, #172]	; (80007fc <MX_TIM1_Init+0x100>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000752:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <MX_TIM1_Init+0x100>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000758:	4828      	ldr	r0, [pc, #160]	; (80007fc <MX_TIM1_Init+0x100>)
 800075a:	f003 fa59 	bl	8003c10 <HAL_TIM_OC_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000764:	f000 fa05 	bl	8000b72 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000768:	2300      	movs	r3, #0
 800076a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076c:	2300      	movs	r3, #0
 800076e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000770:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000774:	4619      	mov	r1, r3
 8000776:	4821      	ldr	r0, [pc, #132]	; (80007fc <MX_TIM1_Init+0x100>)
 8000778:	f003 fce0 	bl	800413c <HAL_TIMEx_MasterConfigSynchronization>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000782:	f000 f9f6 	bl	8000b72 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078e:	2300      	movs	r3, #0
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000792:	2300      	movs	r3, #0
 8000794:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000796:	2300      	movs	r3, #0
 8000798:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800079a:	2300      	movs	r3, #0
 800079c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800079e:	2300      	movs	r3, #0
 80007a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a6:	2204      	movs	r2, #4
 80007a8:	4619      	mov	r1, r3
 80007aa:	4814      	ldr	r0, [pc, #80]	; (80007fc <MX_TIM1_Init+0x100>)
 80007ac:	f003 fa80 	bl	8003cb0 <HAL_TIM_OC_ConfigChannel>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80007b6:	f000 f9dc 	bl	8000b72 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	4619      	mov	r1, r3
 80007dc:	4807      	ldr	r0, [pc, #28]	; (80007fc <MX_TIM1_Init+0x100>)
 80007de:	f003 fd0b 	bl	80041f8 <HAL_TIMEx_ConfigBreakDeadTime>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80007e8:	f000 f9c3 	bl	8000b72 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007ec:	4803      	ldr	r0, [pc, #12]	; (80007fc <MX_TIM1_Init+0x100>)
 80007ee:	f000 fba5 	bl	8000f3c <HAL_TIM_MspPostInit>

}
 80007f2:	bf00      	nop
 80007f4:	3748      	adds	r7, #72	; 0x48
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200001dc 	.word	0x200001dc
 8000800:	40012c00 	.word	0x40012c00

08000804 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	; 0x28
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080a:	f107 0320 	add.w	r3, r7, #32
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
 8000822:	615a      	str	r2, [r3, #20]
 8000824:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000826:	4b22      	ldr	r3, [pc, #136]	; (80008b0 <MX_TIM2_Init+0xac>)
 8000828:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800082c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <MX_TIM2_Init+0xac>)
 8000830:	2200      	movs	r2, #0
 8000832:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000834:	4b1e      	ldr	r3, [pc, #120]	; (80008b0 <MX_TIM2_Init+0xac>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800083a:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <MX_TIM2_Init+0xac>)
 800083c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000840:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000842:	4b1b      	ldr	r3, [pc, #108]	; (80008b0 <MX_TIM2_Init+0xac>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000848:	4b19      	ldr	r3, [pc, #100]	; (80008b0 <MX_TIM2_Init+0xac>)
 800084a:	2200      	movs	r2, #0
 800084c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800084e:	4818      	ldr	r0, [pc, #96]	; (80008b0 <MX_TIM2_Init+0xac>)
 8000850:	f003 f9de 	bl	8003c10 <HAL_TIM_OC_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800085a:	f000 f98a 	bl	8000b72 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000866:	f107 0320 	add.w	r3, r7, #32
 800086a:	4619      	mov	r1, r3
 800086c:	4810      	ldr	r0, [pc, #64]	; (80008b0 <MX_TIM2_Init+0xac>)
 800086e:	f003 fc65 	bl	800413c <HAL_TIMEx_MasterConfigSynchronization>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000878:	f000 f97b 	bl	8000b72 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2204      	movs	r2, #4
 8000890:	4619      	mov	r1, r3
 8000892:	4807      	ldr	r0, [pc, #28]	; (80008b0 <MX_TIM2_Init+0xac>)
 8000894:	f003 fa0c 	bl	8003cb0 <HAL_TIM_OC_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800089e:	f000 f968 	bl	8000b72 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008a2:	4803      	ldr	r0, [pc, #12]	; (80008b0 <MX_TIM2_Init+0xac>)
 80008a4:	f000 fb4a 	bl	8000f3c <HAL_TIM_MspPostInit>

}
 80008a8:	bf00      	nop
 80008aa:	3728      	adds	r7, #40	; 0x28
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000224 	.word	0x20000224

080008b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ba:	f107 0320 	add.w	r3, r7, #32
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
 80008d2:	615a      	str	r2, [r3, #20]
 80008d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d6:	4b22      	ldr	r3, [pc, #136]	; (8000960 <MX_TIM3_Init+0xac>)
 80008d8:	4a22      	ldr	r2, [pc, #136]	; (8000964 <MX_TIM3_Init+0xb0>)
 80008da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008dc:	4b20      	ldr	r3, [pc, #128]	; (8000960 <MX_TIM3_Init+0xac>)
 80008de:	2200      	movs	r2, #0
 80008e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e2:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <MX_TIM3_Init+0xac>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_TIM3_Init+0xac>)
 80008ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <MX_TIM3_Init+0xac>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_TIM3_Init+0xac>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80008fc:	4818      	ldr	r0, [pc, #96]	; (8000960 <MX_TIM3_Init+0xac>)
 80008fe:	f003 f987 	bl	8003c10 <HAL_TIM_OC_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000908:	f000 f933 	bl	8000b72 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000914:	f107 0320 	add.w	r3, r7, #32
 8000918:	4619      	mov	r1, r3
 800091a:	4811      	ldr	r0, [pc, #68]	; (8000960 <MX_TIM3_Init+0xac>)
 800091c:	f003 fc0e 	bl	800413c <HAL_TIMEx_MasterConfigSynchronization>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000926:	f000 f924 	bl	8000b72 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2204      	movs	r2, #4
 800093e:	4619      	mov	r1, r3
 8000940:	4807      	ldr	r0, [pc, #28]	; (8000960 <MX_TIM3_Init+0xac>)
 8000942:	f003 f9b5 	bl	8003cb0 <HAL_TIM_OC_ConfigChannel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800094c:	f000 f911 	bl	8000b72 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000950:	4803      	ldr	r0, [pc, #12]	; (8000960 <MX_TIM3_Init+0xac>)
 8000952:	f000 faf3 	bl	8000f3c <HAL_TIM_MspPostInit>

}
 8000956:	bf00      	nop
 8000958:	3728      	adds	r7, #40	; 0x28
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	2000026c 	.word	0x2000026c
 8000964:	40000400 	.word	0x40000400

08000968 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <MX_USART2_UART_Init+0x50>)
 8000970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 80009a0:	f003 fc7b 	bl	800429a <HAL_HalfDuplex_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009aa:	f000 f8e2 	bl	8000b72 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	200002f8 	.word	0x200002f8
 80009b8:	40004400 	.word	0x40004400

080009bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_DMA_Init+0x68>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <MX_DMA_Init+0x68>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6153      	str	r3, [r2, #20]
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_DMA_Init+0x68>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2105      	movs	r1, #5
 80009de:	200b      	movs	r0, #11
 80009e0:	f001 f8e9 	bl	8001bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009e4:	200b      	movs	r0, #11
 80009e6:	f001 f902 	bl	8001bee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2105      	movs	r1, #5
 80009ee:	200c      	movs	r0, #12
 80009f0:	f001 f8e1 	bl	8001bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80009f4:	200c      	movs	r0, #12
 80009f6:	f001 f8fa 	bl	8001bee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2105      	movs	r1, #5
 80009fe:	2010      	movs	r0, #16
 8000a00:	f001 f8d9 	bl	8001bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000a04:	2010      	movs	r0, #16
 8000a06:	f001 f8f2 	bl	8001bee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2105      	movs	r1, #5
 8000a0e:	2011      	movs	r0, #17
 8000a10:	f001 f8d1 	bl	8001bb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000a14:	2011      	movs	r0, #17
 8000a16:	f001 f8ea 	bl	8001bee <HAL_NVIC_EnableIRQ>

}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40021000 	.word	0x40021000

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3c:	4b43      	ldr	r3, [pc, #268]	; (8000b4c <MX_GPIO_Init+0x124>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a42      	ldr	r2, [pc, #264]	; (8000b4c <MX_GPIO_Init+0x124>)
 8000a42:	f043 0310 	orr.w	r3, r3, #16
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b40      	ldr	r3, [pc, #256]	; (8000b4c <MX_GPIO_Init+0x124>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0310 	and.w	r3, r3, #16
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a54:	4b3d      	ldr	r3, [pc, #244]	; (8000b4c <MX_GPIO_Init+0x124>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a3c      	ldr	r2, [pc, #240]	; (8000b4c <MX_GPIO_Init+0x124>)
 8000a5a:	f043 0320 	orr.w	r3, r3, #32
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b3a      	ldr	r3, [pc, #232]	; (8000b4c <MX_GPIO_Init+0x124>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0320 	and.w	r3, r3, #32
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	4b37      	ldr	r3, [pc, #220]	; (8000b4c <MX_GPIO_Init+0x124>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	4a36      	ldr	r2, [pc, #216]	; (8000b4c <MX_GPIO_Init+0x124>)
 8000a72:	f043 0304 	orr.w	r3, r3, #4
 8000a76:	6193      	str	r3, [r2, #24]
 8000a78:	4b34      	ldr	r3, [pc, #208]	; (8000b4c <MX_GPIO_Init+0x124>)
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0304 	and.w	r3, r3, #4
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a84:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <MX_GPIO_Init+0x124>)
 8000a86:	699b      	ldr	r3, [r3, #24]
 8000a88:	4a30      	ldr	r2, [pc, #192]	; (8000b4c <MX_GPIO_Init+0x124>)
 8000a8a:	f043 0308 	orr.w	r3, r3, #8
 8000a8e:	6193      	str	r3, [r2, #24]
 8000a90:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <MX_GPIO_Init+0x124>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	f003 0308 	and.w	r3, r3, #8
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_1_Pin|LED_2_Pin|LED_3_Pin, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000aa2:	482b      	ldr	r0, [pc, #172]	; (8000b50 <MX_GPIO_Init+0x128>)
 8000aa4:	f001 fba2 	bl	80021ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, mot_1_enn_Pin|mot2_enn_Pin|mot3_enn_Pin|I2C1_SCL_SWAP_Pin
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	f24a 3104 	movw	r1, #41732	; 0xa304
 8000aae:	4829      	ldr	r0, [pc, #164]	; (8000b54 <MX_GPIO_Init+0x12c>)
 8000ab0:	f001 fb9c 	bl	80021ec <HAL_GPIO_WritePin>
                          |I2C1_SDA_SWAP_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, mot_1_dir_Pin|mot2_dir_Pin, GPIO_PIN_RESET);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8000aba:	4826      	ldr	r0, [pc, #152]	; (8000b54 <MX_GPIO_Init+0x12c>)
 8000abc:	f001 fb96 	bl	80021ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(mot3_dir_GPIO_Port, mot3_dir_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ac6:	4824      	ldr	r0, [pc, #144]	; (8000b58 <MX_GPIO_Init+0x130>)
 8000ac8:	f001 fb90 	bl	80021ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin;
 8000acc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ad0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000ad2:	2311      	movs	r3, #17
 8000ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	2302      	movs	r3, #2
 8000adc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ade:	f107 0310 	add.w	r3, r7, #16
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	481a      	ldr	r0, [pc, #104]	; (8000b50 <MX_GPIO_Init+0x128>)
 8000ae6:	f001 f9fd 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : mot_1_enn_Pin mot_1_dir_Pin mot2_enn_Pin mot2_dir_Pin
                           mot3_enn_Pin */
  GPIO_InitStruct.Pin = mot_1_enn_Pin|mot_1_dir_Pin|mot2_enn_Pin|mot2_dir_Pin
 8000aea:	f24f 0304 	movw	r3, #61444	; 0xf004
 8000aee:	613b      	str	r3, [r7, #16]
                          |mot3_enn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2302      	movs	r3, #2
 8000afa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4619      	mov	r1, r3
 8000b02:	4814      	ldr	r0, [pc, #80]	; (8000b54 <MX_GPIO_Init+0x12c>)
 8000b04:	f001 f9ee 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : mot3_dir_Pin */
  GPIO_InitStruct.Pin = mot3_dir_Pin;
 8000b08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(mot3_dir_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480d      	ldr	r0, [pc, #52]	; (8000b58 <MX_GPIO_Init+0x130>)
 8000b22:	f001 f9df 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C1_SCL_SWAP_Pin I2C1_SDA_SWAP_Pin */
  GPIO_InitStruct.Pin = I2C1_SCL_SWAP_Pin|I2C1_SDA_SWAP_Pin;
 8000b26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b2c:	2311      	movs	r3, #17
 8000b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2302      	movs	r3, #2
 8000b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0310 	add.w	r3, r7, #16
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_GPIO_Init+0x12c>)
 8000b40:	f001 f9d0 	bl	8001ee4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b44:	bf00      	nop
 8000b46:	3720      	adds	r7, #32
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40011000 	.word	0x40011000
 8000b54:	40010c00 	.word	0x40010c00
 8000b58:	40010800 	.word	0x40010800

08000b5c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  task_alpha(argument);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f000 fb9d 	bl	80012a4 <task_alpha>
  /* USER CODE END 5 */
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b76:	b672      	cpsid	i
}
 8000b78:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <Error_Handler+0x8>

08000b7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <HAL_MspInit+0x68>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	4a17      	ldr	r2, [pc, #92]	; (8000be4 <HAL_MspInit+0x68>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6193      	str	r3, [r2, #24]
 8000b8e:	4b15      	ldr	r3, [pc, #84]	; (8000be4 <HAL_MspInit+0x68>)
 8000b90:	699b      	ldr	r3, [r3, #24]
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_MspInit+0x68>)
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	4a11      	ldr	r2, [pc, #68]	; (8000be4 <HAL_MspInit+0x68>)
 8000ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	61d3      	str	r3, [r2, #28]
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <HAL_MspInit+0x68>)
 8000ba8:	69db      	ldr	r3, [r3, #28]
 8000baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	210f      	movs	r1, #15
 8000bb6:	f06f 0001 	mvn.w	r0, #1
 8000bba:	f000 fffc 	bl	8001bb6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <HAL_MspInit+0x6c>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <HAL_MspInit+0x6c>)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40010000 	.word	0x40010000

08000bec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 0318 	add.w	r3, r7, #24
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a33      	ldr	r2, [pc, #204]	; (8000cd4 <HAL_ADC_MspInit+0xe8>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d15f      	bne.n	8000ccc <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c0c:	4b32      	ldr	r3, [pc, #200]	; (8000cd8 <HAL_ADC_MspInit+0xec>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a31      	ldr	r2, [pc, #196]	; (8000cd8 <HAL_ADC_MspInit+0xec>)
 8000c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b2f      	ldr	r3, [pc, #188]	; (8000cd8 <HAL_ADC_MspInit+0xec>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_ADC_MspInit+0xec>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_ADC_MspInit+0xec>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <HAL_ADC_MspInit+0xec>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0304 	and.w	r3, r3, #4
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3c:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <HAL_ADC_MspInit+0xec>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a25      	ldr	r2, [pc, #148]	; (8000cd8 <HAL_ADC_MspInit+0xec>)
 8000c42:	f043 0308 	orr.w	r3, r3, #8
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b23      	ldr	r3, [pc, #140]	; (8000cd8 <HAL_ADC_MspInit+0xec>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f003 0308 	and.w	r3, r3, #8
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_IN0_V5_Pin|ADC_IN3_Vmot_Pin|ADC_IN4_touch_Pin|ADC_IN5_touch_Pin
 8000c54:	23f9      	movs	r3, #249	; 0xf9
 8000c56:	61bb      	str	r3, [r7, #24]
                          |ADC_IN6_touch_Pin|ADC_IN7_amp_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 0318 	add.w	r3, r7, #24
 8000c60:	4619      	mov	r1, r3
 8000c62:	481e      	ldr	r0, [pc, #120]	; (8000cdc <HAL_ADC_MspInit+0xf0>)
 8000c64:	f001 f93e 	bl	8001ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_IN8_amp_Pin|ADC_IN9_amp_Pin;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 0318 	add.w	r3, r7, #24
 8000c74:	4619      	mov	r1, r3
 8000c76:	481a      	ldr	r0, [pc, #104]	; (8000ce0 <HAL_ADC_MspInit+0xf4>)
 8000c78:	f001 f934 	bl	8001ee4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c7c:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <HAL_ADC_MspInit+0xf8>)
 8000c7e:	4a1a      	ldr	r2, [pc, #104]	; (8000ce8 <HAL_ADC_MspInit+0xfc>)
 8000c80:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c82:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <HAL_ADC_MspInit+0xf8>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <HAL_ADC_MspInit+0xf8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_ADC_MspInit+0xf8>)
 8000c90:	2280      	movs	r2, #128	; 0x80
 8000c92:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <HAL_ADC_MspInit+0xf8>)
 8000c96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c9a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <HAL_ADC_MspInit+0xf8>)
 8000c9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ca2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <HAL_ADC_MspInit+0xf8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <HAL_ADC_MspInit+0xf8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cb0:	480c      	ldr	r0, [pc, #48]	; (8000ce4 <HAL_ADC_MspInit+0xf8>)
 8000cb2:	f000 ffb7 	bl	8001c24 <HAL_DMA_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000cbc:	f7ff ff59 	bl	8000b72 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a08      	ldr	r2, [pc, #32]	; (8000ce4 <HAL_ADC_MspInit+0xf8>)
 8000cc4:	621a      	str	r2, [r3, #32]
 8000cc6:	4a07      	ldr	r2, [pc, #28]	; (8000ce4 <HAL_ADC_MspInit+0xf8>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ccc:	bf00      	nop
 8000cce:	3728      	adds	r7, #40	; 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40012400 	.word	0x40012400
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010800 	.word	0x40010800
 8000ce0:	40010c00 	.word	0x40010c00
 8000ce4:	200000c8 	.word	0x200000c8
 8000ce8:	40020008 	.word	0x40020008

08000cec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a1c      	ldr	r2, [pc, #112]	; (8000d78 <HAL_CAN_MspInit+0x8c>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d131      	bne.n	8000d70 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <HAL_CAN_MspInit+0x90>)
 8000d0e:	69db      	ldr	r3, [r3, #28]
 8000d10:	4a1a      	ldr	r2, [pc, #104]	; (8000d7c <HAL_CAN_MspInit+0x90>)
 8000d12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d16:	61d3      	str	r3, [r2, #28]
 8000d18:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <HAL_CAN_MspInit+0x90>)
 8000d1a:	69db      	ldr	r3, [r3, #28]
 8000d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <HAL_CAN_MspInit+0x90>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <HAL_CAN_MspInit+0x90>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_CAN_MspInit+0x90>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4a:	f107 0310 	add.w	r3, r7, #16
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480b      	ldr	r0, [pc, #44]	; (8000d80 <HAL_CAN_MspInit+0x94>)
 8000d52:	f001 f8c7 	bl	8001ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <HAL_CAN_MspInit+0x94>)
 8000d6c:	f001 f8ba 	bl	8001ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d70:	bf00      	nop
 8000d72:	3720      	adds	r7, #32
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40006400 	.word	0x40006400
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40010800 	.word	0x40010800

08000d84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0318 	add.w	r3, r7, #24
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a2b      	ldr	r2, [pc, #172]	; (8000e4c <HAL_I2C_MspInit+0xc8>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d124      	bne.n	8000dee <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da4:	4b2a      	ldr	r3, [pc, #168]	; (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a29      	ldr	r2, [pc, #164]	; (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000daa:	f043 0308 	orr.w	r3, r3, #8
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b27      	ldr	r3, [pc, #156]	; (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f003 0308 	and.w	r3, r3, #8
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dbc:	23c0      	movs	r3, #192	; 0xc0
 8000dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc0:	2312      	movs	r3, #18
 8000dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc4:	2303      	movs	r3, #3
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 0318 	add.w	r3, r7, #24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4821      	ldr	r0, [pc, #132]	; (8000e54 <HAL_I2C_MspInit+0xd0>)
 8000dd0:	f001 f888 	bl	8001ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dd4:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000dd6:	69db      	ldr	r3, [r3, #28]
 8000dd8:	4a1d      	ldr	r2, [pc, #116]	; (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000dda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dde:	61d3      	str	r3, [r2, #28]
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000de2:	69db      	ldr	r3, [r3, #28]
 8000de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000dec:	e029      	b.n	8000e42 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a19      	ldr	r2, [pc, #100]	; (8000e58 <HAL_I2C_MspInit+0xd4>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d124      	bne.n	8000e42 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000dfe:	f043 0308 	orr.w	r3, r3, #8
 8000e02:	6193      	str	r3, [r2, #24]
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f003 0308 	and.w	r3, r3, #8
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e10:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e16:	2312      	movs	r3, #18
 8000e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1e:	f107 0318 	add.w	r3, r7, #24
 8000e22:	4619      	mov	r1, r3
 8000e24:	480b      	ldr	r0, [pc, #44]	; (8000e54 <HAL_I2C_MspInit+0xd0>)
 8000e26:	f001 f85d 	bl	8001ee4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000e30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e34:	61d3      	str	r3, [r2, #28]
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_I2C_MspInit+0xcc>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
}
 8000e42:	bf00      	nop
 8000e44:	3728      	adds	r7, #40	; 0x28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40005400 	.word	0x40005400
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40010c00 	.word	0x40010c00
 8000e58:	40005800 	.word	0x40005800

08000e5c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a2f      	ldr	r2, [pc, #188]	; (8000f28 <HAL_TIM_OC_MspInit+0xcc>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d10c      	bne.n	8000e88 <HAL_TIM_OC_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e6e:	4b2f      	ldr	r3, [pc, #188]	; (8000f2c <HAL_TIM_OC_MspInit+0xd0>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	4a2e      	ldr	r2, [pc, #184]	; (8000f2c <HAL_TIM_OC_MspInit+0xd0>)
 8000e74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e78:	6193      	str	r3, [r2, #24]
 8000e7a:	4b2c      	ldr	r3, [pc, #176]	; (8000f2c <HAL_TIM_OC_MspInit+0xd0>)
 8000e7c:	699b      	ldr	r3, [r3, #24]
 8000e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e86:	e04a      	b.n	8000f1e <HAL_TIM_OC_MspInit+0xc2>
  else if(htim_oc->Instance==TIM2)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e90:	d134      	bne.n	8000efc <HAL_TIM_OC_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e92:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <HAL_TIM_OC_MspInit+0xd0>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	4a25      	ldr	r2, [pc, #148]	; (8000f2c <HAL_TIM_OC_MspInit+0xd0>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	61d3      	str	r3, [r2, #28]
 8000e9e:	4b23      	ldr	r3, [pc, #140]	; (8000f2c <HAL_TIM_OC_MspInit+0xd0>)
 8000ea0:	69db      	ldr	r3, [r3, #28]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
    hdma_tim2_up.Instance = DMA1_Channel2;
 8000eaa:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <HAL_TIM_OC_MspInit+0xd4>)
 8000eac:	4a21      	ldr	r2, [pc, #132]	; (8000f34 <HAL_TIM_OC_MspInit+0xd8>)
 8000eae:	601a      	str	r2, [r3, #0]
    hdma_tim2_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	; (8000f30 <HAL_TIM_OC_MspInit+0xd4>)
 8000eb2:	2210      	movs	r2, #16
 8000eb4:	605a      	str	r2, [r3, #4]
    hdma_tim2_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	; (8000f30 <HAL_TIM_OC_MspInit+0xd4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
    hdma_tim2_up.Init.MemInc = DMA_MINC_ENABLE;
 8000ebc:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <HAL_TIM_OC_MspInit+0xd4>)
 8000ebe:	2280      	movs	r2, #128	; 0x80
 8000ec0:	60da      	str	r2, [r3, #12]
    hdma_tim2_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ec2:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <HAL_TIM_OC_MspInit+0xd4>)
 8000ec4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec8:	611a      	str	r2, [r3, #16]
    hdma_tim2_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eca:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <HAL_TIM_OC_MspInit+0xd4>)
 8000ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ed0:	615a      	str	r2, [r3, #20]
    hdma_tim2_up.Init.Mode = DMA_NORMAL;
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_TIM_OC_MspInit+0xd4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	619a      	str	r2, [r3, #24]
    hdma_tim2_up.Init.Priority = DMA_PRIORITY_LOW;
 8000ed8:	4b15      	ldr	r3, [pc, #84]	; (8000f30 <HAL_TIM_OC_MspInit+0xd4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_up) != HAL_OK)
 8000ede:	4814      	ldr	r0, [pc, #80]	; (8000f30 <HAL_TIM_OC_MspInit+0xd4>)
 8000ee0:	f000 fea0 	bl	8001c24 <HAL_DMA_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_TIM_OC_MspInit+0x92>
      Error_Handler();
 8000eea:	f7ff fe42 	bl	8000b72 <Error_Handler>
    __HAL_LINKDMA(htim_oc,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a0f      	ldr	r2, [pc, #60]	; (8000f30 <HAL_TIM_OC_MspInit+0xd4>)
 8000ef2:	621a      	str	r2, [r3, #32]
 8000ef4:	4a0e      	ldr	r2, [pc, #56]	; (8000f30 <HAL_TIM_OC_MspInit+0xd4>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000efa:	e010      	b.n	8000f1e <HAL_TIM_OC_MspInit+0xc2>
  else if(htim_oc->Instance==TIM3)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <HAL_TIM_OC_MspInit+0xdc>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d10b      	bne.n	8000f1e <HAL_TIM_OC_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_TIM_OC_MspInit+0xd0>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <HAL_TIM_OC_MspInit+0xd0>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	61d3      	str	r3, [r2, #28]
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_TIM_OC_MspInit+0xd0>)
 8000f14:	69db      	ldr	r3, [r3, #28]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
}
 8000f1e:	bf00      	nop
 8000f20:	3718      	adds	r7, #24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40012c00 	.word	0x40012c00
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	200002b4 	.word	0x200002b4
 8000f34:	4002001c 	.word	0x4002001c
 8000f38:	40000400 	.word	0x40000400

08000f3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a37      	ldr	r2, [pc, #220]	; (8001034 <HAL_TIM_MspPostInit+0xf8>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d119      	bne.n	8000f90 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5c:	4b36      	ldr	r3, [pc, #216]	; (8001038 <HAL_TIM_MspPostInit+0xfc>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a35      	ldr	r2, [pc, #212]	; (8001038 <HAL_TIM_MspPostInit+0xfc>)
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b33      	ldr	r3, [pc, #204]	; (8001038 <HAL_TIM_MspPostInit+0xfc>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	4619      	mov	r1, r3
 8000f88:	482c      	ldr	r0, [pc, #176]	; (800103c <HAL_TIM_MspPostInit+0x100>)
 8000f8a:	f000 ffab 	bl	8001ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f8e:	e04c      	b.n	800102a <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM2)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f98:	d118      	bne.n	8000fcc <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	4b27      	ldr	r3, [pc, #156]	; (8001038 <HAL_TIM_MspPostInit+0xfc>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	4a26      	ldr	r2, [pc, #152]	; (8001038 <HAL_TIM_MspPostInit+0xfc>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	6193      	str	r3, [r2, #24]
 8000fa6:	4b24      	ldr	r3, [pc, #144]	; (8001038 <HAL_TIM_MspPostInit+0xfc>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	481d      	ldr	r0, [pc, #116]	; (800103c <HAL_TIM_MspPostInit+0x100>)
 8000fc6:	f000 ff8d 	bl	8001ee4 <HAL_GPIO_Init>
}
 8000fca:	e02e      	b.n	800102a <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM3)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a1b      	ldr	r2, [pc, #108]	; (8001040 <HAL_TIM_MspPostInit+0x104>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d129      	bne.n	800102a <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_TIM_MspPostInit+0xfc>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	4a17      	ldr	r2, [pc, #92]	; (8001038 <HAL_TIM_MspPostInit+0xfc>)
 8000fdc:	f043 0308 	orr.w	r3, r3, #8
 8000fe0:	6193      	str	r3, [r2, #24]
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HAL_TIM_MspPostInit+0xfc>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	f003 0308 	and.w	r3, r3, #8
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fee:	2320      	movs	r3, #32
 8000ff0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	4810      	ldr	r0, [pc, #64]	; (8001044 <HAL_TIM_MspPostInit+0x108>)
 8001002:	f000 ff6f 	bl	8001ee4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <HAL_TIM_MspPostInit+0x10c>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
 8001024:	4a08      	ldr	r2, [pc, #32]	; (8001048 <HAL_TIM_MspPostInit+0x10c>)
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	6053      	str	r3, [r2, #4]
}
 800102a:	bf00      	nop
 800102c:	3728      	adds	r7, #40	; 0x28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40012c00 	.word	0x40012c00
 8001038:	40021000 	.word	0x40021000
 800103c:	40010800 	.word	0x40010800
 8001040:	40000400 	.word	0x40000400
 8001044:	40010c00 	.word	0x40010c00
 8001048:	40010000 	.word	0x40010000

0800104c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a3b      	ldr	r2, [pc, #236]	; (8001154 <HAL_UART_MspInit+0x108>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d16f      	bne.n	800114c <HAL_UART_MspInit+0x100>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800106c:	4b3a      	ldr	r3, [pc, #232]	; (8001158 <HAL_UART_MspInit+0x10c>)
 800106e:	69db      	ldr	r3, [r3, #28]
 8001070:	4a39      	ldr	r2, [pc, #228]	; (8001158 <HAL_UART_MspInit+0x10c>)
 8001072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001076:	61d3      	str	r3, [r2, #28]
 8001078:	4b37      	ldr	r3, [pc, #220]	; (8001158 <HAL_UART_MspInit+0x10c>)
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b34      	ldr	r3, [pc, #208]	; (8001158 <HAL_UART_MspInit+0x10c>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a33      	ldr	r2, [pc, #204]	; (8001158 <HAL_UART_MspInit+0x10c>)
 800108a:	f043 0304 	orr.w	r3, r3, #4
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b31      	ldr	r3, [pc, #196]	; (8001158 <HAL_UART_MspInit+0x10c>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800109c:	2304      	movs	r3, #4
 800109e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a0:	2312      	movs	r3, #18
 80010a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a4:	2303      	movs	r3, #3
 80010a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	4619      	mov	r1, r3
 80010ae:	482b      	ldr	r0, [pc, #172]	; (800115c <HAL_UART_MspInit+0x110>)
 80010b0:	f000 ff18 	bl	8001ee4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80010b4:	4b2a      	ldr	r3, [pc, #168]	; (8001160 <HAL_UART_MspInit+0x114>)
 80010b6:	4a2b      	ldr	r2, [pc, #172]	; (8001164 <HAL_UART_MspInit+0x118>)
 80010b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ba:	4b29      	ldr	r3, [pc, #164]	; (8001160 <HAL_UART_MspInit+0x114>)
 80010bc:	2200      	movs	r2, #0
 80010be:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c0:	4b27      	ldr	r3, [pc, #156]	; (8001160 <HAL_UART_MspInit+0x114>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010c6:	4b26      	ldr	r3, [pc, #152]	; (8001160 <HAL_UART_MspInit+0x114>)
 80010c8:	2280      	movs	r2, #128	; 0x80
 80010ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010cc:	4b24      	ldr	r3, [pc, #144]	; (8001160 <HAL_UART_MspInit+0x114>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010d2:	4b23      	ldr	r3, [pc, #140]	; (8001160 <HAL_UART_MspInit+0x114>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80010d8:	4b21      	ldr	r3, [pc, #132]	; (8001160 <HAL_UART_MspInit+0x114>)
 80010da:	2200      	movs	r2, #0
 80010dc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <HAL_UART_MspInit+0x114>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80010e4:	481e      	ldr	r0, [pc, #120]	; (8001160 <HAL_UART_MspInit+0x114>)
 80010e6:	f000 fd9d 	bl	8001c24 <HAL_DMA_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_UART_MspInit+0xa8>
    {
      Error_Handler();
 80010f0:	f7ff fd3f 	bl	8000b72 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a1a      	ldr	r2, [pc, #104]	; (8001160 <HAL_UART_MspInit+0x114>)
 80010f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80010fa:	4a19      	ldr	r2, [pc, #100]	; (8001160 <HAL_UART_MspInit+0x114>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001100:	4b19      	ldr	r3, [pc, #100]	; (8001168 <HAL_UART_MspInit+0x11c>)
 8001102:	4a1a      	ldr	r2, [pc, #104]	; (800116c <HAL_UART_MspInit+0x120>)
 8001104:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001106:	4b18      	ldr	r3, [pc, #96]	; (8001168 <HAL_UART_MspInit+0x11c>)
 8001108:	2210      	movs	r2, #16
 800110a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <HAL_UART_MspInit+0x11c>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001112:	4b15      	ldr	r3, [pc, #84]	; (8001168 <HAL_UART_MspInit+0x11c>)
 8001114:	2280      	movs	r2, #128	; 0x80
 8001116:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <HAL_UART_MspInit+0x11c>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_UART_MspInit+0x11c>)
 8001120:	2200      	movs	r2, #0
 8001122:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <HAL_UART_MspInit+0x11c>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <HAL_UART_MspInit+0x11c>)
 800112c:	2200      	movs	r2, #0
 800112e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001130:	480d      	ldr	r0, [pc, #52]	; (8001168 <HAL_UART_MspInit+0x11c>)
 8001132:	f000 fd77 	bl	8001c24 <HAL_DMA_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 800113c:	f7ff fd19 	bl	8000b72 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a09      	ldr	r2, [pc, #36]	; (8001168 <HAL_UART_MspInit+0x11c>)
 8001144:	639a      	str	r2, [r3, #56]	; 0x38
 8001146:	4a08      	ldr	r2, [pc, #32]	; (8001168 <HAL_UART_MspInit+0x11c>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800114c:	bf00      	nop
 800114e:	3720      	adds	r7, #32
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40004400 	.word	0x40004400
 8001158:	40021000 	.word	0x40021000
 800115c:	40010800 	.word	0x40010800
 8001160:	20000340 	.word	0x20000340
 8001164:	4002006c 	.word	0x4002006c
 8001168:	20000384 	.word	0x20000384
 800116c:	40020080 	.word	0x40020080

08001170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <NMI_Handler+0x4>

08001176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117a:	e7fe      	b.n	800117a <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <MemManage_Handler+0x4>

08001182 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <UsageFault_Handler+0x4>

0800118e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119e:	f000 f90b 	bl	80013b8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80011a2:	f004 feab 	bl	8005efc <xTaskGetSchedulerState>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d001      	beq.n	80011b0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80011ac:	f005 fc04 	bl	80069b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <DMA1_Channel1_IRQHandler+0x10>)
 80011ba:	f000 fd8d 	bl	8001cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200000c8 	.word	0x200000c8

080011c8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <DMA1_Channel2_IRQHandler+0x10>)
 80011ce:	f000 fd83 	bl	8001cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200002b4 	.word	0x200002b4

080011dc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <DMA1_Channel6_IRQHandler+0x10>)
 80011e2:	f000 fd79 	bl	8001cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000340 	.word	0x20000340

080011f0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <DMA1_Channel7_IRQHandler+0x10>)
 80011f6:	f000 fd6f 	bl	8001cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000384 	.word	0x20000384

08001204 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <my_i2c_xfer>:
uint32_t const my_i2c_xfer(uint8_t const slave_address,
                           uint8_t const * const p_tx_buffer,
                           size_t const tx_buffer_size,
                           uint8_t * const p_rx_buffer,
                           size_t const rx_buffer_size)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b088      	sub	sp, #32
 8001214:	af02      	add	r7, sp, #8
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	4603      	mov	r3, r0
 800121e:	73fb      	strb	r3, [r7, #15]

        uint32_t const timeout = 100;
 8001220:	2364      	movs	r3, #100	; 0x64
 8001222:	613b      	str	r3, [r7, #16]
        HAL_StatusTypeDef result = HAL_OK;
 8001224:	2300      	movs	r3, #0
 8001226:	75fb      	strb	r3, [r7, #23]
        bool is_rx_operation = true;
 8001228:	2301      	movs	r3, #1
 800122a:	75bb      	strb	r3, [r7, #22]

        if ((NULL == p_tx_buffer) || (0 == tx_buffer_size)) {
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d002      	beq.n	8001238 <my_i2c_xfer+0x28>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d102      	bne.n	800123e <my_i2c_xfer+0x2e>
                result = HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	75fb      	strb	r3, [r7, #23]
 800123c:	e007      	b.n	800124e <my_i2c_xfer+0x3e>

        } else if ((NULL == p_rx_buffer) || (0 == rx_buffer_size)) {
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d002      	beq.n	800124a <my_i2c_xfer+0x3a>
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <my_i2c_xfer+0x3e>
                is_rx_operation = false;
 800124a:	2300      	movs	r3, #0
 800124c:	75bb      	strb	r3, [r7, #22]
        }

        if (HAL_OK == result) {
 800124e:	7dfb      	ldrb	r3, [r7, #23]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d10c      	bne.n	800126e <my_i2c_xfer+0x5e>
                // TX operation
                result = HAL_I2C_Master_Transmit(&hi2c1,
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	b299      	uxth	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	b29a      	uxth	r2, r3
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	4613      	mov	r3, r2
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	480e      	ldr	r0, [pc, #56]	; (80012a0 <my_i2c_xfer+0x90>)
 8001266:	f001 f91d 	bl	80024a4 <HAL_I2C_Master_Transmit>
 800126a:	4603      	mov	r3, r0
 800126c:	75fb      	strb	r3, [r7, #23]
                                                 p_tx_buffer,
                                                 (uint16_t)tx_buffer_size,
                                                 timeout);
        }

        if ((HAL_OK == result) && (is_rx_operation)) {
 800126e:	7dfb      	ldrb	r3, [r7, #23]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d10f      	bne.n	8001294 <my_i2c_xfer+0x84>
 8001274:	7dbb      	ldrb	r3, [r7, #22]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00c      	beq.n	8001294 <my_i2c_xfer+0x84>
                // RX operation
                result = HAL_I2C_Master_Receive(&hi2c1,
 800127a:	7bfb      	ldrb	r3, [r7, #15]
 800127c:	b299      	uxth	r1, r3
 800127e:	6a3b      	ldr	r3, [r7, #32]
 8001280:	b29a      	uxth	r2, r3
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	4613      	mov	r3, r2
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <my_i2c_xfer+0x90>)
 800128c:	f001 fa08 	bl	80026a0 <HAL_I2C_Master_Receive>
 8001290:	4603      	mov	r3, r0
 8001292:	75fb      	strb	r3, [r7, #23]
                                                p_rx_buffer,
                                                rx_buffer_size,
                                                timeout);
        }

        return result;
 8001294:	7dfb      	ldrb	r3, [r7, #23]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000134 	.word	0x20000134

080012a4 <task_alpha>:


void task_alpha(void* arg)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	as5600_error_t result;
	result = as5600_init(my_i2c_xfer);
 80012ac:	480b      	ldr	r0, [pc, #44]	; (80012dc <task_alpha+0x38>)
 80012ae:	f7fe ff4f 	bl	8000150 <as5600_init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	73fb      	strb	r3, [r7, #15]

	as5600_status_t status;
	uint16_t angle;
  for(;;)
  {
  	result = as5600_get_status(&status);
 80012b6:	f107 030e 	add.w	r3, r7, #14
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7fe ff92 	bl	80001e4 <as5600_get_status>
 80012c0:	4603      	mov	r3, r0
 80012c2:	73fb      	strb	r3, [r7, #15]
  	result = as5600_get_angle(&angle);
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7fe ff67 	bl	800019c <as5600_get_angle>
 80012ce:	4603      	mov	r3, r0
 80012d0:	73fb      	strb	r3, [r7, #15]
	  osDelay(100);
 80012d2:	2064      	movs	r0, #100	; 0x64
 80012d4:	f003 f9d8 	bl	8004688 <osDelay>
  	result = as5600_get_status(&status);
 80012d8:	e7ed      	b.n	80012b6 <task_alpha+0x12>
 80012da:	bf00      	nop
 80012dc:	08001211 	.word	0x08001211

080012e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012e0:	f7ff ff90 	bl	8001204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e4:	480b      	ldr	r0, [pc, #44]	; (8001314 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012e6:	490c      	ldr	r1, [pc, #48]	; (8001318 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012e8:	4a0c      	ldr	r2, [pc, #48]	; (800131c <LoopFillZerobss+0x16>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ec:	e002      	b.n	80012f4 <LoopCopyDataInit>

080012ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f2:	3304      	adds	r3, #4

080012f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f8:	d3f9      	bcc.n	80012ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fa:	4a09      	ldr	r2, [pc, #36]	; (8001320 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012fc:	4c09      	ldr	r4, [pc, #36]	; (8001324 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001300:	e001      	b.n	8001306 <LoopFillZerobss>

08001302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001304:	3204      	adds	r2, #4

08001306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001308:	d3fb      	bcc.n	8001302 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800130a:	f005 fdaf 	bl	8006e6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800130e:	f7ff f89d 	bl	800044c <main>
  bx lr
 8001312:	4770      	bx	lr
  ldr r0, =_sdata
 8001314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001318:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800131c:	0800715c 	.word	0x0800715c
  ldr r2, =_sbss
 8001320:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001324:	20001de0 	.word	0x20001de0

08001328 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001328:	e7fe      	b.n	8001328 <ADC1_2_IRQHandler>
	...

0800132c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_Init+0x28>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a07      	ldr	r2, [pc, #28]	; (8001354 <HAL_Init+0x28>)
 8001336:	f043 0310 	orr.w	r3, r3, #16
 800133a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133c:	2003      	movs	r0, #3
 800133e:	f000 fc2f 	bl	8001ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001342:	200f      	movs	r0, #15
 8001344:	f000 f808 	bl	8001358 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001348:	f7ff fc18 	bl	8000b7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40022000 	.word	0x40022000

08001358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001360:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_InitTick+0x54>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_InitTick+0x58>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001372:	fbb2 f3f3 	udiv	r3, r2, r3
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fc47 	bl	8001c0a <HAL_SYSTICK_Config>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e00e      	b.n	80013a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b0f      	cmp	r3, #15
 800138a:	d80a      	bhi.n	80013a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138c:	2200      	movs	r2, #0
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	f04f 30ff 	mov.w	r0, #4294967295
 8001394:	f000 fc0f 	bl	8001bb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001398:	4a06      	ldr	r2, [pc, #24]	; (80013b4 <HAL_InitTick+0x5c>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	e000      	b.n	80013a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000000 	.word	0x20000000
 80013b0:	20000008 	.word	0x20000008
 80013b4:	20000004 	.word	0x20000004

080013b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <HAL_IncTick+0x1c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_IncTick+0x20>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a03      	ldr	r2, [pc, #12]	; (80013d8 <HAL_IncTick+0x20>)
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	20000008 	.word	0x20000008
 80013d8:	200003cc 	.word	0x200003cc

080013dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return uwTick;
 80013e0:	4b02      	ldr	r3, [pc, #8]	; (80013ec <HAL_GetTick+0x10>)
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	200003cc 	.word	0x200003cc

080013f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e0be      	b.n	8001590 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141c:	2b00      	cmp	r3, #0
 800141e:	d109      	bne.n	8001434 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff fbdc 	bl	8000bec <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 f9ab 	bl	8001790 <ADC_ConversionStop_Disable>
 800143a:	4603      	mov	r3, r0
 800143c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	2b00      	cmp	r3, #0
 8001448:	f040 8099 	bne.w	800157e <HAL_ADC_Init+0x18e>
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	2b00      	cmp	r3, #0
 8001450:	f040 8095 	bne.w	800157e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001458:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800145c:	f023 0302 	bic.w	r3, r3, #2
 8001460:	f043 0202 	orr.w	r2, r3, #2
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001470:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	7b1b      	ldrb	r3, [r3, #12]
 8001476:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001478:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	4313      	orrs	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001488:	d003      	beq.n	8001492 <HAL_ADC_Init+0xa2>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d102      	bne.n	8001498 <HAL_ADC_Init+0xa8>
 8001492:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001496:	e000      	b.n	800149a <HAL_ADC_Init+0xaa>
 8001498:	2300      	movs	r3, #0
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	7d1b      	ldrb	r3, [r3, #20]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d119      	bne.n	80014dc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7b1b      	ldrb	r3, [r3, #12]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d109      	bne.n	80014c4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	035a      	lsls	r2, r3, #13
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	e00b      	b.n	80014dc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014c8:	f043 0220 	orr.w	r2, r3, #32
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d4:	f043 0201 	orr.w	r2, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	4b28      	ldr	r3, [pc, #160]	; (8001598 <HAL_ADC_Init+0x1a8>)
 80014f8:	4013      	ands	r3, r2
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	6812      	ldr	r2, [r2, #0]
 80014fe:	68b9      	ldr	r1, [r7, #8]
 8001500:	430b      	orrs	r3, r1
 8001502:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800150c:	d003      	beq.n	8001516 <HAL_ADC_Init+0x126>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d104      	bne.n	8001520 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	3b01      	subs	r3, #1
 800151c:	051b      	lsls	r3, r3, #20
 800151e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001526:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	430a      	orrs	r2, r1
 8001532:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <HAL_ADC_Init+0x1ac>)
 800153c:	4013      	ands	r3, r2
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	429a      	cmp	r2, r3
 8001542:	d10b      	bne.n	800155c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154e:	f023 0303 	bic.w	r3, r3, #3
 8001552:	f043 0201 	orr.w	r2, r3, #1
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800155a:	e018      	b.n	800158e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001560:	f023 0312 	bic.w	r3, r3, #18
 8001564:	f043 0210 	orr.w	r2, r3, #16
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	f043 0201 	orr.w	r2, r3, #1
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800157c:	e007      	b.n	800158e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001582:	f043 0210 	orr.w	r2, r3, #16
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800158e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	ffe1f7fd 	.word	0xffe1f7fd
 800159c:	ff1f0efe 	.word	0xff1f0efe

080015a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d101      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x20>
 80015bc:	2302      	movs	r3, #2
 80015be:	e0dc      	b.n	800177a <HAL_ADC_ConfigChannel+0x1da>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b06      	cmp	r3, #6
 80015ce:	d81c      	bhi.n	800160a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	3b05      	subs	r3, #5
 80015e2:	221f      	movs	r2, #31
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	4019      	ands	r1, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	6818      	ldr	r0, [r3, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	3b05      	subs	r3, #5
 80015fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	635a      	str	r2, [r3, #52]	; 0x34
 8001608:	e03c      	b.n	8001684 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b0c      	cmp	r3, #12
 8001610:	d81c      	bhi.n	800164c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	3b23      	subs	r3, #35	; 0x23
 8001624:	221f      	movs	r2, #31
 8001626:	fa02 f303 	lsl.w	r3, r2, r3
 800162a:	43db      	mvns	r3, r3
 800162c:	4019      	ands	r1, r3
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	6818      	ldr	r0, [r3, #0]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685a      	ldr	r2, [r3, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	3b23      	subs	r3, #35	; 0x23
 800163e:	fa00 f203 	lsl.w	r2, r0, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	631a      	str	r2, [r3, #48]	; 0x30
 800164a:	e01b      	b.n	8001684 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	4613      	mov	r3, r2
 8001658:	009b      	lsls	r3, r3, #2
 800165a:	4413      	add	r3, r2
 800165c:	3b41      	subs	r3, #65	; 0x41
 800165e:	221f      	movs	r2, #31
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	4019      	ands	r1, r3
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	3b41      	subs	r3, #65	; 0x41
 8001678:	fa00 f203 	lsl.w	r2, r0, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b09      	cmp	r3, #9
 800168a:	d91c      	bls.n	80016c6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68d9      	ldr	r1, [r3, #12]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4613      	mov	r3, r2
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	4413      	add	r3, r2
 800169c:	3b1e      	subs	r3, #30
 800169e:	2207      	movs	r2, #7
 80016a0:	fa02 f303 	lsl.w	r3, r2, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	4019      	ands	r1, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	6898      	ldr	r0, [r3, #8]
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4613      	mov	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	3b1e      	subs	r3, #30
 80016b8:	fa00 f203 	lsl.w	r2, r0, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	430a      	orrs	r2, r1
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	e019      	b.n	80016fa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6919      	ldr	r1, [r3, #16]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	2207      	movs	r2, #7
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	4019      	ands	r1, r3
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	6898      	ldr	r0, [r3, #8]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4613      	mov	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	fa00 f203 	lsl.w	r2, r0, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b10      	cmp	r3, #16
 8001700:	d003      	beq.n	800170a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001706:	2b11      	cmp	r3, #17
 8001708:	d132      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a1d      	ldr	r2, [pc, #116]	; (8001784 <HAL_ADC_ConfigChannel+0x1e4>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d125      	bne.n	8001760 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d126      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001730:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b10      	cmp	r3, #16
 8001738:	d11a      	bne.n	8001770 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800173a:	4b13      	ldr	r3, [pc, #76]	; (8001788 <HAL_ADC_ConfigChannel+0x1e8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a13      	ldr	r2, [pc, #76]	; (800178c <HAL_ADC_ConfigChannel+0x1ec>)
 8001740:	fba2 2303 	umull	r2, r3, r2, r3
 8001744:	0c9a      	lsrs	r2, r3, #18
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001750:	e002      	b.n	8001758 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	3b01      	subs	r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f9      	bne.n	8001752 <HAL_ADC_ConfigChannel+0x1b2>
 800175e:	e007      	b.n	8001770 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001764:	f043 0220 	orr.w	r2, r3, #32
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001778:	7bfb      	ldrb	r3, [r7, #15]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	40012400 	.word	0x40012400
 8001788:	20000000 	.word	0x20000000
 800178c:	431bde83 	.word	0x431bde83

08001790 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d12e      	bne.n	8001808 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f022 0201 	bic.w	r2, r2, #1
 80017b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017ba:	f7ff fe0f 	bl	80013dc <HAL_GetTick>
 80017be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017c0:	e01b      	b.n	80017fa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017c2:	f7ff fe0b 	bl	80013dc <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d914      	bls.n	80017fa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d10d      	bne.n	80017fa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e2:	f043 0210 	orr.w	r2, r3, #16
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ee:	f043 0201 	orr.w	r2, r3, #1
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e007      	b.n	800180a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b01      	cmp	r3, #1
 8001806:	d0dc      	beq.n	80017c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b084      	sub	sp, #16
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0ed      	b.n	8001a00 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d102      	bne.n	8001836 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff fa5b 	bl	8000cec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f042 0201 	orr.w	r2, r2, #1
 8001844:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001846:	f7ff fdc9 	bl	80013dc <HAL_GetTick>
 800184a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800184c:	e012      	b.n	8001874 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800184e:	f7ff fdc5 	bl	80013dc <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b0a      	cmp	r3, #10
 800185a:	d90b      	bls.n	8001874 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2205      	movs	r2, #5
 800186c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0c5      	b.n	8001a00 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0e5      	beq.n	800184e <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 0202 	bic.w	r2, r2, #2
 8001890:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001892:	f7ff fda3 	bl	80013dc <HAL_GetTick>
 8001896:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001898:	e012      	b.n	80018c0 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800189a:	f7ff fd9f 	bl	80013dc <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b0a      	cmp	r3, #10
 80018a6:	d90b      	bls.n	80018c0 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2205      	movs	r2, #5
 80018b8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e09f      	b.n	8001a00 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1e5      	bne.n	800189a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	7e1b      	ldrb	r3, [r3, #24]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d108      	bne.n	80018e8 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	e007      	b.n	80018f8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	7e5b      	ldrb	r3, [r3, #25]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d108      	bne.n	8001912 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	e007      	b.n	8001922 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001920:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	7e9b      	ldrb	r3, [r3, #26]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d108      	bne.n	800193c <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f042 0220 	orr.w	r2, r2, #32
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	e007      	b.n	800194c <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0220 	bic.w	r2, r2, #32
 800194a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	7edb      	ldrb	r3, [r3, #27]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d108      	bne.n	8001966 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0210 	bic.w	r2, r2, #16
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	e007      	b.n	8001976 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f042 0210 	orr.w	r2, r2, #16
 8001974:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	7f1b      	ldrb	r3, [r3, #28]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d108      	bne.n	8001990 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f042 0208 	orr.w	r2, r2, #8
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	e007      	b.n	80019a0 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0208 	bic.w	r2, r2, #8
 800199e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7f5b      	ldrb	r3, [r3, #29]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d108      	bne.n	80019ba <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0204 	orr.w	r2, r2, #4
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	e007      	b.n	80019ca <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0204 	bic.w	r2, r2, #4
 80019c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	691b      	ldr	r3, [r3, #16]
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	ea42 0103 	orr.w	r1, r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	1e5a      	subs	r2, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1e:	68ba      	ldr	r2, [r7, #8]
 8001a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a24:	4013      	ands	r3, r2
 8001a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3a:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <__NVIC_SetPriorityGrouping+0x44>)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60d3      	str	r3, [r2, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bc80      	pop	{r7}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <__NVIC_GetPriorityGrouping+0x18>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	f003 0307 	and.w	r3, r3, #7
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	db0b      	blt.n	8001a96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	f003 021f 	and.w	r2, r3, #31
 8001a84:	4906      	ldr	r1, [pc, #24]	; (8001aa0 <__NVIC_EnableIRQ+0x34>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	095b      	lsrs	r3, r3, #5
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a96:	bf00      	nop
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bc80      	pop	{r7}
 8001a9e:	4770      	bx	lr
 8001aa0:	e000e100 	.word	0xe000e100

08001aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db0a      	blt.n	8001ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	490c      	ldr	r1, [pc, #48]	; (8001af0 <__NVIC_SetPriority+0x4c>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001acc:	e00a      	b.n	8001ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4908      	ldr	r1, [pc, #32]	; (8001af4 <__NVIC_SetPriority+0x50>)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	3b04      	subs	r3, #4
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	761a      	strb	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000e100 	.word	0xe000e100
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	; 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f1c3 0307 	rsb	r3, r3, #7
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	bf28      	it	cs
 8001b16:	2304      	movcs	r3, #4
 8001b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d902      	bls.n	8001b28 <NVIC_EncodePriority+0x30>
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3b03      	subs	r3, #3
 8001b26:	e000      	b.n	8001b2a <NVIC_EncodePriority+0x32>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	4313      	orrs	r3, r2
         );
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	; 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b6c:	d301      	bcc.n	8001b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00f      	b.n	8001b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b72:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <SysTick_Config+0x40>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7a:	210f      	movs	r1, #15
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	f7ff ff90 	bl	8001aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <SysTick_Config+0x40>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8a:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <SysTick_Config+0x40>)
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	e000e010 	.word	0xe000e010

08001ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff2d 	bl	8001a08 <__NVIC_SetPriorityGrouping>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b086      	sub	sp, #24
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	60b9      	str	r1, [r7, #8]
 8001bc0:	607a      	str	r2, [r7, #4]
 8001bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bc8:	f7ff ff42 	bl	8001a50 <__NVIC_GetPriorityGrouping>
 8001bcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	68b9      	ldr	r1, [r7, #8]
 8001bd2:	6978      	ldr	r0, [r7, #20]
 8001bd4:	f7ff ff90 	bl	8001af8 <NVIC_EncodePriority>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bde:	4611      	mov	r1, r2
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff ff5f 	bl	8001aa4 <__NVIC_SetPriority>
}
 8001be6:	bf00      	nop
 8001be8:	3718      	adds	r7, #24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b082      	sub	sp, #8
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff35 	bl	8001a6c <__NVIC_EnableIRQ>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7ff ffa2 	bl	8001b5c <SysTick_Config>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e043      	b.n	8001cc2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <HAL_DMA_Init+0xa8>)
 8001c42:	4413      	add	r3, r2
 8001c44:	4a22      	ldr	r2, [pc, #136]	; (8001cd0 <HAL_DMA_Init+0xac>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	009a      	lsls	r2, r3, #2
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <HAL_DMA_Init+0xb0>)
 8001c56:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr
 8001ccc:	bffdfff8 	.word	0xbffdfff8
 8001cd0:	cccccccd 	.word	0xcccccccd
 8001cd4:	40020000 	.word	0x40020000

08001cd8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	409a      	lsls	r2, r3
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d04f      	beq.n	8001da0 <HAL_DMA_IRQHandler+0xc8>
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d04a      	beq.n	8001da0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0320 	and.w	r3, r3, #32
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d107      	bne.n	8001d28 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0204 	bic.w	r2, r2, #4
 8001d26:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a66      	ldr	r2, [pc, #408]	; (8001ec8 <HAL_DMA_IRQHandler+0x1f0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d029      	beq.n	8001d86 <HAL_DMA_IRQHandler+0xae>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a65      	ldr	r2, [pc, #404]	; (8001ecc <HAL_DMA_IRQHandler+0x1f4>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d022      	beq.n	8001d82 <HAL_DMA_IRQHandler+0xaa>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a63      	ldr	r2, [pc, #396]	; (8001ed0 <HAL_DMA_IRQHandler+0x1f8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d01a      	beq.n	8001d7c <HAL_DMA_IRQHandler+0xa4>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a62      	ldr	r2, [pc, #392]	; (8001ed4 <HAL_DMA_IRQHandler+0x1fc>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d012      	beq.n	8001d76 <HAL_DMA_IRQHandler+0x9e>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a60      	ldr	r2, [pc, #384]	; (8001ed8 <HAL_DMA_IRQHandler+0x200>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00a      	beq.n	8001d70 <HAL_DMA_IRQHandler+0x98>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a5f      	ldr	r2, [pc, #380]	; (8001edc <HAL_DMA_IRQHandler+0x204>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d102      	bne.n	8001d6a <HAL_DMA_IRQHandler+0x92>
 8001d64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d68:	e00e      	b.n	8001d88 <HAL_DMA_IRQHandler+0xb0>
 8001d6a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001d6e:	e00b      	b.n	8001d88 <HAL_DMA_IRQHandler+0xb0>
 8001d70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001d74:	e008      	b.n	8001d88 <HAL_DMA_IRQHandler+0xb0>
 8001d76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d7a:	e005      	b.n	8001d88 <HAL_DMA_IRQHandler+0xb0>
 8001d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d80:	e002      	b.n	8001d88 <HAL_DMA_IRQHandler+0xb0>
 8001d82:	2340      	movs	r3, #64	; 0x40
 8001d84:	e000      	b.n	8001d88 <HAL_DMA_IRQHandler+0xb0>
 8001d86:	2304      	movs	r3, #4
 8001d88:	4a55      	ldr	r2, [pc, #340]	; (8001ee0 <HAL_DMA_IRQHandler+0x208>)
 8001d8a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	f000 8094 	beq.w	8001ebe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001d9e:	e08e      	b.n	8001ebe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	2202      	movs	r2, #2
 8001da6:	409a      	lsls	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d056      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x186>
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d051      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0320 	and.w	r3, r3, #32
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10b      	bne.n	8001de0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 020a 	bic.w	r2, r2, #10
 8001dd6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a38      	ldr	r2, [pc, #224]	; (8001ec8 <HAL_DMA_IRQHandler+0x1f0>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d029      	beq.n	8001e3e <HAL_DMA_IRQHandler+0x166>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a37      	ldr	r2, [pc, #220]	; (8001ecc <HAL_DMA_IRQHandler+0x1f4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d022      	beq.n	8001e3a <HAL_DMA_IRQHandler+0x162>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a35      	ldr	r2, [pc, #212]	; (8001ed0 <HAL_DMA_IRQHandler+0x1f8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d01a      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x15c>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a34      	ldr	r2, [pc, #208]	; (8001ed4 <HAL_DMA_IRQHandler+0x1fc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d012      	beq.n	8001e2e <HAL_DMA_IRQHandler+0x156>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a32      	ldr	r2, [pc, #200]	; (8001ed8 <HAL_DMA_IRQHandler+0x200>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00a      	beq.n	8001e28 <HAL_DMA_IRQHandler+0x150>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a31      	ldr	r2, [pc, #196]	; (8001edc <HAL_DMA_IRQHandler+0x204>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d102      	bne.n	8001e22 <HAL_DMA_IRQHandler+0x14a>
 8001e1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e20:	e00e      	b.n	8001e40 <HAL_DMA_IRQHandler+0x168>
 8001e22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e26:	e00b      	b.n	8001e40 <HAL_DMA_IRQHandler+0x168>
 8001e28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e2c:	e008      	b.n	8001e40 <HAL_DMA_IRQHandler+0x168>
 8001e2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e32:	e005      	b.n	8001e40 <HAL_DMA_IRQHandler+0x168>
 8001e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e38:	e002      	b.n	8001e40 <HAL_DMA_IRQHandler+0x168>
 8001e3a:	2320      	movs	r3, #32
 8001e3c:	e000      	b.n	8001e40 <HAL_DMA_IRQHandler+0x168>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	4a27      	ldr	r2, [pc, #156]	; (8001ee0 <HAL_DMA_IRQHandler+0x208>)
 8001e42:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d034      	beq.n	8001ebe <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001e5c:	e02f      	b.n	8001ebe <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	2208      	movs	r2, #8
 8001e64:	409a      	lsls	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d028      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x1e8>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d023      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 020e 	bic.w	r2, r2, #14
 8001e86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e90:	2101      	movs	r1, #1
 8001e92:	fa01 f202 	lsl.w	r2, r1, r2
 8001e96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d004      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	4798      	blx	r3
    }
  }
  return;
 8001ebe:	bf00      	nop
 8001ec0:	bf00      	nop
}
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40020008 	.word	0x40020008
 8001ecc:	4002001c 	.word	0x4002001c
 8001ed0:	40020030 	.word	0x40020030
 8001ed4:	40020044 	.word	0x40020044
 8001ed8:	40020058 	.word	0x40020058
 8001edc:	4002006c 	.word	0x4002006c
 8001ee0:	40020000 	.word	0x40020000

08001ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b08b      	sub	sp, #44	; 0x2c
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ef6:	e169      	b.n	80021cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	f040 8158 	bne.w	80021c6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	4a9a      	ldr	r2, [pc, #616]	; (8002184 <HAL_GPIO_Init+0x2a0>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d05e      	beq.n	8001fde <HAL_GPIO_Init+0xfa>
 8001f20:	4a98      	ldr	r2, [pc, #608]	; (8002184 <HAL_GPIO_Init+0x2a0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d875      	bhi.n	8002012 <HAL_GPIO_Init+0x12e>
 8001f26:	4a98      	ldr	r2, [pc, #608]	; (8002188 <HAL_GPIO_Init+0x2a4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d058      	beq.n	8001fde <HAL_GPIO_Init+0xfa>
 8001f2c:	4a96      	ldr	r2, [pc, #600]	; (8002188 <HAL_GPIO_Init+0x2a4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d86f      	bhi.n	8002012 <HAL_GPIO_Init+0x12e>
 8001f32:	4a96      	ldr	r2, [pc, #600]	; (800218c <HAL_GPIO_Init+0x2a8>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d052      	beq.n	8001fde <HAL_GPIO_Init+0xfa>
 8001f38:	4a94      	ldr	r2, [pc, #592]	; (800218c <HAL_GPIO_Init+0x2a8>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d869      	bhi.n	8002012 <HAL_GPIO_Init+0x12e>
 8001f3e:	4a94      	ldr	r2, [pc, #592]	; (8002190 <HAL_GPIO_Init+0x2ac>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d04c      	beq.n	8001fde <HAL_GPIO_Init+0xfa>
 8001f44:	4a92      	ldr	r2, [pc, #584]	; (8002190 <HAL_GPIO_Init+0x2ac>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d863      	bhi.n	8002012 <HAL_GPIO_Init+0x12e>
 8001f4a:	4a92      	ldr	r2, [pc, #584]	; (8002194 <HAL_GPIO_Init+0x2b0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d046      	beq.n	8001fde <HAL_GPIO_Init+0xfa>
 8001f50:	4a90      	ldr	r2, [pc, #576]	; (8002194 <HAL_GPIO_Init+0x2b0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d85d      	bhi.n	8002012 <HAL_GPIO_Init+0x12e>
 8001f56:	2b12      	cmp	r3, #18
 8001f58:	d82a      	bhi.n	8001fb0 <HAL_GPIO_Init+0xcc>
 8001f5a:	2b12      	cmp	r3, #18
 8001f5c:	d859      	bhi.n	8002012 <HAL_GPIO_Init+0x12e>
 8001f5e:	a201      	add	r2, pc, #4	; (adr r2, 8001f64 <HAL_GPIO_Init+0x80>)
 8001f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f64:	08001fdf 	.word	0x08001fdf
 8001f68:	08001fb9 	.word	0x08001fb9
 8001f6c:	08001fcb 	.word	0x08001fcb
 8001f70:	0800200d 	.word	0x0800200d
 8001f74:	08002013 	.word	0x08002013
 8001f78:	08002013 	.word	0x08002013
 8001f7c:	08002013 	.word	0x08002013
 8001f80:	08002013 	.word	0x08002013
 8001f84:	08002013 	.word	0x08002013
 8001f88:	08002013 	.word	0x08002013
 8001f8c:	08002013 	.word	0x08002013
 8001f90:	08002013 	.word	0x08002013
 8001f94:	08002013 	.word	0x08002013
 8001f98:	08002013 	.word	0x08002013
 8001f9c:	08002013 	.word	0x08002013
 8001fa0:	08002013 	.word	0x08002013
 8001fa4:	08002013 	.word	0x08002013
 8001fa8:	08001fc1 	.word	0x08001fc1
 8001fac:	08001fd5 	.word	0x08001fd5
 8001fb0:	4a79      	ldr	r2, [pc, #484]	; (8002198 <HAL_GPIO_Init+0x2b4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d013      	beq.n	8001fde <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fb6:	e02c      	b.n	8002012 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	623b      	str	r3, [r7, #32]
          break;
 8001fbe:	e029      	b.n	8002014 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	623b      	str	r3, [r7, #32]
          break;
 8001fc8:	e024      	b.n	8002014 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	3308      	adds	r3, #8
 8001fd0:	623b      	str	r3, [r7, #32]
          break;
 8001fd2:	e01f      	b.n	8002014 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	330c      	adds	r3, #12
 8001fda:	623b      	str	r3, [r7, #32]
          break;
 8001fdc:	e01a      	b.n	8002014 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d102      	bne.n	8001fec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fe6:	2304      	movs	r3, #4
 8001fe8:	623b      	str	r3, [r7, #32]
          break;
 8001fea:	e013      	b.n	8002014 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d105      	bne.n	8002000 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ff4:	2308      	movs	r3, #8
 8001ff6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	69fa      	ldr	r2, [r7, #28]
 8001ffc:	611a      	str	r2, [r3, #16]
          break;
 8001ffe:	e009      	b.n	8002014 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002000:	2308      	movs	r3, #8
 8002002:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69fa      	ldr	r2, [r7, #28]
 8002008:	615a      	str	r2, [r3, #20]
          break;
 800200a:	e003      	b.n	8002014 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800200c:	2300      	movs	r3, #0
 800200e:	623b      	str	r3, [r7, #32]
          break;
 8002010:	e000      	b.n	8002014 <HAL_GPIO_Init+0x130>
          break;
 8002012:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2bff      	cmp	r3, #255	; 0xff
 8002018:	d801      	bhi.n	800201e <HAL_GPIO_Init+0x13a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	e001      	b.n	8002022 <HAL_GPIO_Init+0x13e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3304      	adds	r3, #4
 8002022:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	2bff      	cmp	r3, #255	; 0xff
 8002028:	d802      	bhi.n	8002030 <HAL_GPIO_Init+0x14c>
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	e002      	b.n	8002036 <HAL_GPIO_Init+0x152>
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	3b08      	subs	r3, #8
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	210f      	movs	r1, #15
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	fa01 f303 	lsl.w	r3, r1, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	401a      	ands	r2, r3
 8002048:	6a39      	ldr	r1, [r7, #32]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	fa01 f303 	lsl.w	r3, r1, r3
 8002050:	431a      	orrs	r2, r3
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 80b1 	beq.w	80021c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002064:	4b4d      	ldr	r3, [pc, #308]	; (800219c <HAL_GPIO_Init+0x2b8>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	4a4c      	ldr	r2, [pc, #304]	; (800219c <HAL_GPIO_Init+0x2b8>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	6193      	str	r3, [r2, #24]
 8002070:	4b4a      	ldr	r3, [pc, #296]	; (800219c <HAL_GPIO_Init+0x2b8>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800207c:	4a48      	ldr	r2, [pc, #288]	; (80021a0 <HAL_GPIO_Init+0x2bc>)
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	089b      	lsrs	r3, r3, #2
 8002082:	3302      	adds	r3, #2
 8002084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002088:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	220f      	movs	r2, #15
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4013      	ands	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	4a40      	ldr	r2, [pc, #256]	; (80021a4 <HAL_GPIO_Init+0x2c0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d013      	beq.n	80020d0 <HAL_GPIO_Init+0x1ec>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4a3f      	ldr	r2, [pc, #252]	; (80021a8 <HAL_GPIO_Init+0x2c4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d00d      	beq.n	80020cc <HAL_GPIO_Init+0x1e8>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4a3e      	ldr	r2, [pc, #248]	; (80021ac <HAL_GPIO_Init+0x2c8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d007      	beq.n	80020c8 <HAL_GPIO_Init+0x1e4>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a3d      	ldr	r2, [pc, #244]	; (80021b0 <HAL_GPIO_Init+0x2cc>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d101      	bne.n	80020c4 <HAL_GPIO_Init+0x1e0>
 80020c0:	2303      	movs	r3, #3
 80020c2:	e006      	b.n	80020d2 <HAL_GPIO_Init+0x1ee>
 80020c4:	2304      	movs	r3, #4
 80020c6:	e004      	b.n	80020d2 <HAL_GPIO_Init+0x1ee>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e002      	b.n	80020d2 <HAL_GPIO_Init+0x1ee>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <HAL_GPIO_Init+0x1ee>
 80020d0:	2300      	movs	r3, #0
 80020d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d4:	f002 0203 	and.w	r2, r2, #3
 80020d8:	0092      	lsls	r2, r2, #2
 80020da:	4093      	lsls	r3, r2
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	4313      	orrs	r3, r2
 80020e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020e2:	492f      	ldr	r1, [pc, #188]	; (80021a0 <HAL_GPIO_Init+0x2bc>)
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	3302      	adds	r3, #2
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020fc:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	492c      	ldr	r1, [pc, #176]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	608b      	str	r3, [r1, #8]
 8002108:	e006      	b.n	8002118 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800210a:	4b2a      	ldr	r3, [pc, #168]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 800210c:	689a      	ldr	r2, [r3, #8]
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	43db      	mvns	r3, r3
 8002112:	4928      	ldr	r1, [pc, #160]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 8002114:	4013      	ands	r3, r2
 8002116:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d006      	beq.n	8002132 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002124:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	4922      	ldr	r1, [pc, #136]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	60cb      	str	r3, [r1, #12]
 8002130:	e006      	b.n	8002140 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002132:	4b20      	ldr	r3, [pc, #128]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	43db      	mvns	r3, r3
 800213a:	491e      	ldr	r1, [pc, #120]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 800213c:	4013      	ands	r3, r2
 800213e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d006      	beq.n	800215a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	4918      	ldr	r1, [pc, #96]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	4313      	orrs	r3, r2
 8002156:	604b      	str	r3, [r1, #4]
 8002158:	e006      	b.n	8002168 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800215a:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	43db      	mvns	r3, r3
 8002162:	4914      	ldr	r1, [pc, #80]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 8002164:	4013      	ands	r3, r2
 8002166:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d021      	beq.n	80021b8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	490e      	ldr	r1, [pc, #56]	; (80021b4 <HAL_GPIO_Init+0x2d0>)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	600b      	str	r3, [r1, #0]
 8002180:	e021      	b.n	80021c6 <HAL_GPIO_Init+0x2e2>
 8002182:	bf00      	nop
 8002184:	10320000 	.word	0x10320000
 8002188:	10310000 	.word	0x10310000
 800218c:	10220000 	.word	0x10220000
 8002190:	10210000 	.word	0x10210000
 8002194:	10120000 	.word	0x10120000
 8002198:	10110000 	.word	0x10110000
 800219c:	40021000 	.word	0x40021000
 80021a0:	40010000 	.word	0x40010000
 80021a4:	40010800 	.word	0x40010800
 80021a8:	40010c00 	.word	0x40010c00
 80021ac:	40011000 	.word	0x40011000
 80021b0:	40011400 	.word	0x40011400
 80021b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_GPIO_Init+0x304>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	43db      	mvns	r3, r3
 80021c0:	4909      	ldr	r1, [pc, #36]	; (80021e8 <HAL_GPIO_Init+0x304>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	3301      	adds	r3, #1
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	fa22 f303 	lsr.w	r3, r2, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	f47f ae8e 	bne.w	8001ef8 <HAL_GPIO_Init+0x14>
  }
}
 80021dc:	bf00      	nop
 80021de:	bf00      	nop
 80021e0:	372c      	adds	r7, #44	; 0x2c
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr
 80021e8:	40010400 	.word	0x40010400

080021ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
 80021f8:	4613      	mov	r3, r2
 80021fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021fc:	787b      	ldrb	r3, [r7, #1]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002202:	887a      	ldrh	r2, [r7, #2]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002208:	e003      	b.n	8002212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800220a:	887b      	ldrh	r3, [r7, #2]
 800220c:	041a      	lsls	r2, r3, #16
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	611a      	str	r2, [r3, #16]
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	bc80      	pop	{r7}
 800221a:	4770      	bx	lr

0800221c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e12b      	b.n	8002486 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7fe fd9e 	bl	8000d84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2224      	movs	r2, #36	; 0x24
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800226e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800227e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002280:	f001 fbca 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 8002284:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4a81      	ldr	r2, [pc, #516]	; (8002490 <HAL_I2C_Init+0x274>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d807      	bhi.n	80022a0 <HAL_I2C_Init+0x84>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	4a80      	ldr	r2, [pc, #512]	; (8002494 <HAL_I2C_Init+0x278>)
 8002294:	4293      	cmp	r3, r2
 8002296:	bf94      	ite	ls
 8002298:	2301      	movls	r3, #1
 800229a:	2300      	movhi	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	e006      	b.n	80022ae <HAL_I2C_Init+0x92>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4a7d      	ldr	r2, [pc, #500]	; (8002498 <HAL_I2C_Init+0x27c>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	bf94      	ite	ls
 80022a8:	2301      	movls	r3, #1
 80022aa:	2300      	movhi	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e0e7      	b.n	8002486 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	4a78      	ldr	r2, [pc, #480]	; (800249c <HAL_I2C_Init+0x280>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	0c9b      	lsrs	r3, r3, #18
 80022c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	4a6a      	ldr	r2, [pc, #424]	; (8002490 <HAL_I2C_Init+0x274>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d802      	bhi.n	80022f0 <HAL_I2C_Init+0xd4>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	3301      	adds	r3, #1
 80022ee:	e009      	b.n	8002304 <HAL_I2C_Init+0xe8>
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022f6:	fb02 f303 	mul.w	r3, r2, r3
 80022fa:	4a69      	ldr	r2, [pc, #420]	; (80024a0 <HAL_I2C_Init+0x284>)
 80022fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002300:	099b      	lsrs	r3, r3, #6
 8002302:	3301      	adds	r3, #1
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	6812      	ldr	r2, [r2, #0]
 8002308:	430b      	orrs	r3, r1
 800230a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002316:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	495c      	ldr	r1, [pc, #368]	; (8002490 <HAL_I2C_Init+0x274>)
 8002320:	428b      	cmp	r3, r1
 8002322:	d819      	bhi.n	8002358 <HAL_I2C_Init+0x13c>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1e59      	subs	r1, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002332:	1c59      	adds	r1, r3, #1
 8002334:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002338:	400b      	ands	r3, r1
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00a      	beq.n	8002354 <HAL_I2C_Init+0x138>
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	1e59      	subs	r1, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fbb1 f3f3 	udiv	r3, r1, r3
 800234c:	3301      	adds	r3, #1
 800234e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002352:	e051      	b.n	80023f8 <HAL_I2C_Init+0x1dc>
 8002354:	2304      	movs	r3, #4
 8002356:	e04f      	b.n	80023f8 <HAL_I2C_Init+0x1dc>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d111      	bne.n	8002384 <HAL_I2C_Init+0x168>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1e58      	subs	r0, r3, #1
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6859      	ldr	r1, [r3, #4]
 8002368:	460b      	mov	r3, r1
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	440b      	add	r3, r1
 800236e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002372:	3301      	adds	r3, #1
 8002374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002378:	2b00      	cmp	r3, #0
 800237a:	bf0c      	ite	eq
 800237c:	2301      	moveq	r3, #1
 800237e:	2300      	movne	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	e012      	b.n	80023aa <HAL_I2C_Init+0x18e>
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	1e58      	subs	r0, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	440b      	add	r3, r1
 8002392:	0099      	lsls	r1, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	fbb0 f3f3 	udiv	r3, r0, r3
 800239a:	3301      	adds	r3, #1
 800239c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	bf0c      	ite	eq
 80023a4:	2301      	moveq	r3, #1
 80023a6:	2300      	movne	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_I2C_Init+0x196>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e022      	b.n	80023f8 <HAL_I2C_Init+0x1dc>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10e      	bne.n	80023d8 <HAL_I2C_Init+0x1bc>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1e58      	subs	r0, r3, #1
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6859      	ldr	r1, [r3, #4]
 80023c2:	460b      	mov	r3, r1
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	440b      	add	r3, r1
 80023c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80023cc:	3301      	adds	r3, #1
 80023ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d6:	e00f      	b.n	80023f8 <HAL_I2C_Init+0x1dc>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1e58      	subs	r0, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6859      	ldr	r1, [r3, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	0099      	lsls	r1, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	6809      	ldr	r1, [r1, #0]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69da      	ldr	r2, [r3, #28]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002426:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6911      	ldr	r1, [r2, #16]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68d2      	ldr	r2, [r2, #12]
 8002432:	4311      	orrs	r1, r2
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	430b      	orrs	r3, r1
 800243a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	000186a0 	.word	0x000186a0
 8002494:	001e847f 	.word	0x001e847f
 8002498:	003d08ff 	.word	0x003d08ff
 800249c:	431bde83 	.word	0x431bde83
 80024a0:	10624dd3 	.word	0x10624dd3

080024a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af02      	add	r7, sp, #8
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	461a      	mov	r2, r3
 80024b0:	460b      	mov	r3, r1
 80024b2:	817b      	strh	r3, [r7, #10]
 80024b4:	4613      	mov	r3, r2
 80024b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024b8:	f7fe ff90 	bl	80013dc <HAL_GetTick>
 80024bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b20      	cmp	r3, #32
 80024c8:	f040 80e0 	bne.w	800268c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2319      	movs	r3, #25
 80024d2:	2201      	movs	r2, #1
 80024d4:	4970      	ldr	r1, [pc, #448]	; (8002698 <HAL_I2C_Master_Transmit+0x1f4>)
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 fc9e 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024e2:	2302      	movs	r3, #2
 80024e4:	e0d3      	b.n	800268e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_I2C_Master_Transmit+0x50>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e0cc      	b.n	800268e <HAL_I2C_Master_Transmit+0x1ea>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b01      	cmp	r3, #1
 8002508:	d007      	beq.n	800251a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002528:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2221      	movs	r2, #33	; 0x21
 800252e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2210      	movs	r2, #16
 8002536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	893a      	ldrh	r2, [r7, #8]
 800254a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4a50      	ldr	r2, [pc, #320]	; (800269c <HAL_I2C_Master_Transmit+0x1f8>)
 800255a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800255c:	8979      	ldrh	r1, [r7, #10]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	6a3a      	ldr	r2, [r7, #32]
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f000 fb08 	bl	8002b78 <I2C_MasterRequestWrite>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e08d      	b.n	800268e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002588:	e066      	b.n	8002658 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	6a39      	ldr	r1, [r7, #32]
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f000 fd5c 	bl	800304c <I2C_WaitOnTXEFlagUntilTimeout>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00d      	beq.n	80025b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d107      	bne.n	80025b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e06b      	b.n	800268e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ba:	781a      	ldrb	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025de:	3b01      	subs	r3, #1
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d11b      	bne.n	800262c <HAL_I2C_Master_Transmit+0x188>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d017      	beq.n	800262c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	781a      	ldrb	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	6a39      	ldr	r1, [r7, #32]
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 fd53 	bl	80030dc <I2C_WaitOnBTFFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d00d      	beq.n	8002658 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	2b04      	cmp	r3, #4
 8002642:	d107      	bne.n	8002654 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002652:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e01a      	b.n	800268e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265c:	2b00      	cmp	r3, #0
 800265e:	d194      	bne.n	800258a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800266e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	e000      	b.n	800268e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800268c:	2302      	movs	r3, #2
  }
}
 800268e:	4618      	mov	r0, r3
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	00100002 	.word	0x00100002
 800269c:	ffff0000 	.word	0xffff0000

080026a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08c      	sub	sp, #48	; 0x30
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	461a      	mov	r2, r3
 80026ac:	460b      	mov	r3, r1
 80026ae:	817b      	strh	r3, [r7, #10]
 80026b0:	4613      	mov	r3, r2
 80026b2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026b8:	f7fe fe90 	bl	80013dc <HAL_GetTick>
 80026bc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b20      	cmp	r3, #32
 80026c8:	f040 824b 	bne.w	8002b62 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	2319      	movs	r3, #25
 80026d2:	2201      	movs	r2, #1
 80026d4:	497f      	ldr	r1, [pc, #508]	; (80028d4 <HAL_I2C_Master_Receive+0x234>)
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f000 fb9e 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80026e2:	2302      	movs	r3, #2
 80026e4:	e23e      	b.n	8002b64 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_I2C_Master_Receive+0x54>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e237      	b.n	8002b64 <HAL_I2C_Master_Receive+0x4c4>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b01      	cmp	r3, #1
 8002708:	d007      	beq.n	800271a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0201 	orr.w	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002728:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2222      	movs	r2, #34	; 0x22
 800272e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2210      	movs	r2, #16
 8002736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	893a      	ldrh	r2, [r7, #8]
 800274a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4a5f      	ldr	r2, [pc, #380]	; (80028d8 <HAL_I2C_Master_Receive+0x238>)
 800275a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800275c:	8979      	ldrh	r1, [r7, #10]
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 fa8a 	bl	8002c7c <I2C_MasterRequestRead>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e1f8      	b.n	8002b64 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002776:	2b00      	cmp	r3, #0
 8002778:	d113      	bne.n	80027a2 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	61fb      	str	r3, [r7, #28]
 800278e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	e1cc      	b.n	8002b3c <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d11e      	bne.n	80027e8 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027ba:	b672      	cpsid	i
}
 80027bc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027be:	2300      	movs	r3, #0
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80027e4:	b662      	cpsie	i
}
 80027e6:	e035      	b.n	8002854 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d11e      	bne.n	800282e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002800:	b672      	cpsid	i
}
 8002802:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002828:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800282a:	b662      	cpsie	i
}
 800282c:	e012      	b.n	8002854 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800283c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800283e:	2300      	movs	r3, #0
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002854:	e172      	b.n	8002b3c <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285a:	2b03      	cmp	r3, #3
 800285c:	f200 811f 	bhi.w	8002a9e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002864:	2b01      	cmp	r3, #1
 8002866:	d123      	bne.n	80028b0 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 fc7d 	bl	800316c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e173      	b.n	8002b64 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691a      	ldr	r2, [r3, #16]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	3b01      	subs	r3, #1
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028ae:	e145      	b.n	8002b3c <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d152      	bne.n	800295e <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028be:	2200      	movs	r2, #0
 80028c0:	4906      	ldr	r1, [pc, #24]	; (80028dc <HAL_I2C_Master_Receive+0x23c>)
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 faa8 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d008      	beq.n	80028e0 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e148      	b.n	8002b64 <HAL_I2C_Master_Receive+0x4c4>
 80028d2:	bf00      	nop
 80028d4:	00100002 	.word	0x00100002
 80028d8:	ffff0000 	.word	0xffff0000
 80028dc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80028e0:	b672      	cpsid	i
}
 80028e2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002926:	b662      	cpsie	i
}
 8002928:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002946:	3b01      	subs	r3, #1
 8002948:	b29a      	uxth	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800295c:	e0ee      	b.n	8002b3c <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002964:	2200      	movs	r2, #0
 8002966:	4981      	ldr	r1, [pc, #516]	; (8002b6c <HAL_I2C_Master_Receive+0x4cc>)
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 fa55 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0f5      	b.n	8002b64 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002986:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002988:	b672      	cpsid	i
}
 800298a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	1c5a      	adds	r2, r3, #1
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a8:	3b01      	subs	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80029be:	4b6c      	ldr	r3, [pc, #432]	; (8002b70 <HAL_I2C_Master_Receive+0x4d0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	08db      	lsrs	r3, r3, #3
 80029c4:	4a6b      	ldr	r2, [pc, #428]	; (8002b74 <HAL_I2C_Master_Receive+0x4d4>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	0a1a      	lsrs	r2, r3, #8
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	00da      	lsls	r2, r3, #3
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	3b01      	subs	r3, #1
 80029dc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d118      	bne.n	8002a16 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2220      	movs	r2, #32
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f043 0220 	orr.w	r2, r3, #32
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002a06:	b662      	cpsie	i
}
 8002a08:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e0a6      	b.n	8002b64 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	695b      	ldr	r3, [r3, #20]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d1d9      	bne.n	80029d8 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691a      	ldr	r2, [r3, #16]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	b2d2      	uxtb	r2, r2
 8002a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a50:	3b01      	subs	r3, #1
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a66:	b662      	cpsie	i
}
 8002a68:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	691a      	ldr	r2, [r3, #16]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a9c:	e04e      	b.n	8002b3c <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 fb62 	bl	800316c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e058      	b.n	8002b64 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	b2d2      	uxtb	r2, r2
 8002abe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d124      	bne.n	8002b3c <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d107      	bne.n	8002b0a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b08:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	b2d2      	uxtb	r2, r2
 8002b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f47f ae88 	bne.w	8002856 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2220      	movs	r2, #32
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	e000      	b.n	8002b64 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002b62:	2302      	movs	r3, #2
  }
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3728      	adds	r7, #40	; 0x28
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	00010004 	.word	0x00010004
 8002b70:	20000000 	.word	0x20000000
 8002b74:	14f8b589 	.word	0x14f8b589

08002b78 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af02      	add	r7, sp, #8
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	607a      	str	r2, [r7, #4]
 8002b82:	603b      	str	r3, [r7, #0]
 8002b84:	460b      	mov	r3, r1
 8002b86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b08      	cmp	r3, #8
 8002b92:	d006      	beq.n	8002ba2 <I2C_MasterRequestWrite+0x2a>
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d003      	beq.n	8002ba2 <I2C_MasterRequestWrite+0x2a>
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ba0:	d108      	bne.n	8002bb4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	e00b      	b.n	8002bcc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb8:	2b12      	cmp	r3, #18
 8002bba:	d107      	bne.n	8002bcc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f000 f91d 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d00d      	beq.n	8002c00 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bf2:	d103      	bne.n	8002bfc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bfa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e035      	b.n	8002c6c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c08:	d108      	bne.n	8002c1c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c0a:	897b      	ldrh	r3, [r7, #10]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c18:	611a      	str	r2, [r3, #16]
 8002c1a:	e01b      	b.n	8002c54 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c1c:	897b      	ldrh	r3, [r7, #10]
 8002c1e:	11db      	asrs	r3, r3, #7
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	f003 0306 	and.w	r3, r3, #6
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	f063 030f 	orn	r3, r3, #15
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	490e      	ldr	r1, [pc, #56]	; (8002c74 <I2C_MasterRequestWrite+0xfc>)
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 f966 	bl	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e010      	b.n	8002c6c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c4a:	897b      	ldrh	r3, [r7, #10]
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	4907      	ldr	r1, [pc, #28]	; (8002c78 <I2C_MasterRequestWrite+0x100>)
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f956 	bl	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3718      	adds	r7, #24
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	00010008 	.word	0x00010008
 8002c78:	00010002 	.word	0x00010002

08002c7c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b088      	sub	sp, #32
 8002c80:	af02      	add	r7, sp, #8
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	607a      	str	r2, [r7, #4]
 8002c86:	603b      	str	r3, [r7, #0]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ca0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d006      	beq.n	8002cb6 <I2C_MasterRequestRead+0x3a>
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d003      	beq.n	8002cb6 <I2C_MasterRequestRead+0x3a>
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cb4:	d108      	bne.n	8002cc8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	e00b      	b.n	8002ce0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	2b11      	cmp	r3, #17
 8002cce:	d107      	bne.n	8002ce0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cde:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f893 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00d      	beq.n	8002d14 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d06:	d103      	bne.n	8002d10 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e079      	b.n	8002e08 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d1c:	d108      	bne.n	8002d30 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d1e:	897b      	ldrh	r3, [r7, #10]
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	611a      	str	r2, [r3, #16]
 8002d2e:	e05f      	b.n	8002df0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d30:	897b      	ldrh	r3, [r7, #10]
 8002d32:	11db      	asrs	r3, r3, #7
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f003 0306 	and.w	r3, r3, #6
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	f063 030f 	orn	r3, r3, #15
 8002d40:	b2da      	uxtb	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	4930      	ldr	r1, [pc, #192]	; (8002e10 <I2C_MasterRequestRead+0x194>)
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f8dc 	bl	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e054      	b.n	8002e08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d5e:	897b      	ldrh	r3, [r7, #10]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4929      	ldr	r1, [pc, #164]	; (8002e14 <I2C_MasterRequestRead+0x198>)
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f8cc 	bl	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e044      	b.n	8002e08 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002da2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f831 	bl	8002e18 <I2C_WaitOnFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00d      	beq.n	8002dd8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dca:	d103      	bne.n	8002dd4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e017      	b.n	8002e08 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002dd8:	897b      	ldrh	r3, [r7, #10]
 8002dda:	11db      	asrs	r3, r3, #7
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	f003 0306 	and.w	r3, r3, #6
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f063 030e 	orn	r3, r3, #14
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4907      	ldr	r1, [pc, #28]	; (8002e14 <I2C_MasterRequestRead+0x198>)
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f888 	bl	8002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	00010008 	.word	0x00010008
 8002e14:	00010002 	.word	0x00010002

08002e18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	4613      	mov	r3, r2
 8002e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e28:	e048      	b.n	8002ebc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e30:	d044      	beq.n	8002ebc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e32:	f7fe fad3 	bl	80013dc <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d302      	bcc.n	8002e48 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d139      	bne.n	8002ebc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	0c1b      	lsrs	r3, r3, #16
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d10d      	bne.n	8002e6e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	695b      	ldr	r3, [r3, #20]
 8002e58:	43da      	mvns	r2, r3
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf0c      	ite	eq
 8002e64:	2301      	moveq	r3, #1
 8002e66:	2300      	movne	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	e00c      	b.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	43da      	mvns	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bf0c      	ite	eq
 8002e80:	2301      	moveq	r3, #1
 8002e82:	2300      	movne	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	461a      	mov	r2, r3
 8002e88:	79fb      	ldrb	r3, [r7, #7]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d116      	bne.n	8002ebc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f043 0220 	orr.w	r2, r3, #32
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e023      	b.n	8002f04 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	0c1b      	lsrs	r3, r3, #16
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d10d      	bne.n	8002ee2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	43da      	mvns	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf0c      	ite	eq
 8002ed8:	2301      	moveq	r3, #1
 8002eda:	2300      	movne	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	461a      	mov	r2, r3
 8002ee0:	e00c      	b.n	8002efc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	43da      	mvns	r2, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	4013      	ands	r3, r2
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	461a      	mov	r2, r3
 8002efc:	79fb      	ldrb	r3, [r7, #7]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d093      	beq.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f1a:	e071      	b.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2a:	d123      	bne.n	8002f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f3a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2220      	movs	r2, #32
 8002f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f043 0204 	orr.w	r2, r3, #4
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e067      	b.n	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7a:	d041      	beq.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7c:	f7fe fa2e 	bl	80013dc <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d302      	bcc.n	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d136      	bne.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d10c      	bne.n	8002fb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	bf14      	ite	ne
 8002fae:	2301      	movne	r3, #1
 8002fb0:	2300      	moveq	r3, #0
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	e00b      	b.n	8002fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	43da      	mvns	r2, r3
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf14      	ite	ne
 8002fc8:	2301      	movne	r3, #1
 8002fca:	2300      	moveq	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d016      	beq.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e021      	b.n	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	0c1b      	lsrs	r3, r3, #16
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b01      	cmp	r3, #1
 8003008:	d10c      	bne.n	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	43da      	mvns	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4013      	ands	r3, r2
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf14      	ite	ne
 800301c:	2301      	movne	r3, #1
 800301e:	2300      	moveq	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	e00b      	b.n	800303c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	43da      	mvns	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	4013      	ands	r3, r2
 8003030:	b29b      	uxth	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	bf14      	ite	ne
 8003036:	2301      	movne	r3, #1
 8003038:	2300      	moveq	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	f47f af6d 	bne.w	8002f1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003058:	e034      	b.n	80030c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f8e3 	bl	8003226 <I2C_IsAcknowledgeFailed>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e034      	b.n	80030d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003070:	d028      	beq.n	80030c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003072:	f7fe f9b3 	bl	80013dc <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	429a      	cmp	r2, r3
 8003080:	d302      	bcc.n	8003088 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d11d      	bne.n	80030c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003092:	2b80      	cmp	r3, #128	; 0x80
 8003094:	d016      	beq.n	80030c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2220      	movs	r2, #32
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	f043 0220 	orr.w	r2, r3, #32
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e007      	b.n	80030d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ce:	2b80      	cmp	r3, #128	; 0x80
 80030d0:	d1c3      	bne.n	800305a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030e8:	e034      	b.n	8003154 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 f89b 	bl	8003226 <I2C_IsAcknowledgeFailed>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e034      	b.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003100:	d028      	beq.n	8003154 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003102:	f7fe f96b 	bl	80013dc <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	429a      	cmp	r2, r3
 8003110:	d302      	bcc.n	8003118 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d11d      	bne.n	8003154 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b04      	cmp	r3, #4
 8003124:	d016      	beq.n	8003154 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	f043 0220 	orr.w	r2, r3, #32
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e007      	b.n	8003164 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0304 	and.w	r3, r3, #4
 800315e:	2b04      	cmp	r3, #4
 8003160:	d1c3      	bne.n	80030ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003178:	e049      	b.n	800320e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	2b10      	cmp	r3, #16
 8003186:	d119      	bne.n	80031bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0210 	mvn.w	r2, #16
 8003190:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e030      	b.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031bc:	f7fe f90e 	bl	80013dc <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	68ba      	ldr	r2, [r7, #8]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d302      	bcc.n	80031d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d11d      	bne.n	800320e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031dc:	2b40      	cmp	r3, #64	; 0x40
 80031de:	d016      	beq.n	800320e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	f043 0220 	orr.w	r2, r3, #32
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e007      	b.n	800321e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003218:	2b40      	cmp	r3, #64	; 0x40
 800321a:	d1ae      	bne.n	800317a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323c:	d11b      	bne.n	8003276 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003246:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003262:	f043 0204 	orr.w	r2, r3, #4
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	bc80      	pop	{r7}
 8003280:	4770      	bx	lr
	...

08003284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e272      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 8087 	beq.w	80033b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032a4:	4b92      	ldr	r3, [pc, #584]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d00c      	beq.n	80032ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032b0:	4b8f      	ldr	r3, [pc, #572]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 030c 	and.w	r3, r3, #12
 80032b8:	2b08      	cmp	r3, #8
 80032ba:	d112      	bne.n	80032e2 <HAL_RCC_OscConfig+0x5e>
 80032bc:	4b8c      	ldr	r3, [pc, #560]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c8:	d10b      	bne.n	80032e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ca:	4b89      	ldr	r3, [pc, #548]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d06c      	beq.n	80033b0 <HAL_RCC_OscConfig+0x12c>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d168      	bne.n	80033b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e24c      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ea:	d106      	bne.n	80032fa <HAL_RCC_OscConfig+0x76>
 80032ec:	4b80      	ldr	r3, [pc, #512]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a7f      	ldr	r2, [pc, #508]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80032f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	e02e      	b.n	8003358 <HAL_RCC_OscConfig+0xd4>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0x98>
 8003302:	4b7b      	ldr	r3, [pc, #492]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a7a      	ldr	r2, [pc, #488]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b78      	ldr	r3, [pc, #480]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a77      	ldr	r2, [pc, #476]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003314:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e01d      	b.n	8003358 <HAL_RCC_OscConfig+0xd4>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003324:	d10c      	bne.n	8003340 <HAL_RCC_OscConfig+0xbc>
 8003326:	4b72      	ldr	r3, [pc, #456]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a71      	ldr	r2, [pc, #452]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800332c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	4b6f      	ldr	r3, [pc, #444]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a6e      	ldr	r2, [pc, #440]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	e00b      	b.n	8003358 <HAL_RCC_OscConfig+0xd4>
 8003340:	4b6b      	ldr	r3, [pc, #428]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a6a      	ldr	r2, [pc, #424]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334a:	6013      	str	r3, [r2, #0]
 800334c:	4b68      	ldr	r3, [pc, #416]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a67      	ldr	r2, [pc, #412]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003356:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d013      	beq.n	8003388 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7fe f83c 	bl	80013dc <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003368:	f7fe f838 	bl	80013dc <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b64      	cmp	r3, #100	; 0x64
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e200      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337a:	4b5d      	ldr	r3, [pc, #372]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCC_OscConfig+0xe4>
 8003386:	e014      	b.n	80033b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7fe f828 	bl	80013dc <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003390:	f7fe f824 	bl	80013dc <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b64      	cmp	r3, #100	; 0x64
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e1ec      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033a2:	4b53      	ldr	r3, [pc, #332]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x10c>
 80033ae:	e000      	b.n	80033b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d063      	beq.n	8003486 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033be:	4b4c      	ldr	r3, [pc, #304]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00b      	beq.n	80033e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80033ca:	4b49      	ldr	r3, [pc, #292]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b08      	cmp	r3, #8
 80033d4:	d11c      	bne.n	8003410 <HAL_RCC_OscConfig+0x18c>
 80033d6:	4b46      	ldr	r3, [pc, #280]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d116      	bne.n	8003410 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e2:	4b43      	ldr	r3, [pc, #268]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <HAL_RCC_OscConfig+0x176>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e1c0      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fa:	4b3d      	ldr	r3, [pc, #244]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	4939      	ldr	r1, [pc, #228]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800340a:	4313      	orrs	r3, r2
 800340c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800340e:	e03a      	b.n	8003486 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d020      	beq.n	800345a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003418:	4b36      	ldr	r3, [pc, #216]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 800341a:	2201      	movs	r2, #1
 800341c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341e:	f7fd ffdd 	bl	80013dc <HAL_GetTick>
 8003422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003424:	e008      	b.n	8003438 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003426:	f7fd ffd9 	bl	80013dc <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	2b02      	cmp	r3, #2
 8003432:	d901      	bls.n	8003438 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e1a1      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003438:	4b2d      	ldr	r3, [pc, #180]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d0f0      	beq.n	8003426 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003444:	4b2a      	ldr	r3, [pc, #168]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	00db      	lsls	r3, r3, #3
 8003452:	4927      	ldr	r1, [pc, #156]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 8003454:	4313      	orrs	r3, r2
 8003456:	600b      	str	r3, [r1, #0]
 8003458:	e015      	b.n	8003486 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345a:	4b26      	ldr	r3, [pc, #152]	; (80034f4 <HAL_RCC_OscConfig+0x270>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7fd ffbc 	bl	80013dc <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003468:	f7fd ffb8 	bl	80013dc <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e180      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347a:	4b1d      	ldr	r3, [pc, #116]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d03a      	beq.n	8003508 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d019      	beq.n	80034ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800349a:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 800349c:	2201      	movs	r2, #1
 800349e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034a0:	f7fd ff9c 	bl	80013dc <HAL_GetTick>
 80034a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a6:	e008      	b.n	80034ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a8:	f7fd ff98 	bl	80013dc <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e160      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ba:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	f003 0302 	and.w	r3, r3, #2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0f0      	beq.n	80034a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80034c6:	2001      	movs	r0, #1
 80034c8:	f000 face 	bl	8003a68 <RCC_Delay>
 80034cc:	e01c      	b.n	8003508 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ce:	4b0a      	ldr	r3, [pc, #40]	; (80034f8 <HAL_RCC_OscConfig+0x274>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034d4:	f7fd ff82 	bl	80013dc <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034da:	e00f      	b.n	80034fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034dc:	f7fd ff7e 	bl	80013dc <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d908      	bls.n	80034fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e146      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
 80034ee:	bf00      	nop
 80034f0:	40021000 	.word	0x40021000
 80034f4:	42420000 	.word	0x42420000
 80034f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034fc:	4b92      	ldr	r3, [pc, #584]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1e9      	bne.n	80034dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0304 	and.w	r3, r3, #4
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80a6 	beq.w	8003662 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003516:	2300      	movs	r3, #0
 8003518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800351a:	4b8b      	ldr	r3, [pc, #556]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10d      	bne.n	8003542 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003526:	4b88      	ldr	r3, [pc, #544]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	4a87      	ldr	r2, [pc, #540]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003530:	61d3      	str	r3, [r2, #28]
 8003532:	4b85      	ldr	r3, [pc, #532]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800353e:	2301      	movs	r3, #1
 8003540:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003542:	4b82      	ldr	r3, [pc, #520]	; (800374c <HAL_RCC_OscConfig+0x4c8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354a:	2b00      	cmp	r3, #0
 800354c:	d118      	bne.n	8003580 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800354e:	4b7f      	ldr	r3, [pc, #508]	; (800374c <HAL_RCC_OscConfig+0x4c8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a7e      	ldr	r2, [pc, #504]	; (800374c <HAL_RCC_OscConfig+0x4c8>)
 8003554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800355a:	f7fd ff3f 	bl	80013dc <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003562:	f7fd ff3b 	bl	80013dc <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b64      	cmp	r3, #100	; 0x64
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e103      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003574:	4b75      	ldr	r3, [pc, #468]	; (800374c <HAL_RCC_OscConfig+0x4c8>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d106      	bne.n	8003596 <HAL_RCC_OscConfig+0x312>
 8003588:	4b6f      	ldr	r3, [pc, #444]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	4a6e      	ldr	r2, [pc, #440]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800358e:	f043 0301 	orr.w	r3, r3, #1
 8003592:	6213      	str	r3, [r2, #32]
 8003594:	e02d      	b.n	80035f2 <HAL_RCC_OscConfig+0x36e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10c      	bne.n	80035b8 <HAL_RCC_OscConfig+0x334>
 800359e:	4b6a      	ldr	r3, [pc, #424]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	4a69      	ldr	r2, [pc, #420]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	6213      	str	r3, [r2, #32]
 80035aa:	4b67      	ldr	r3, [pc, #412]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	4a66      	ldr	r2, [pc, #408]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035b0:	f023 0304 	bic.w	r3, r3, #4
 80035b4:	6213      	str	r3, [r2, #32]
 80035b6:	e01c      	b.n	80035f2 <HAL_RCC_OscConfig+0x36e>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	2b05      	cmp	r3, #5
 80035be:	d10c      	bne.n	80035da <HAL_RCC_OscConfig+0x356>
 80035c0:	4b61      	ldr	r3, [pc, #388]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	4a60      	ldr	r2, [pc, #384]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035c6:	f043 0304 	orr.w	r3, r3, #4
 80035ca:	6213      	str	r3, [r2, #32]
 80035cc:	4b5e      	ldr	r3, [pc, #376]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	4a5d      	ldr	r2, [pc, #372]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	6213      	str	r3, [r2, #32]
 80035d8:	e00b      	b.n	80035f2 <HAL_RCC_OscConfig+0x36e>
 80035da:	4b5b      	ldr	r3, [pc, #364]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	4a5a      	ldr	r2, [pc, #360]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	6213      	str	r3, [r2, #32]
 80035e6:	4b58      	ldr	r3, [pc, #352]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	4a57      	ldr	r2, [pc, #348]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	f023 0304 	bic.w	r3, r3, #4
 80035f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d015      	beq.n	8003626 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fa:	f7fd feef 	bl	80013dc <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003600:	e00a      	b.n	8003618 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fd feeb 	bl	80013dc <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e0b1      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003618:	4b4b      	ldr	r3, [pc, #300]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0ee      	beq.n	8003602 <HAL_RCC_OscConfig+0x37e>
 8003624:	e014      	b.n	8003650 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003626:	f7fd fed9 	bl	80013dc <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362c:	e00a      	b.n	8003644 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800362e:	f7fd fed5 	bl	80013dc <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f241 3288 	movw	r2, #5000	; 0x1388
 800363c:	4293      	cmp	r3, r2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e09b      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003644:	4b40      	ldr	r3, [pc, #256]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1ee      	bne.n	800362e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003650:	7dfb      	ldrb	r3, [r7, #23]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d105      	bne.n	8003662 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003656:	4b3c      	ldr	r3, [pc, #240]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	4a3b      	ldr	r2, [pc, #236]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800365c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003660:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8087 	beq.w	800377a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800366c:	4b36      	ldr	r3, [pc, #216]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	2b08      	cmp	r3, #8
 8003676:	d061      	beq.n	800373c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d146      	bne.n	800370e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003680:	4b33      	ldr	r3, [pc, #204]	; (8003750 <HAL_RCC_OscConfig+0x4cc>)
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003686:	f7fd fea9 	bl	80013dc <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368e:	f7fd fea5 	bl	80013dc <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e06d      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a0:	4b29      	ldr	r3, [pc, #164]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f0      	bne.n	800368e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036b4:	d108      	bne.n	80036c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036b6:	4b24      	ldr	r3, [pc, #144]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	4921      	ldr	r1, [pc, #132]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036c8:	4b1f      	ldr	r3, [pc, #124]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a19      	ldr	r1, [r3, #32]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	430b      	orrs	r3, r1
 80036da:	491b      	ldr	r1, [pc, #108]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e0:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <HAL_RCC_OscConfig+0x4cc>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e6:	f7fd fe79 	bl	80013dc <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036ec:	e008      	b.n	8003700 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ee:	f7fd fe75 	bl	80013dc <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e03d      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003700:	4b11      	ldr	r3, [pc, #68]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d0f0      	beq.n	80036ee <HAL_RCC_OscConfig+0x46a>
 800370c:	e035      	b.n	800377a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370e:	4b10      	ldr	r3, [pc, #64]	; (8003750 <HAL_RCC_OscConfig+0x4cc>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003714:	f7fd fe62 	bl	80013dc <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371c:	f7fd fe5e 	bl	80013dc <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e026      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800372e:	4b06      	ldr	r3, [pc, #24]	; (8003748 <HAL_RCC_OscConfig+0x4c4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x498>
 800373a:	e01e      	b.n	800377a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	2b01      	cmp	r3, #1
 8003742:	d107      	bne.n	8003754 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e019      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
 8003748:	40021000 	.word	0x40021000
 800374c:	40007000 	.word	0x40007000
 8003750:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003754:	4b0b      	ldr	r3, [pc, #44]	; (8003784 <HAL_RCC_OscConfig+0x500>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	429a      	cmp	r2, r3
 8003766:	d106      	bne.n	8003776 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003772:	429a      	cmp	r2, r3
 8003774:	d001      	beq.n	800377a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40021000 	.word	0x40021000

08003788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e0d0      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800379c:	4b6a      	ldr	r3, [pc, #424]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d910      	bls.n	80037cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037aa:	4b67      	ldr	r3, [pc, #412]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f023 0207 	bic.w	r2, r3, #7
 80037b2:	4965      	ldr	r1, [pc, #404]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b63      	ldr	r3, [pc, #396]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0b8      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d020      	beq.n	800381a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e4:	4b59      	ldr	r3, [pc, #356]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4a58      	ldr	r2, [pc, #352]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80037ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037fc:	4b53      	ldr	r3, [pc, #332]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	4a52      	ldr	r2, [pc, #328]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003802:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003806:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003808:	4b50      	ldr	r3, [pc, #320]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	494d      	ldr	r1, [pc, #308]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003816:	4313      	orrs	r3, r2
 8003818:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d040      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382e:	4b47      	ldr	r3, [pc, #284]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d115      	bne.n	8003866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e07f      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d107      	bne.n	8003856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003846:	4b41      	ldr	r3, [pc, #260]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e073      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003856:	4b3d      	ldr	r3, [pc, #244]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e06b      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003866:	4b39      	ldr	r3, [pc, #228]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f023 0203 	bic.w	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4936      	ldr	r1, [pc, #216]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003874:	4313      	orrs	r3, r2
 8003876:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003878:	f7fd fdb0 	bl	80013dc <HAL_GetTick>
 800387c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387e:	e00a      	b.n	8003896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003880:	f7fd fdac 	bl	80013dc <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f241 3288 	movw	r2, #5000	; 0x1388
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e053      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003896:	4b2d      	ldr	r3, [pc, #180]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 020c 	and.w	r2, r3, #12
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d1eb      	bne.n	8003880 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038a8:	4b27      	ldr	r3, [pc, #156]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d210      	bcs.n	80038d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b6:	4b24      	ldr	r3, [pc, #144]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 0207 	bic.w	r2, r3, #7
 80038be:	4922      	ldr	r1, [pc, #136]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b20      	ldr	r3, [pc, #128]	; (8003948 <HAL_RCC_ClockConfig+0x1c0>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e032      	b.n	800393e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e4:	4b19      	ldr	r3, [pc, #100]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4916      	ldr	r1, [pc, #88]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003902:	4b12      	ldr	r3, [pc, #72]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	490e      	ldr	r1, [pc, #56]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 8003912:	4313      	orrs	r3, r2
 8003914:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003916:	f000 f821 	bl	800395c <HAL_RCC_GetSysClockFreq>
 800391a:	4602      	mov	r2, r0
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCC_ClockConfig+0x1c4>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	490a      	ldr	r1, [pc, #40]	; (8003950 <HAL_RCC_ClockConfig+0x1c8>)
 8003928:	5ccb      	ldrb	r3, [r1, r3]
 800392a:	fa22 f303 	lsr.w	r3, r2, r3
 800392e:	4a09      	ldr	r2, [pc, #36]	; (8003954 <HAL_RCC_ClockConfig+0x1cc>)
 8003930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003932:	4b09      	ldr	r3, [pc, #36]	; (8003958 <HAL_RCC_ClockConfig+0x1d0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fd fd0e 	bl	8001358 <HAL_InitTick>

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40022000 	.word	0x40022000
 800394c:	40021000 	.word	0x40021000
 8003950:	080070c8 	.word	0x080070c8
 8003954:	20000000 	.word	0x20000000
 8003958:	20000004 	.word	0x20000004

0800395c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	2300      	movs	r3, #0
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	2300      	movs	r3, #0
 8003970:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003976:	4b1e      	ldr	r3, [pc, #120]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 030c 	and.w	r3, r3, #12
 8003982:	2b04      	cmp	r3, #4
 8003984:	d002      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x30>
 8003986:	2b08      	cmp	r3, #8
 8003988:	d003      	beq.n	8003992 <HAL_RCC_GetSysClockFreq+0x36>
 800398a:	e027      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800398c:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800398e:	613b      	str	r3, [r7, #16]
      break;
 8003990:	e027      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	0c9b      	lsrs	r3, r3, #18
 8003996:	f003 030f 	and.w	r3, r3, #15
 800399a:	4a17      	ldr	r2, [pc, #92]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800399c:	5cd3      	ldrb	r3, [r2, r3]
 800399e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d010      	beq.n	80039cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039aa:	4b11      	ldr	r3, [pc, #68]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	0c5b      	lsrs	r3, r3, #17
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	4a11      	ldr	r2, [pc, #68]	; (80039fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80039b6:	5cd3      	ldrb	r3, [r2, r3]
 80039b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a0d      	ldr	r2, [pc, #52]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80039be:	fb03 f202 	mul.w	r2, r3, r2
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	e004      	b.n	80039d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a0c      	ldr	r2, [pc, #48]	; (8003a00 <HAL_RCC_GetSysClockFreq+0xa4>)
 80039d0:	fb02 f303 	mul.w	r3, r2, r3
 80039d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	613b      	str	r3, [r7, #16]
      break;
 80039da:	e002      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80039de:	613b      	str	r3, [r7, #16]
      break;
 80039e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e2:	693b      	ldr	r3, [r7, #16]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	371c      	adds	r7, #28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000
 80039f4:	007a1200 	.word	0x007a1200
 80039f8:	080070e0 	.word	0x080070e0
 80039fc:	080070f0 	.word	0x080070f0
 8003a00:	003d0900 	.word	0x003d0900

08003a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a08:	4b02      	ldr	r3, [pc, #8]	; (8003a14 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr
 8003a14:	20000000 	.word	0x20000000

08003a18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a1c:	f7ff fff2 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	0a1b      	lsrs	r3, r3, #8
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	4903      	ldr	r1, [pc, #12]	; (8003a3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2e:	5ccb      	ldrb	r3, [r1, r3]
 8003a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	080070d8 	.word	0x080070d8

08003a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a44:	f7ff ffde 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	4b05      	ldr	r3, [pc, #20]	; (8003a60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	0adb      	lsrs	r3, r3, #11
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	4903      	ldr	r1, [pc, #12]	; (8003a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a56:	5ccb      	ldrb	r3, [r1, r3]
 8003a58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000
 8003a64:	080070d8 	.word	0x080070d8

08003a68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a70:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <RCC_Delay+0x34>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a0a      	ldr	r2, [pc, #40]	; (8003aa0 <RCC_Delay+0x38>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	0a5b      	lsrs	r3, r3, #9
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a84:	bf00      	nop
  }
  while (Delay --);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1e5a      	subs	r2, r3, #1
 8003a8a:	60fa      	str	r2, [r7, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1f9      	bne.n	8003a84 <RCC_Delay+0x1c>
}
 8003a90:	bf00      	nop
 8003a92:	bf00      	nop
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bc80      	pop	{r7}
 8003a9a:	4770      	bx	lr
 8003a9c:	20000000 	.word	0x20000000
 8003aa0:	10624dd3 	.word	0x10624dd3

08003aa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	613b      	str	r3, [r7, #16]
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d07d      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ac4:	4b4f      	ldr	r3, [pc, #316]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10d      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ad0:	4b4c      	ldr	r3, [pc, #304]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad2:	69db      	ldr	r3, [r3, #28]
 8003ad4:	4a4b      	ldr	r2, [pc, #300]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ada:	61d3      	str	r3, [r2, #28]
 8003adc:	4b49      	ldr	r3, [pc, #292]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae4:	60bb      	str	r3, [r7, #8]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aec:	4b46      	ldr	r3, [pc, #280]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d118      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003af8:	4b43      	ldr	r3, [pc, #268]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a42      	ldr	r2, [pc, #264]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003afe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b04:	f7fd fc6a 	bl	80013dc <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b0a:	e008      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b0c:	f7fd fc66 	bl	80013dc <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b64      	cmp	r3, #100	; 0x64
 8003b18:	d901      	bls.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e06d      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b1e:	4b3a      	ldr	r3, [pc, #232]	; (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b2a:	4b36      	ldr	r3, [pc, #216]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b32:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d02e      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d027      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b48:	4b2e      	ldr	r3, [pc, #184]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b52:	4b2e      	ldr	r3, [pc, #184]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b58:	4b2c      	ldr	r3, [pc, #176]	; (8003c0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003b5e:	4a29      	ldr	r2, [pc, #164]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d014      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6e:	f7fd fc35 	bl	80013dc <HAL_GetTick>
 8003b72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b74:	e00a      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b76:	f7fd fc31 	bl	80013dc <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e036      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8c:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0ee      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b98:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	4917      	ldr	r1, [pc, #92]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d105      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb0:	4b14      	ldr	r3, [pc, #80]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	4a13      	ldr	r2, [pc, #76]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bc8:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	490b      	ldr	r1, [pc, #44]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d008      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003be6:	4b07      	ldr	r3, [pc, #28]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	4904      	ldr	r1, [pc, #16]	; (8003c04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40021000 	.word	0x40021000
 8003c08:	40007000 	.word	0x40007000
 8003c0c:	42420440 	.word	0x42420440

08003c10 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e041      	b.n	8003ca6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d106      	bne.n	8003c3c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7fd f910 	bl	8000e5c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	f000 f88a 	bl	8003d68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d101      	bne.n	8003cce <HAL_TIM_OC_ConfigChannel+0x1e>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e048      	b.n	8003d60 <HAL_TIM_OC_ConfigChannel+0xb0>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b0c      	cmp	r3, #12
 8003cda:	d839      	bhi.n	8003d50 <HAL_TIM_OC_ConfigChannel+0xa0>
 8003cdc:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003d19 	.word	0x08003d19
 8003ce8:	08003d51 	.word	0x08003d51
 8003cec:	08003d51 	.word	0x08003d51
 8003cf0:	08003d51 	.word	0x08003d51
 8003cf4:	08003d27 	.word	0x08003d27
 8003cf8:	08003d51 	.word	0x08003d51
 8003cfc:	08003d51 	.word	0x08003d51
 8003d00:	08003d51 	.word	0x08003d51
 8003d04:	08003d35 	.word	0x08003d35
 8003d08:	08003d51 	.word	0x08003d51
 8003d0c:	08003d51 	.word	0x08003d51
 8003d10:	08003d51 	.word	0x08003d51
 8003d14:	08003d43 	.word	0x08003d43
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 f884 	bl	8003e2c <TIM_OC1_SetConfig>
      break;
 8003d24:	e017      	b.n	8003d56 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 f8e3 	bl	8003ef8 <TIM_OC2_SetConfig>
      break;
 8003d32:	e010      	b.n	8003d56 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68b9      	ldr	r1, [r7, #8]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f946 	bl	8003fcc <TIM_OC3_SetConfig>
      break;
 8003d40:	e009      	b.n	8003d56 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68b9      	ldr	r1, [r7, #8]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 f9a9 	bl	80040a0 <TIM_OC4_SetConfig>
      break;
 8003d4e:	e002      	b.n	8003d56 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	75fb      	strb	r3, [r7, #23]
      break;
 8003d54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a29      	ldr	r2, [pc, #164]	; (8003e20 <TIM_Base_SetConfig+0xb8>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00b      	beq.n	8003d98 <TIM_Base_SetConfig+0x30>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d86:	d007      	beq.n	8003d98 <TIM_Base_SetConfig+0x30>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a26      	ldr	r2, [pc, #152]	; (8003e24 <TIM_Base_SetConfig+0xbc>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d003      	beq.n	8003d98 <TIM_Base_SetConfig+0x30>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a25      	ldr	r2, [pc, #148]	; (8003e28 <TIM_Base_SetConfig+0xc0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d108      	bne.n	8003daa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1c      	ldr	r2, [pc, #112]	; (8003e20 <TIM_Base_SetConfig+0xb8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00b      	beq.n	8003dca <TIM_Base_SetConfig+0x62>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db8:	d007      	beq.n	8003dca <TIM_Base_SetConfig+0x62>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a19      	ldr	r2, [pc, #100]	; (8003e24 <TIM_Base_SetConfig+0xbc>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d003      	beq.n	8003dca <TIM_Base_SetConfig+0x62>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a18      	ldr	r2, [pc, #96]	; (8003e28 <TIM_Base_SetConfig+0xc0>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d108      	bne.n	8003ddc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a07      	ldr	r2, [pc, #28]	; (8003e20 <TIM_Base_SetConfig+0xb8>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d103      	bne.n	8003e10 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	615a      	str	r2, [r3, #20]
}
 8003e16:	bf00      	nop
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr
 8003e20:	40012c00 	.word	0x40012c00
 8003e24:	40000400 	.word	0x40000400
 8003e28:	40000800 	.word	0x40000800

08003e2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	f023 0201 	bic.w	r2, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0303 	bic.w	r3, r3, #3
 8003e62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f023 0302 	bic.w	r3, r3, #2
 8003e74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a1c      	ldr	r2, [pc, #112]	; (8003ef4 <TIM_OC1_SetConfig+0xc8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d10c      	bne.n	8003ea2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f023 0308 	bic.w	r3, r3, #8
 8003e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f023 0304 	bic.w	r3, r3, #4
 8003ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a13      	ldr	r2, [pc, #76]	; (8003ef4 <TIM_OC1_SetConfig+0xc8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d111      	bne.n	8003ece <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	621a      	str	r2, [r3, #32]
}
 8003ee8:	bf00      	nop
 8003eea:	371c      	adds	r7, #28
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bc80      	pop	{r7}
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40012c00 	.word	0x40012c00

08003ef8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b087      	sub	sp, #28
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	f023 0210 	bic.w	r2, r3, #16
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	021b      	lsls	r3, r3, #8
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f023 0320 	bic.w	r3, r3, #32
 8003f42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	011b      	lsls	r3, r3, #4
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a1d      	ldr	r2, [pc, #116]	; (8003fc8 <TIM_OC2_SetConfig+0xd0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d10d      	bne.n	8003f74 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	4a14      	ldr	r2, [pc, #80]	; (8003fc8 <TIM_OC2_SetConfig+0xd0>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d113      	bne.n	8003fa4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	685a      	ldr	r2, [r3, #4]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	697a      	ldr	r2, [r7, #20]
 8003fbc:	621a      	str	r2, [r3, #32]
}
 8003fbe:	bf00      	nop
 8003fc0:	371c      	adds	r7, #28
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr
 8003fc8:	40012c00 	.word	0x40012c00

08003fcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f023 0303 	bic.w	r3, r3, #3
 8004002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	4313      	orrs	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	4313      	orrs	r3, r2
 8004020:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a1d      	ldr	r2, [pc, #116]	; (800409c <TIM_OC3_SetConfig+0xd0>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d10d      	bne.n	8004046 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004030:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	021b      	lsls	r3, r3, #8
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a14      	ldr	r2, [pc, #80]	; (800409c <TIM_OC3_SetConfig+0xd0>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d113      	bne.n	8004076 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800405c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	621a      	str	r2, [r3, #32]
}
 8004090:	bf00      	nop
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	bc80      	pop	{r7}
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40012c00 	.word	0x40012c00

080040a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	021b      	lsls	r3, r3, #8
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	031b      	lsls	r3, r3, #12
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a0f      	ldr	r2, [pc, #60]	; (8004138 <TIM_OC4_SetConfig+0x98>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d109      	bne.n	8004114 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004106:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	019b      	lsls	r3, r3, #6
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	4313      	orrs	r3, r2
 8004112:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	621a      	str	r2, [r3, #32]
}
 800412e:	bf00      	nop
 8004130:	371c      	adds	r7, #28
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr
 8004138:	40012c00 	.word	0x40012c00

0800413c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004150:	2302      	movs	r3, #2
 8004152:	e046      	b.n	80041e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a16      	ldr	r2, [pc, #88]	; (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00e      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a0:	d009      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a12      	ldr	r2, [pc, #72]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d004      	beq.n	80041b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a10      	ldr	r2, [pc, #64]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d10c      	bne.n	80041d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	68ba      	ldr	r2, [r7, #8]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr
 80041ec:	40012c00 	.word	0x40012c00
 80041f0:	40000400 	.word	0x40000400
 80041f4:	40000800 	.word	0x40000800

080041f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004210:	2302      	movs	r3, #2
 8004212:	e03d      	b.n	8004290 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4313      	orrs	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4313      	orrs	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	bc80      	pop	{r7}
 8004298:	4770      	bx	lr

0800429a <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e04a      	b.n	8004342 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d106      	bne.n	80042c6 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7fc fec3 	bl	800104c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2224      	movs	r2, #36	; 0x24
 80042ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 f834 	bl	800434c <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691a      	ldr	r2, [r3, #16]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695a      	ldr	r2, [r3, #20]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8004302:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695a      	ldr	r2, [r3, #20]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0208 	orr.w	r2, r2, #8
 8004312:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004322:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2220      	movs	r2, #32
 8004336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
	...

0800434c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	430a      	orrs	r2, r1
 8004368:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	4313      	orrs	r3, r2
 800437a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004386:	f023 030c 	bic.w	r3, r3, #12
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	68b9      	ldr	r1, [r7, #8]
 8004390:	430b      	orrs	r3, r1
 8004392:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a2c      	ldr	r2, [pc, #176]	; (8004460 <UART_SetConfig+0x114>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d103      	bne.n	80043bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80043b4:	f7ff fb44 	bl	8003a40 <HAL_RCC_GetPCLK2Freq>
 80043b8:	60f8      	str	r0, [r7, #12]
 80043ba:	e002      	b.n	80043c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80043bc:	f7ff fb2c 	bl	8003a18 <HAL_RCC_GetPCLK1Freq>
 80043c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	4613      	mov	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	009a      	lsls	r2, r3, #2
 80043cc:	441a      	add	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d8:	4a22      	ldr	r2, [pc, #136]	; (8004464 <UART_SetConfig+0x118>)
 80043da:	fba2 2303 	umull	r2, r3, r2, r3
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	0119      	lsls	r1, r3, #4
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	009a      	lsls	r2, r3, #2
 80043ec:	441a      	add	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80043f8:	4b1a      	ldr	r3, [pc, #104]	; (8004464 <UART_SetConfig+0x118>)
 80043fa:	fba3 0302 	umull	r0, r3, r3, r2
 80043fe:	095b      	lsrs	r3, r3, #5
 8004400:	2064      	movs	r0, #100	; 0x64
 8004402:	fb00 f303 	mul.w	r3, r0, r3
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	3332      	adds	r3, #50	; 0x32
 800440c:	4a15      	ldr	r2, [pc, #84]	; (8004464 <UART_SetConfig+0x118>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004418:	4419      	add	r1, r3
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	4613      	mov	r3, r2
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	009a      	lsls	r2, r3, #2
 8004424:	441a      	add	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004430:	4b0c      	ldr	r3, [pc, #48]	; (8004464 <UART_SetConfig+0x118>)
 8004432:	fba3 0302 	umull	r0, r3, r3, r2
 8004436:	095b      	lsrs	r3, r3, #5
 8004438:	2064      	movs	r0, #100	; 0x64
 800443a:	fb00 f303 	mul.w	r3, r0, r3
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	011b      	lsls	r3, r3, #4
 8004442:	3332      	adds	r3, #50	; 0x32
 8004444:	4a07      	ldr	r2, [pc, #28]	; (8004464 <UART_SetConfig+0x118>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	095b      	lsrs	r3, r3, #5
 800444c:	f003 020f 	and.w	r2, r3, #15
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	440a      	add	r2, r1
 8004456:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004458:	bf00      	nop
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40013800 	.word	0x40013800
 8004464:	51eb851f 	.word	0x51eb851f

08004468 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800446e:	f3ef 8305 	mrs	r3, IPSR
 8004472:	60bb      	str	r3, [r7, #8]
  return(result);
 8004474:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10f      	bne.n	800449a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800447a:	f3ef 8310 	mrs	r3, PRIMASK
 800447e:	607b      	str	r3, [r7, #4]
  return(result);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d109      	bne.n	800449a <osKernelInitialize+0x32>
 8004486:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <osKernelInitialize+0x60>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b02      	cmp	r3, #2
 800448c:	d109      	bne.n	80044a2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800448e:	f3ef 8311 	mrs	r3, BASEPRI
 8004492:	603b      	str	r3, [r7, #0]
  return(result);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800449a:	f06f 0305 	mvn.w	r3, #5
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	e00c      	b.n	80044bc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80044a2:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <osKernelInitialize+0x60>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d105      	bne.n	80044b6 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80044aa:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <osKernelInitialize+0x60>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	e002      	b.n	80044bc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80044b6:	f04f 33ff 	mov.w	r3, #4294967295
 80044ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80044bc:	68fb      	ldr	r3, [r7, #12]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bc80      	pop	{r7}
 80044c6:	4770      	bx	lr
 80044c8:	200003d0 	.word	0x200003d0

080044cc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044d2:	f3ef 8305 	mrs	r3, IPSR
 80044d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80044d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10f      	bne.n	80044fe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044de:	f3ef 8310 	mrs	r3, PRIMASK
 80044e2:	607b      	str	r3, [r7, #4]
  return(result);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d109      	bne.n	80044fe <osKernelStart+0x32>
 80044ea:	4b11      	ldr	r3, [pc, #68]	; (8004530 <osKernelStart+0x64>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d109      	bne.n	8004506 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80044f2:	f3ef 8311 	mrs	r3, BASEPRI
 80044f6:	603b      	str	r3, [r7, #0]
  return(result);
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <osKernelStart+0x3a>
    stat = osErrorISR;
 80044fe:	f06f 0305 	mvn.w	r3, #5
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	e00e      	b.n	8004524 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004506:	4b0a      	ldr	r3, [pc, #40]	; (8004530 <osKernelStart+0x64>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d107      	bne.n	800451e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800450e:	4b08      	ldr	r3, [pc, #32]	; (8004530 <osKernelStart+0x64>)
 8004510:	2202      	movs	r2, #2
 8004512:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004514:	f001 f890 	bl	8005638 <vTaskStartScheduler>
      stat = osOK;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	e002      	b.n	8004524 <osKernelStart+0x58>
    } else {
      stat = osError;
 800451e:	f04f 33ff 	mov.w	r3, #4294967295
 8004522:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004524:	68fb      	ldr	r3, [r7, #12]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	200003d0 	.word	0x200003d0

08004534 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004534:	b580      	push	{r7, lr}
 8004536:	b092      	sub	sp, #72	; 0x48
 8004538:	af04      	add	r7, sp, #16
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004544:	f3ef 8305 	mrs	r3, IPSR
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800454c:	2b00      	cmp	r3, #0
 800454e:	f040 8094 	bne.w	800467a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004552:	f3ef 8310 	mrs	r3, PRIMASK
 8004556:	623b      	str	r3, [r7, #32]
  return(result);
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	2b00      	cmp	r3, #0
 800455c:	f040 808d 	bne.w	800467a <osThreadNew+0x146>
 8004560:	4b48      	ldr	r3, [pc, #288]	; (8004684 <osThreadNew+0x150>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b02      	cmp	r3, #2
 8004566:	d106      	bne.n	8004576 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004568:	f3ef 8311 	mrs	r3, BASEPRI
 800456c:	61fb      	str	r3, [r7, #28]
  return(result);
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	2b00      	cmp	r3, #0
 8004572:	f040 8082 	bne.w	800467a <osThreadNew+0x146>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d07e      	beq.n	800467a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800457c:	2380      	movs	r3, #128	; 0x80
 800457e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8004580:	2318      	movs	r3, #24
 8004582:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8004584:	2300      	movs	r3, #0
 8004586:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8004588:	f107 031b 	add.w	r3, r7, #27
 800458c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800458e:	f04f 33ff 	mov.w	r3, #4294967295
 8004592:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d045      	beq.n	8004626 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <osThreadNew+0x74>
        name = attr->name;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80045b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <osThreadNew+0x9a>
 80045bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045be:	2b38      	cmp	r3, #56	; 0x38
 80045c0:	d805      	bhi.n	80045ce <osThreadNew+0x9a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <osThreadNew+0x9e>
        return (NULL);
 80045ce:	2300      	movs	r3, #0
 80045d0:	e054      	b.n	800467c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d003      	beq.n	80045e2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	089b      	lsrs	r3, r3, #2
 80045e0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00e      	beq.n	8004608 <osThreadNew+0xd4>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	2bbb      	cmp	r3, #187	; 0xbb
 80045f0:	d90a      	bls.n	8004608 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d006      	beq.n	8004608 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <osThreadNew+0xd4>
        mem = 1;
 8004602:	2301      	movs	r3, #1
 8004604:	62bb      	str	r3, [r7, #40]	; 0x28
 8004606:	e010      	b.n	800462a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10c      	bne.n	800462a <osThreadNew+0xf6>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d108      	bne.n	800462a <osThreadNew+0xf6>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d104      	bne.n	800462a <osThreadNew+0xf6>
          mem = 0;
 8004620:	2300      	movs	r3, #0
 8004622:	62bb      	str	r3, [r7, #40]	; 0x28
 8004624:	e001      	b.n	800462a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004626:	2300      	movs	r3, #0
 8004628:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800462a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462c:	2b01      	cmp	r3, #1
 800462e:	d110      	bne.n	8004652 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004638:	9202      	str	r2, [sp, #8]
 800463a:	9301      	str	r3, [sp, #4]
 800463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004644:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 fe12 	bl	8005270 <xTaskCreateStatic>
 800464c:	4603      	mov	r3, r0
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	e013      	b.n	800467a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8004652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004654:	2b00      	cmp	r3, #0
 8004656:	d110      	bne.n	800467a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465a:	b29a      	uxth	r2, r3
 800465c:	f107 0314 	add.w	r3, r7, #20
 8004660:	9301      	str	r3, [sp, #4]
 8004662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 fe5c 	bl	8005328 <xTaskCreate>
 8004670:	4603      	mov	r3, r0
 8004672:	2b01      	cmp	r3, #1
 8004674:	d001      	beq.n	800467a <osThreadNew+0x146>
          hTask = NULL;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800467a:	697b      	ldr	r3, [r7, #20]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3738      	adds	r7, #56	; 0x38
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	200003d0 	.word	0x200003d0

08004688 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004690:	f3ef 8305 	mrs	r3, IPSR
 8004694:	613b      	str	r3, [r7, #16]
  return(result);
 8004696:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10f      	bne.n	80046bc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800469c:	f3ef 8310 	mrs	r3, PRIMASK
 80046a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d109      	bne.n	80046bc <osDelay+0x34>
 80046a8:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <osDelay+0x58>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d109      	bne.n	80046c4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80046b0:	f3ef 8311 	mrs	r3, BASEPRI
 80046b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <osDelay+0x3c>
    stat = osErrorISR;
 80046bc:	f06f 0305 	mvn.w	r3, #5
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	e007      	b.n	80046d4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 ff7e 	bl	80055d0 <vTaskDelay>
    }
  }

  return (stat);
 80046d4:	697b      	ldr	r3, [r7, #20]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	200003d0 	.word	0x200003d0

080046e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	4a06      	ldr	r2, [pc, #24]	; (800470c <vApplicationGetIdleTaskMemory+0x28>)
 80046f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	4a05      	ldr	r2, [pc, #20]	; (8004710 <vApplicationGetIdleTaskMemory+0x2c>)
 80046fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2280      	movs	r2, #128	; 0x80
 8004700:	601a      	str	r2, [r3, #0]
}
 8004702:	bf00      	nop
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	bc80      	pop	{r7}
 800470a:	4770      	bx	lr
 800470c:	200003d4 	.word	0x200003d4
 8004710:	20000490 	.word	0x20000490

08004714 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	4a07      	ldr	r2, [pc, #28]	; (8004740 <vApplicationGetTimerTaskMemory+0x2c>)
 8004724:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	4a06      	ldr	r2, [pc, #24]	; (8004744 <vApplicationGetTimerTaskMemory+0x30>)
 800472a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004732:	601a      	str	r2, [r3, #0]
}
 8004734:	bf00      	nop
 8004736:	3714      	adds	r7, #20
 8004738:	46bd      	mov	sp, r7
 800473a:	bc80      	pop	{r7}
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	20000690 	.word	0x20000690
 8004744:	2000074c 	.word	0x2000074c

08004748 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f103 0208 	add.w	r2, r3, #8
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f04f 32ff 	mov.w	r2, #4294967295
 8004760:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f103 0208 	add.w	r2, r3, #8
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f103 0208 	add.w	r2, r3, #8
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	bc80      	pop	{r7}
 8004784:	4770      	bx	lr

08004786 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	bc80      	pop	{r7}
 800479c:	4770      	bx	lr

0800479e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800479e:	b480      	push	{r7}
 80047a0:	b085      	sub	sp, #20
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	683a      	ldr	r2, [r7, #0]
 80047c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	1c5a      	adds	r2, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	601a      	str	r2, [r3, #0]
}
 80047da:	bf00      	nop
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr

080047e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fa:	d103      	bne.n	8004804 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	e00c      	b.n	800481e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3308      	adds	r3, #8
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	e002      	b.n	8004812 <vListInsert+0x2e>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	60fb      	str	r3, [r7, #12]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68ba      	ldr	r2, [r7, #8]
 800481a:	429a      	cmp	r2, r3
 800481c:	d2f6      	bcs.n	800480c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	683a      	ldr	r2, [r7, #0]
 8004838:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	601a      	str	r2, [r3, #0]
}
 800484a:	bf00      	nop
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr

08004854 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6892      	ldr	r2, [r2, #8]
 800486a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6852      	ldr	r2, [r2, #4]
 8004874:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	429a      	cmp	r2, r3
 800487e:	d103      	bne.n	8004888 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	1e5a      	subs	r2, r3, #1
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
}
 800489c:	4618      	mov	r0, r3
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bc80      	pop	{r7}
 80048a4:	4770      	bx	lr
	...

080048a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10a      	bne.n	80048d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c0:	f383 8811 	msr	BASEPRI, r3
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048ce:	bf00      	nop
 80048d0:	e7fe      	b.n	80048d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80048d2:	f001 fff3 	bl	80068bc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048de:	68f9      	ldr	r1, [r7, #12]
 80048e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048e2:	fb01 f303 	mul.w	r3, r1, r3
 80048e6:	441a      	add	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004902:	3b01      	subs	r3, #1
 8004904:	68f9      	ldr	r1, [r7, #12]
 8004906:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004908:	fb01 f303 	mul.w	r3, r1, r3
 800490c:	441a      	add	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	22ff      	movs	r2, #255	; 0xff
 8004916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	22ff      	movs	r2, #255	; 0xff
 800491e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d114      	bne.n	8004952 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01a      	beq.n	8004966 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	3310      	adds	r3, #16
 8004934:	4618      	mov	r0, r3
 8004936:	f001 f91b 	bl	8005b70 <xTaskRemoveFromEventList>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d012      	beq.n	8004966 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004940:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <xQueueGenericReset+0xcc>)
 8004942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	e009      	b.n	8004966 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	3310      	adds	r3, #16
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff fef6 	bl	8004748 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	3324      	adds	r3, #36	; 0x24
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff fef1 	bl	8004748 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004966:	f001 ffd9 	bl	800691c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800496a:	2301      	movs	r3, #1
}
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	e000ed04 	.word	0xe000ed04

08004978 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004978:	b580      	push	{r7, lr}
 800497a:	b08e      	sub	sp, #56	; 0x38
 800497c:	af02      	add	r7, sp, #8
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10a      	bne.n	80049a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10a      	bne.n	80049be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80049ba:	bf00      	nop
 80049bc:	e7fe      	b.n	80049bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d002      	beq.n	80049ca <xQueueGenericCreateStatic+0x52>
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <xQueueGenericCreateStatic+0x56>
 80049ca:	2301      	movs	r3, #1
 80049cc:	e000      	b.n	80049d0 <xQueueGenericCreateStatic+0x58>
 80049ce:	2300      	movs	r3, #0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10a      	bne.n	80049ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	623b      	str	r3, [r7, #32]
}
 80049e6:	bf00      	nop
 80049e8:	e7fe      	b.n	80049e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d102      	bne.n	80049f6 <xQueueGenericCreateStatic+0x7e>
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <xQueueGenericCreateStatic+0x82>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <xQueueGenericCreateStatic+0x84>
 80049fa:	2300      	movs	r3, #0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10a      	bne.n	8004a16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	61fb      	str	r3, [r7, #28]
}
 8004a12:	bf00      	nop
 8004a14:	e7fe      	b.n	8004a14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a16:	2350      	movs	r3, #80	; 0x50
 8004a18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b50      	cmp	r3, #80	; 0x50
 8004a1e:	d00a      	beq.n	8004a36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	61bb      	str	r3, [r7, #24]
}
 8004a32:	bf00      	nop
 8004a34:	e7fe      	b.n	8004a34 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00d      	beq.n	8004a5c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a48:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4e:	9300      	str	r3, [sp, #0]
 8004a50:	4613      	mov	r3, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	68b9      	ldr	r1, [r7, #8]
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 f805 	bl	8004a66 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3730      	adds	r7, #48	; 0x30
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b084      	sub	sp, #16
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	60f8      	str	r0, [r7, #12]
 8004a6e:	60b9      	str	r1, [r7, #8]
 8004a70:	607a      	str	r2, [r7, #4]
 8004a72:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d103      	bne.n	8004a82 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	e002      	b.n	8004a88 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a94:	2101      	movs	r1, #1
 8004a96:	69b8      	ldr	r0, [r7, #24]
 8004a98:	f7ff ff06 	bl	80048a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	78fa      	ldrb	r2, [r7, #3]
 8004aa0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004aa4:	bf00      	nop
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08e      	sub	sp, #56	; 0x38
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004aba:	2300      	movs	r3, #0
 8004abc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d10a      	bne.n	8004ade <xQueueGenericSend+0x32>
	__asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004ada:	bf00      	nop
 8004adc:	e7fe      	b.n	8004adc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d103      	bne.n	8004aec <xQueueGenericSend+0x40>
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d101      	bne.n	8004af0 <xQueueGenericSend+0x44>
 8004aec:	2301      	movs	r3, #1
 8004aee:	e000      	b.n	8004af2 <xQueueGenericSend+0x46>
 8004af0:	2300      	movs	r3, #0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10a      	bne.n	8004b0c <xQueueGenericSend+0x60>
	__asm volatile
 8004af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afa:	f383 8811 	msr	BASEPRI, r3
 8004afe:	f3bf 8f6f 	isb	sy
 8004b02:	f3bf 8f4f 	dsb	sy
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b08:	bf00      	nop
 8004b0a:	e7fe      	b.n	8004b0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d103      	bne.n	8004b1a <xQueueGenericSend+0x6e>
 8004b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <xQueueGenericSend+0x72>
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e000      	b.n	8004b20 <xQueueGenericSend+0x74>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10a      	bne.n	8004b3a <xQueueGenericSend+0x8e>
	__asm volatile
 8004b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	623b      	str	r3, [r7, #32]
}
 8004b36:	bf00      	nop
 8004b38:	e7fe      	b.n	8004b38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b3a:	f001 f9df 	bl	8005efc <xTaskGetSchedulerState>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d102      	bne.n	8004b4a <xQueueGenericSend+0x9e>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <xQueueGenericSend+0xa2>
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e000      	b.n	8004b50 <xQueueGenericSend+0xa4>
 8004b4e:	2300      	movs	r3, #0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10a      	bne.n	8004b6a <xQueueGenericSend+0xbe>
	__asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	61fb      	str	r3, [r7, #28]
}
 8004b66:	bf00      	nop
 8004b68:	e7fe      	b.n	8004b68 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b6a:	f001 fea7 	bl	80068bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d302      	bcc.n	8004b80 <xQueueGenericSend+0xd4>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d129      	bne.n	8004bd4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	68b9      	ldr	r1, [r7, #8]
 8004b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b86:	f000 fa07 	bl	8004f98 <prvCopyDataToQueue>
 8004b8a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d010      	beq.n	8004bb6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b96:	3324      	adds	r3, #36	; 0x24
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 ffe9 	bl	8005b70 <xTaskRemoveFromEventList>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d013      	beq.n	8004bcc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ba4:	4b3f      	ldr	r3, [pc, #252]	; (8004ca4 <xQueueGenericSend+0x1f8>)
 8004ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	e00a      	b.n	8004bcc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d007      	beq.n	8004bcc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004bbc:	4b39      	ldr	r3, [pc, #228]	; (8004ca4 <xQueueGenericSend+0x1f8>)
 8004bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bc2:	601a      	str	r2, [r3, #0]
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bcc:	f001 fea6 	bl	800691c <vPortExitCritical>
				return pdPASS;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e063      	b.n	8004c9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d103      	bne.n	8004be2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bda:	f001 fe9f 	bl	800691c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004bde:	2300      	movs	r3, #0
 8004be0:	e05c      	b.n	8004c9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d106      	bne.n	8004bf6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004be8:	f107 0314 	add.w	r3, r7, #20
 8004bec:	4618      	mov	r0, r3
 8004bee:	f001 f823 	bl	8005c38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bf6:	f001 fe91 	bl	800691c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bfa:	f000 fd8d 	bl	8005718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bfe:	f001 fe5d 	bl	80068bc <vPortEnterCritical>
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c08:	b25b      	sxtb	r3, r3
 8004c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0e:	d103      	bne.n	8004c18 <xQueueGenericSend+0x16c>
 8004c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c1e:	b25b      	sxtb	r3, r3
 8004c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c24:	d103      	bne.n	8004c2e <xQueueGenericSend+0x182>
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c2e:	f001 fe75 	bl	800691c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c32:	1d3a      	adds	r2, r7, #4
 8004c34:	f107 0314 	add.w	r3, r7, #20
 8004c38:	4611      	mov	r1, r2
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f001 f812 	bl	8005c64 <xTaskCheckForTimeOut>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d124      	bne.n	8004c90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c48:	f000 fa9e 	bl	8005188 <prvIsQueueFull>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d018      	beq.n	8004c84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c54:	3310      	adds	r3, #16
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	4611      	mov	r1, r2
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 ff38 	bl	8005ad0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c62:	f000 fa29 	bl	80050b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c66:	f000 fd65 	bl	8005734 <xTaskResumeAll>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f47f af7c 	bne.w	8004b6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004c72:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <xQueueGenericSend+0x1f8>)
 8004c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	e772      	b.n	8004b6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c86:	f000 fa17 	bl	80050b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c8a:	f000 fd53 	bl	8005734 <xTaskResumeAll>
 8004c8e:	e76c      	b.n	8004b6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c92:	f000 fa11 	bl	80050b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c96:	f000 fd4d 	bl	8005734 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c9a:	2300      	movs	r3, #0
		}
	}
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3738      	adds	r7, #56	; 0x38
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	e000ed04 	.word	0xe000ed04

08004ca8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b08e      	sub	sp, #56	; 0x38
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10a      	bne.n	8004cd6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d103      	bne.n	8004ce4 <xQueueGenericSendFromISR+0x3c>
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <xQueueGenericSendFromISR+0x40>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e000      	b.n	8004cea <xQueueGenericSendFromISR+0x42>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10a      	bne.n	8004d04 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	623b      	str	r3, [r7, #32]
}
 8004d00:	bf00      	nop
 8004d02:	e7fe      	b.n	8004d02 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d103      	bne.n	8004d12 <xQueueGenericSendFromISR+0x6a>
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <xQueueGenericSendFromISR+0x6e>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e000      	b.n	8004d18 <xQueueGenericSendFromISR+0x70>
 8004d16:	2300      	movs	r3, #0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10a      	bne.n	8004d32 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d20:	f383 8811 	msr	BASEPRI, r3
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	61fb      	str	r3, [r7, #28]
}
 8004d2e:	bf00      	nop
 8004d30:	e7fe      	b.n	8004d30 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d32:	f001 fe85 	bl	8006a40 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d36:	f3ef 8211 	mrs	r2, BASEPRI
 8004d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3e:	f383 8811 	msr	BASEPRI, r3
 8004d42:	f3bf 8f6f 	isb	sy
 8004d46:	f3bf 8f4f 	dsb	sy
 8004d4a:	61ba      	str	r2, [r7, #24]
 8004d4c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d4e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d302      	bcc.n	8004d64 <xQueueGenericSendFromISR+0xbc>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d12c      	bne.n	8004dbe <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d74:	f000 f910 	bl	8004f98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d78:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d80:	d112      	bne.n	8004da8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d016      	beq.n	8004db8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	3324      	adds	r3, #36	; 0x24
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 feee 	bl	8005b70 <xTaskRemoveFromEventList>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00e      	beq.n	8004db8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00b      	beq.n	8004db8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	e007      	b.n	8004db8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004da8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004dac:	3301      	adds	r3, #1
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	b25a      	sxtb	r2, r3
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004db8:	2301      	movs	r3, #1
 8004dba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004dbc:	e001      	b.n	8004dc2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004dcc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3738      	adds	r7, #56	; 0x38
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08c      	sub	sp, #48	; 0x30
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004de4:	2300      	movs	r3, #0
 8004de6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10a      	bne.n	8004e08 <xQueueReceive+0x30>
	__asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	623b      	str	r3, [r7, #32]
}
 8004e04:	bf00      	nop
 8004e06:	e7fe      	b.n	8004e06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d103      	bne.n	8004e16 <xQueueReceive+0x3e>
 8004e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <xQueueReceive+0x42>
 8004e16:	2301      	movs	r3, #1
 8004e18:	e000      	b.n	8004e1c <xQueueReceive+0x44>
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10a      	bne.n	8004e36 <xQueueReceive+0x5e>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	61fb      	str	r3, [r7, #28]
}
 8004e32:	bf00      	nop
 8004e34:	e7fe      	b.n	8004e34 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e36:	f001 f861 	bl	8005efc <xTaskGetSchedulerState>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d102      	bne.n	8004e46 <xQueueReceive+0x6e>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <xQueueReceive+0x72>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <xQueueReceive+0x74>
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10a      	bne.n	8004e66 <xQueueReceive+0x8e>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	61bb      	str	r3, [r7, #24]
}
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e66:	f001 fd29 	bl	80068bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d01f      	beq.n	8004eb6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e7a:	f000 f8f7 	bl	800506c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	1e5a      	subs	r2, r3, #1
 8004e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00f      	beq.n	8004eae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	3310      	adds	r3, #16
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fe6c 	bl	8005b70 <xTaskRemoveFromEventList>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d007      	beq.n	8004eae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e9e:	4b3d      	ldr	r3, [pc, #244]	; (8004f94 <xQueueReceive+0x1bc>)
 8004ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004eae:	f001 fd35 	bl	800691c <vPortExitCritical>
				return pdPASS;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e069      	b.n	8004f8a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d103      	bne.n	8004ec4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ebc:	f001 fd2e 	bl	800691c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	e062      	b.n	8004f8a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d106      	bne.n	8004ed8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004eca:	f107 0310 	add.w	r3, r7, #16
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 feb2 	bl	8005c38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ed8:	f001 fd20 	bl	800691c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004edc:	f000 fc1c 	bl	8005718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ee0:	f001 fcec 	bl	80068bc <vPortEnterCritical>
 8004ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004eea:	b25b      	sxtb	r3, r3
 8004eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef0:	d103      	bne.n	8004efa <xQueueReceive+0x122>
 8004ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f00:	b25b      	sxtb	r3, r3
 8004f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f06:	d103      	bne.n	8004f10 <xQueueReceive+0x138>
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f10:	f001 fd04 	bl	800691c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f14:	1d3a      	adds	r2, r7, #4
 8004f16:	f107 0310 	add.w	r3, r7, #16
 8004f1a:	4611      	mov	r1, r2
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 fea1 	bl	8005c64 <xTaskCheckForTimeOut>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d123      	bne.n	8004f70 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f2a:	f000 f917 	bl	800515c <prvIsQueueEmpty>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d017      	beq.n	8004f64 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f36:	3324      	adds	r3, #36	; 0x24
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	4611      	mov	r1, r2
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 fdc7 	bl	8005ad0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f44:	f000 f8b8 	bl	80050b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f48:	f000 fbf4 	bl	8005734 <xTaskResumeAll>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d189      	bne.n	8004e66 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004f52:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <xQueueReceive+0x1bc>)
 8004f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	f3bf 8f6f 	isb	sy
 8004f62:	e780      	b.n	8004e66 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f66:	f000 f8a7 	bl	80050b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f6a:	f000 fbe3 	bl	8005734 <xTaskResumeAll>
 8004f6e:	e77a      	b.n	8004e66 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f72:	f000 f8a1 	bl	80050b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f76:	f000 fbdd 	bl	8005734 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f7c:	f000 f8ee 	bl	800515c <prvIsQueueEmpty>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f43f af6f 	beq.w	8004e66 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3730      	adds	r7, #48	; 0x30
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	e000ed04 	.word	0xe000ed04

08004f98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10d      	bne.n	8004fd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d14d      	bne.n	800505a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 ffb8 	bl	8005f38 <xTaskPriorityDisinherit>
 8004fc8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	605a      	str	r2, [r3, #4]
 8004fd0:	e043      	b.n	800505a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d119      	bne.n	800500c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6898      	ldr	r0, [r3, #8]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	f001 ff68 	bl	8006eb8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	689a      	ldr	r2, [r3, #8]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	441a      	add	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d32b      	bcc.n	800505a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	609a      	str	r2, [r3, #8]
 800500a:	e026      	b.n	800505a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	68d8      	ldr	r0, [r3, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	461a      	mov	r2, r3
 8005016:	68b9      	ldr	r1, [r7, #8]
 8005018:	f001 ff4e 	bl	8006eb8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005024:	425b      	negs	r3, r3
 8005026:	441a      	add	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	68da      	ldr	r2, [r3, #12]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	429a      	cmp	r2, r3
 8005036:	d207      	bcs.n	8005048 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	685a      	ldr	r2, [r3, #4]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005040:	425b      	negs	r3, r3
 8005042:	441a      	add	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b02      	cmp	r3, #2
 800504c:	d105      	bne.n	800505a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d002      	beq.n	800505a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	3b01      	subs	r3, #1
 8005058:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005062:	697b      	ldr	r3, [r7, #20]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d018      	beq.n	80050b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	441a      	add	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	429a      	cmp	r2, r3
 8005096:	d303      	bcc.n	80050a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68d9      	ldr	r1, [r3, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	461a      	mov	r2, r3
 80050aa:	6838      	ldr	r0, [r7, #0]
 80050ac:	f001 ff04 	bl	8006eb8 <memcpy>
	}
}
 80050b0:	bf00      	nop
 80050b2:	3708      	adds	r7, #8
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b084      	sub	sp, #16
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80050c0:	f001 fbfc 	bl	80068bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050cc:	e011      	b.n	80050f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d012      	beq.n	80050fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3324      	adds	r3, #36	; 0x24
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 fd48 	bl	8005b70 <xTaskRemoveFromEventList>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80050e6:	f000 fe1f 	bl	8005d28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	dce9      	bgt.n	80050ce <prvUnlockQueue+0x16>
 80050fa:	e000      	b.n	80050fe <prvUnlockQueue+0x46>
					break;
 80050fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	22ff      	movs	r2, #255	; 0xff
 8005102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005106:	f001 fc09 	bl	800691c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800510a:	f001 fbd7 	bl	80068bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005114:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005116:	e011      	b.n	800513c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d012      	beq.n	8005146 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3310      	adds	r3, #16
 8005124:	4618      	mov	r0, r3
 8005126:	f000 fd23 	bl	8005b70 <xTaskRemoveFromEventList>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005130:	f000 fdfa 	bl	8005d28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005134:	7bbb      	ldrb	r3, [r7, #14]
 8005136:	3b01      	subs	r3, #1
 8005138:	b2db      	uxtb	r3, r3
 800513a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800513c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005140:	2b00      	cmp	r3, #0
 8005142:	dce9      	bgt.n	8005118 <prvUnlockQueue+0x60>
 8005144:	e000      	b.n	8005148 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005146:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	22ff      	movs	r2, #255	; 0xff
 800514c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005150:	f001 fbe4 	bl	800691c <vPortExitCritical>
}
 8005154:	bf00      	nop
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005164:	f001 fbaa 	bl	80068bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	2b00      	cmp	r3, #0
 800516e:	d102      	bne.n	8005176 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005170:	2301      	movs	r3, #1
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	e001      	b.n	800517a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005176:	2300      	movs	r3, #0
 8005178:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800517a:	f001 fbcf 	bl	800691c <vPortExitCritical>

	return xReturn;
 800517e:	68fb      	ldr	r3, [r7, #12]
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005190:	f001 fb94 	bl	80068bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519c:	429a      	cmp	r2, r3
 800519e:	d102      	bne.n	80051a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80051a0:	2301      	movs	r3, #1
 80051a2:	60fb      	str	r3, [r7, #12]
 80051a4:	e001      	b.n	80051aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051aa:	f001 fbb7 	bl	800691c <vPortExitCritical>

	return xReturn;
 80051ae:	68fb      	ldr	r3, [r7, #12]
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3710      	adds	r7, #16
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	e014      	b.n	80051f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80051c8:	4a0e      	ldr	r2, [pc, #56]	; (8005204 <vQueueAddToRegistry+0x4c>)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10b      	bne.n	80051ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80051d4:	490b      	ldr	r1, [pc, #44]	; (8005204 <vQueueAddToRegistry+0x4c>)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80051de:	4a09      	ldr	r2, [pc, #36]	; (8005204 <vQueueAddToRegistry+0x4c>)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	00db      	lsls	r3, r3, #3
 80051e4:	4413      	add	r3, r2
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80051ea:	e006      	b.n	80051fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	3301      	adds	r3, #1
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2b07      	cmp	r3, #7
 80051f6:	d9e7      	bls.n	80051c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80051f8:	bf00      	nop
 80051fa:	bf00      	nop
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr
 8005204:	20000b4c 	.word	0x20000b4c

08005208 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005208:	b580      	push	{r7, lr}
 800520a:	b086      	sub	sp, #24
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005218:	f001 fb50 	bl	80068bc <vPortEnterCritical>
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005222:	b25b      	sxtb	r3, r3
 8005224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005228:	d103      	bne.n	8005232 <vQueueWaitForMessageRestricted+0x2a>
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005238:	b25b      	sxtb	r3, r3
 800523a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800523e:	d103      	bne.n	8005248 <vQueueWaitForMessageRestricted+0x40>
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005248:	f001 fb68 	bl	800691c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	2b00      	cmp	r3, #0
 8005252:	d106      	bne.n	8005262 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	3324      	adds	r3, #36	; 0x24
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	68b9      	ldr	r1, [r7, #8]
 800525c:	4618      	mov	r0, r3
 800525e:	f000 fc5b 	bl	8005b18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005262:	6978      	ldr	r0, [r7, #20]
 8005264:	f7ff ff28 	bl	80050b8 <prvUnlockQueue>
	}
 8005268:	bf00      	nop
 800526a:	3718      	adds	r7, #24
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005270:	b580      	push	{r7, lr}
 8005272:	b08e      	sub	sp, #56	; 0x38
 8005274:	af04      	add	r7, sp, #16
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800527e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10a      	bne.n	800529a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	623b      	str	r3, [r7, #32]
}
 8005296:	bf00      	nop
 8005298:	e7fe      	b.n	8005298 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800529a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	61fb      	str	r3, [r7, #28]
}
 80052b2:	bf00      	nop
 80052b4:	e7fe      	b.n	80052b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80052b6:	23bc      	movs	r3, #188	; 0xbc
 80052b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	2bbc      	cmp	r3, #188	; 0xbc
 80052be:	d00a      	beq.n	80052d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	61bb      	str	r3, [r7, #24]
}
 80052d2:	bf00      	nop
 80052d4:	e7fe      	b.n	80052d4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80052d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d01e      	beq.n	800531a <xTaskCreateStatic+0xaa>
 80052dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d01b      	beq.n	800531a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80052e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052ea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	2202      	movs	r2, #2
 80052f0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052f4:	2300      	movs	r3, #0
 80052f6:	9303      	str	r3, [sp, #12]
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	9302      	str	r3, [sp, #8]
 80052fc:	f107 0314 	add.w	r3, r7, #20
 8005300:	9301      	str	r3, [sp, #4]
 8005302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f851 	bl	80053b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005312:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005314:	f000 f8ec 	bl	80054f0 <prvAddNewTaskToReadyList>
 8005318:	e001      	b.n	800531e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800531a:	2300      	movs	r3, #0
 800531c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800531e:	697b      	ldr	r3, [r7, #20]
	}
 8005320:	4618      	mov	r0, r3
 8005322:	3728      	adds	r7, #40	; 0x28
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005328:	b580      	push	{r7, lr}
 800532a:	b08c      	sub	sp, #48	; 0x30
 800532c:	af04      	add	r7, sp, #16
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	603b      	str	r3, [r7, #0]
 8005334:	4613      	mov	r3, r2
 8005336:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005338:	88fb      	ldrh	r3, [r7, #6]
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4618      	mov	r0, r3
 800533e:	f001 fbbd 	bl	8006abc <pvPortMalloc>
 8005342:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00e      	beq.n	8005368 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800534a:	20bc      	movs	r0, #188	; 0xbc
 800534c:	f001 fbb6 	bl	8006abc <pvPortMalloc>
 8005350:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	631a      	str	r2, [r3, #48]	; 0x30
 800535e:	e005      	b.n	800536c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005360:	6978      	ldr	r0, [r7, #20]
 8005362:	f001 fc6f 	bl	8006c44 <vPortFree>
 8005366:	e001      	b.n	800536c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005368:	2300      	movs	r3, #0
 800536a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d017      	beq.n	80053a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800537a:	88fa      	ldrh	r2, [r7, #6]
 800537c:	2300      	movs	r3, #0
 800537e:	9303      	str	r3, [sp, #12]
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	9302      	str	r3, [sp, #8]
 8005384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005386:	9301      	str	r3, [sp, #4]
 8005388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	68b9      	ldr	r1, [r7, #8]
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 f80f 	bl	80053b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005396:	69f8      	ldr	r0, [r7, #28]
 8005398:	f000 f8aa 	bl	80054f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800539c:	2301      	movs	r3, #1
 800539e:	61bb      	str	r3, [r7, #24]
 80053a0:	e002      	b.n	80053a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80053a2:	f04f 33ff 	mov.w	r3, #4294967295
 80053a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80053a8:	69bb      	ldr	r3, [r7, #24]
	}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3720      	adds	r7, #32
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
 80053c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80053c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	461a      	mov	r2, r3
 80053cc:	21a5      	movs	r1, #165	; 0xa5
 80053ce:	f001 fd81 	bl	8006ed4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80053dc:	3b01      	subs	r3, #1
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	4413      	add	r3, r2
 80053e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	f023 0307 	bic.w	r3, r3, #7
 80053ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00a      	beq.n	800540c <prvInitialiseNewTask+0x58>
	__asm volatile
 80053f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	617b      	str	r3, [r7, #20]
}
 8005408:	bf00      	nop
 800540a:	e7fe      	b.n	800540a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800540c:	2300      	movs	r3, #0
 800540e:	61fb      	str	r3, [r7, #28]
 8005410:	e012      	b.n	8005438 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	4413      	add	r3, r2
 8005418:	7819      	ldrb	r1, [r3, #0]
 800541a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	4413      	add	r3, r2
 8005420:	3334      	adds	r3, #52	; 0x34
 8005422:	460a      	mov	r2, r1
 8005424:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	4413      	add	r3, r2
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d006      	beq.n	8005440 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	3301      	adds	r3, #1
 8005436:	61fb      	str	r3, [r7, #28]
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	2b0f      	cmp	r3, #15
 800543c:	d9e9      	bls.n	8005412 <prvInitialiseNewTask+0x5e>
 800543e:	e000      	b.n	8005442 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005440:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800544a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544c:	2b37      	cmp	r3, #55	; 0x37
 800544e:	d901      	bls.n	8005454 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005450:	2337      	movs	r3, #55	; 0x37
 8005452:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005458:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800545e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	2200      	movs	r2, #0
 8005464:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005468:	3304      	adds	r3, #4
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff f98b 	bl	8004786 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	3318      	adds	r3, #24
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff f986 	bl	8004786 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800547a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800547c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800547e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005482:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800548a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800548c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800548e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005492:	2200      	movs	r2, #0
 8005494:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	2200      	movs	r2, #0
 800549c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80054a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a2:	3354      	adds	r3, #84	; 0x54
 80054a4:	2260      	movs	r2, #96	; 0x60
 80054a6:	2100      	movs	r1, #0
 80054a8:	4618      	mov	r0, r3
 80054aa:	f001 fd13 	bl	8006ed4 <memset>
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	4a0c      	ldr	r2, [pc, #48]	; (80054e4 <prvInitialiseNewTask+0x130>)
 80054b2:	659a      	str	r2, [r3, #88]	; 0x58
 80054b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b6:	4a0c      	ldr	r2, [pc, #48]	; (80054e8 <prvInitialiseNewTask+0x134>)
 80054b8:	65da      	str	r2, [r3, #92]	; 0x5c
 80054ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054bc:	4a0b      	ldr	r2, [pc, #44]	; (80054ec <prvInitialiseNewTask+0x138>)
 80054be:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	68f9      	ldr	r1, [r7, #12]
 80054c4:	69b8      	ldr	r0, [r7, #24]
 80054c6:	f001 f90b 	bl	80066e0 <pxPortInitialiseStack>
 80054ca:	4602      	mov	r2, r0
 80054cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ce:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80054d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d002      	beq.n	80054dc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80054d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054dc:	bf00      	nop
 80054de:	3720      	adds	r7, #32
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	08007114 	.word	0x08007114
 80054e8:	08007134 	.word	0x08007134
 80054ec:	080070f4 	.word	0x080070f4

080054f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80054f8:	f001 f9e0 	bl	80068bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80054fc:	4b2d      	ldr	r3, [pc, #180]	; (80055b4 <prvAddNewTaskToReadyList+0xc4>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3301      	adds	r3, #1
 8005502:	4a2c      	ldr	r2, [pc, #176]	; (80055b4 <prvAddNewTaskToReadyList+0xc4>)
 8005504:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005506:	4b2c      	ldr	r3, [pc, #176]	; (80055b8 <prvAddNewTaskToReadyList+0xc8>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d109      	bne.n	8005522 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800550e:	4a2a      	ldr	r2, [pc, #168]	; (80055b8 <prvAddNewTaskToReadyList+0xc8>)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005514:	4b27      	ldr	r3, [pc, #156]	; (80055b4 <prvAddNewTaskToReadyList+0xc4>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d110      	bne.n	800553e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800551c:	f000 fc28 	bl	8005d70 <prvInitialiseTaskLists>
 8005520:	e00d      	b.n	800553e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005522:	4b26      	ldr	r3, [pc, #152]	; (80055bc <prvAddNewTaskToReadyList+0xcc>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d109      	bne.n	800553e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800552a:	4b23      	ldr	r3, [pc, #140]	; (80055b8 <prvAddNewTaskToReadyList+0xc8>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	429a      	cmp	r2, r3
 8005536:	d802      	bhi.n	800553e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005538:	4a1f      	ldr	r2, [pc, #124]	; (80055b8 <prvAddNewTaskToReadyList+0xc8>)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800553e:	4b20      	ldr	r3, [pc, #128]	; (80055c0 <prvAddNewTaskToReadyList+0xd0>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3301      	adds	r3, #1
 8005544:	4a1e      	ldr	r2, [pc, #120]	; (80055c0 <prvAddNewTaskToReadyList+0xd0>)
 8005546:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005548:	4b1d      	ldr	r3, [pc, #116]	; (80055c0 <prvAddNewTaskToReadyList+0xd0>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005554:	4b1b      	ldr	r3, [pc, #108]	; (80055c4 <prvAddNewTaskToReadyList+0xd4>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	429a      	cmp	r2, r3
 800555a:	d903      	bls.n	8005564 <prvAddNewTaskToReadyList+0x74>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	4a18      	ldr	r2, [pc, #96]	; (80055c4 <prvAddNewTaskToReadyList+0xd4>)
 8005562:	6013      	str	r3, [r2, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005568:	4613      	mov	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4a15      	ldr	r2, [pc, #84]	; (80055c8 <prvAddNewTaskToReadyList+0xd8>)
 8005572:	441a      	add	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3304      	adds	r3, #4
 8005578:	4619      	mov	r1, r3
 800557a:	4610      	mov	r0, r2
 800557c:	f7ff f90f 	bl	800479e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005580:	f001 f9cc 	bl	800691c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005584:	4b0d      	ldr	r3, [pc, #52]	; (80055bc <prvAddNewTaskToReadyList+0xcc>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00e      	beq.n	80055aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800558c:	4b0a      	ldr	r3, [pc, #40]	; (80055b8 <prvAddNewTaskToReadyList+0xc8>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005596:	429a      	cmp	r2, r3
 8005598:	d207      	bcs.n	80055aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800559a:	4b0c      	ldr	r3, [pc, #48]	; (80055cc <prvAddNewTaskToReadyList+0xdc>)
 800559c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	f3bf 8f4f 	dsb	sy
 80055a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055aa:	bf00      	nop
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20001060 	.word	0x20001060
 80055b8:	20000b8c 	.word	0x20000b8c
 80055bc:	2000106c 	.word	0x2000106c
 80055c0:	2000107c 	.word	0x2000107c
 80055c4:	20001068 	.word	0x20001068
 80055c8:	20000b90 	.word	0x20000b90
 80055cc:	e000ed04 	.word	0xe000ed04

080055d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80055d8:	2300      	movs	r3, #0
 80055da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d017      	beq.n	8005612 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80055e2:	4b13      	ldr	r3, [pc, #76]	; (8005630 <vTaskDelay+0x60>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00a      	beq.n	8005600 <vTaskDelay+0x30>
	__asm volatile
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	60bb      	str	r3, [r7, #8]
}
 80055fc:	bf00      	nop
 80055fe:	e7fe      	b.n	80055fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005600:	f000 f88a 	bl	8005718 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005604:	2100      	movs	r1, #0
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 fd04 	bl	8006014 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800560c:	f000 f892 	bl	8005734 <xTaskResumeAll>
 8005610:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d107      	bne.n	8005628 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005618:	4b06      	ldr	r3, [pc, #24]	; (8005634 <vTaskDelay+0x64>)
 800561a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800561e:	601a      	str	r2, [r3, #0]
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005628:	bf00      	nop
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	20001088 	.word	0x20001088
 8005634:	e000ed04 	.word	0xe000ed04

08005638 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b08a      	sub	sp, #40	; 0x28
 800563c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800563e:	2300      	movs	r3, #0
 8005640:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005642:	2300      	movs	r3, #0
 8005644:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005646:	463a      	mov	r2, r7
 8005648:	1d39      	adds	r1, r7, #4
 800564a:	f107 0308 	add.w	r3, r7, #8
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff f848 	bl	80046e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005654:	6839      	ldr	r1, [r7, #0]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	9202      	str	r2, [sp, #8]
 800565c:	9301      	str	r3, [sp, #4]
 800565e:	2300      	movs	r3, #0
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	2300      	movs	r3, #0
 8005664:	460a      	mov	r2, r1
 8005666:	4924      	ldr	r1, [pc, #144]	; (80056f8 <vTaskStartScheduler+0xc0>)
 8005668:	4824      	ldr	r0, [pc, #144]	; (80056fc <vTaskStartScheduler+0xc4>)
 800566a:	f7ff fe01 	bl	8005270 <xTaskCreateStatic>
 800566e:	4603      	mov	r3, r0
 8005670:	4a23      	ldr	r2, [pc, #140]	; (8005700 <vTaskStartScheduler+0xc8>)
 8005672:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005674:	4b22      	ldr	r3, [pc, #136]	; (8005700 <vTaskStartScheduler+0xc8>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800567c:	2301      	movs	r3, #1
 800567e:	617b      	str	r3, [r7, #20]
 8005680:	e001      	b.n	8005686 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005682:	2300      	movs	r3, #0
 8005684:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d102      	bne.n	8005692 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800568c:	f000 fd16 	bl	80060bc <xTimerCreateTimerTask>
 8005690:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d11b      	bne.n	80056d0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	613b      	str	r3, [r7, #16]
}
 80056aa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056ac:	4b15      	ldr	r3, [pc, #84]	; (8005704 <vTaskStartScheduler+0xcc>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3354      	adds	r3, #84	; 0x54
 80056b2:	4a15      	ldr	r2, [pc, #84]	; (8005708 <vTaskStartScheduler+0xd0>)
 80056b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80056b6:	4b15      	ldr	r3, [pc, #84]	; (800570c <vTaskStartScheduler+0xd4>)
 80056b8:	f04f 32ff 	mov.w	r2, #4294967295
 80056bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056be:	4b14      	ldr	r3, [pc, #80]	; (8005710 <vTaskStartScheduler+0xd8>)
 80056c0:	2201      	movs	r2, #1
 80056c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80056c4:	4b13      	ldr	r3, [pc, #76]	; (8005714 <vTaskStartScheduler+0xdc>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80056ca:	f001 f885 	bl	80067d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80056ce:	e00e      	b.n	80056ee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d6:	d10a      	bne.n	80056ee <vTaskStartScheduler+0xb6>
	__asm volatile
 80056d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056dc:	f383 8811 	msr	BASEPRI, r3
 80056e0:	f3bf 8f6f 	isb	sy
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	60fb      	str	r3, [r7, #12]
}
 80056ea:	bf00      	nop
 80056ec:	e7fe      	b.n	80056ec <vTaskStartScheduler+0xb4>
}
 80056ee:	bf00      	nop
 80056f0:	3718      	adds	r7, #24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	08007084 	.word	0x08007084
 80056fc:	08005d41 	.word	0x08005d41
 8005700:	20001084 	.word	0x20001084
 8005704:	20000b8c 	.word	0x20000b8c
 8005708:	20000010 	.word	0x20000010
 800570c:	20001080 	.word	0x20001080
 8005710:	2000106c 	.word	0x2000106c
 8005714:	20001064 	.word	0x20001064

08005718 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005718:	b480      	push	{r7}
 800571a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800571c:	4b04      	ldr	r3, [pc, #16]	; (8005730 <vTaskSuspendAll+0x18>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	3301      	adds	r3, #1
 8005722:	4a03      	ldr	r2, [pc, #12]	; (8005730 <vTaskSuspendAll+0x18>)
 8005724:	6013      	str	r3, [r2, #0]
}
 8005726:	bf00      	nop
 8005728:	46bd      	mov	sp, r7
 800572a:	bc80      	pop	{r7}
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	20001088 	.word	0x20001088

08005734 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800573a:	2300      	movs	r3, #0
 800573c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800573e:	2300      	movs	r3, #0
 8005740:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005742:	4b42      	ldr	r3, [pc, #264]	; (800584c <xTaskResumeAll+0x118>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10a      	bne.n	8005760 <xTaskResumeAll+0x2c>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	603b      	str	r3, [r7, #0]
}
 800575c:	bf00      	nop
 800575e:	e7fe      	b.n	800575e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005760:	f001 f8ac 	bl	80068bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005764:	4b39      	ldr	r3, [pc, #228]	; (800584c <xTaskResumeAll+0x118>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3b01      	subs	r3, #1
 800576a:	4a38      	ldr	r2, [pc, #224]	; (800584c <xTaskResumeAll+0x118>)
 800576c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800576e:	4b37      	ldr	r3, [pc, #220]	; (800584c <xTaskResumeAll+0x118>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d162      	bne.n	800583c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005776:	4b36      	ldr	r3, [pc, #216]	; (8005850 <xTaskResumeAll+0x11c>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d05e      	beq.n	800583c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800577e:	e02f      	b.n	80057e0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005780:	4b34      	ldr	r3, [pc, #208]	; (8005854 <xTaskResumeAll+0x120>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3318      	adds	r3, #24
 800578c:	4618      	mov	r0, r3
 800578e:	f7ff f861 	bl	8004854 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	3304      	adds	r3, #4
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff f85c 	bl	8004854 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a0:	4b2d      	ldr	r3, [pc, #180]	; (8005858 <xTaskResumeAll+0x124>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d903      	bls.n	80057b0 <xTaskResumeAll+0x7c>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	4a2a      	ldr	r2, [pc, #168]	; (8005858 <xTaskResumeAll+0x124>)
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4a27      	ldr	r2, [pc, #156]	; (800585c <xTaskResumeAll+0x128>)
 80057be:	441a      	add	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3304      	adds	r3, #4
 80057c4:	4619      	mov	r1, r3
 80057c6:	4610      	mov	r0, r2
 80057c8:	f7fe ffe9 	bl	800479e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d0:	4b23      	ldr	r3, [pc, #140]	; (8005860 <xTaskResumeAll+0x12c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d302      	bcc.n	80057e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80057da:	4b22      	ldr	r3, [pc, #136]	; (8005864 <xTaskResumeAll+0x130>)
 80057dc:	2201      	movs	r2, #1
 80057de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057e0:	4b1c      	ldr	r3, [pc, #112]	; (8005854 <xTaskResumeAll+0x120>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1cb      	bne.n	8005780 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80057ee:	f000 fb61 	bl	8005eb4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80057f2:	4b1d      	ldr	r3, [pc, #116]	; (8005868 <xTaskResumeAll+0x134>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d010      	beq.n	8005820 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80057fe:	f000 f845 	bl	800588c <xTaskIncrementTick>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005808:	4b16      	ldr	r3, [pc, #88]	; (8005864 <xTaskResumeAll+0x130>)
 800580a:	2201      	movs	r2, #1
 800580c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	3b01      	subs	r3, #1
 8005812:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1f1      	bne.n	80057fe <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800581a:	4b13      	ldr	r3, [pc, #76]	; (8005868 <xTaskResumeAll+0x134>)
 800581c:	2200      	movs	r2, #0
 800581e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005820:	4b10      	ldr	r3, [pc, #64]	; (8005864 <xTaskResumeAll+0x130>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d009      	beq.n	800583c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005828:	2301      	movs	r3, #1
 800582a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800582c:	4b0f      	ldr	r3, [pc, #60]	; (800586c <xTaskResumeAll+0x138>)
 800582e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005832:	601a      	str	r2, [r3, #0]
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800583c:	f001 f86e 	bl	800691c <vPortExitCritical>

	return xAlreadyYielded;
 8005840:	68bb      	ldr	r3, [r7, #8]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	20001088 	.word	0x20001088
 8005850:	20001060 	.word	0x20001060
 8005854:	20001020 	.word	0x20001020
 8005858:	20001068 	.word	0x20001068
 800585c:	20000b90 	.word	0x20000b90
 8005860:	20000b8c 	.word	0x20000b8c
 8005864:	20001074 	.word	0x20001074
 8005868:	20001070 	.word	0x20001070
 800586c:	e000ed04 	.word	0xe000ed04

08005870 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005876:	4b04      	ldr	r3, [pc, #16]	; (8005888 <xTaskGetTickCount+0x18>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800587c:	687b      	ldr	r3, [r7, #4]
}
 800587e:	4618      	mov	r0, r3
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	bc80      	pop	{r7}
 8005886:	4770      	bx	lr
 8005888:	20001064 	.word	0x20001064

0800588c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005892:	2300      	movs	r3, #0
 8005894:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005896:	4b51      	ldr	r3, [pc, #324]	; (80059dc <xTaskIncrementTick+0x150>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	f040 808e 	bne.w	80059bc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058a0:	4b4f      	ldr	r3, [pc, #316]	; (80059e0 <xTaskIncrementTick+0x154>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3301      	adds	r3, #1
 80058a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80058a8:	4a4d      	ldr	r2, [pc, #308]	; (80059e0 <xTaskIncrementTick+0x154>)
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d120      	bne.n	80058f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80058b4:	4b4b      	ldr	r3, [pc, #300]	; (80059e4 <xTaskIncrementTick+0x158>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80058be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c2:	f383 8811 	msr	BASEPRI, r3
 80058c6:	f3bf 8f6f 	isb	sy
 80058ca:	f3bf 8f4f 	dsb	sy
 80058ce:	603b      	str	r3, [r7, #0]
}
 80058d0:	bf00      	nop
 80058d2:	e7fe      	b.n	80058d2 <xTaskIncrementTick+0x46>
 80058d4:	4b43      	ldr	r3, [pc, #268]	; (80059e4 <xTaskIncrementTick+0x158>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	60fb      	str	r3, [r7, #12]
 80058da:	4b43      	ldr	r3, [pc, #268]	; (80059e8 <xTaskIncrementTick+0x15c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a41      	ldr	r2, [pc, #260]	; (80059e4 <xTaskIncrementTick+0x158>)
 80058e0:	6013      	str	r3, [r2, #0]
 80058e2:	4a41      	ldr	r2, [pc, #260]	; (80059e8 <xTaskIncrementTick+0x15c>)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6013      	str	r3, [r2, #0]
 80058e8:	4b40      	ldr	r3, [pc, #256]	; (80059ec <xTaskIncrementTick+0x160>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3301      	adds	r3, #1
 80058ee:	4a3f      	ldr	r2, [pc, #252]	; (80059ec <xTaskIncrementTick+0x160>)
 80058f0:	6013      	str	r3, [r2, #0]
 80058f2:	f000 fadf 	bl	8005eb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80058f6:	4b3e      	ldr	r3, [pc, #248]	; (80059f0 <xTaskIncrementTick+0x164>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d34e      	bcc.n	800599e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005900:	4b38      	ldr	r3, [pc, #224]	; (80059e4 <xTaskIncrementTick+0x158>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <xTaskIncrementTick+0x82>
 800590a:	2301      	movs	r3, #1
 800590c:	e000      	b.n	8005910 <xTaskIncrementTick+0x84>
 800590e:	2300      	movs	r3, #0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d004      	beq.n	800591e <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005914:	4b36      	ldr	r3, [pc, #216]	; (80059f0 <xTaskIncrementTick+0x164>)
 8005916:	f04f 32ff 	mov.w	r2, #4294967295
 800591a:	601a      	str	r2, [r3, #0]
					break;
 800591c:	e03f      	b.n	800599e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800591e:	4b31      	ldr	r3, [pc, #196]	; (80059e4 <xTaskIncrementTick+0x158>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	429a      	cmp	r2, r3
 8005934:	d203      	bcs.n	800593e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005936:	4a2e      	ldr	r2, [pc, #184]	; (80059f0 <xTaskIncrementTick+0x164>)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6013      	str	r3, [r2, #0]
						break;
 800593c:	e02f      	b.n	800599e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	3304      	adds	r3, #4
 8005942:	4618      	mov	r0, r3
 8005944:	f7fe ff86 	bl	8004854 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594c:	2b00      	cmp	r3, #0
 800594e:	d004      	beq.n	800595a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	3318      	adds	r3, #24
 8005954:	4618      	mov	r0, r3
 8005956:	f7fe ff7d 	bl	8004854 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800595e:	4b25      	ldr	r3, [pc, #148]	; (80059f4 <xTaskIncrementTick+0x168>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	429a      	cmp	r2, r3
 8005964:	d903      	bls.n	800596e <xTaskIncrementTick+0xe2>
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596a:	4a22      	ldr	r2, [pc, #136]	; (80059f4 <xTaskIncrementTick+0x168>)
 800596c:	6013      	str	r3, [r2, #0]
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005972:	4613      	mov	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4a1f      	ldr	r2, [pc, #124]	; (80059f8 <xTaskIncrementTick+0x16c>)
 800597c:	441a      	add	r2, r3
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	3304      	adds	r3, #4
 8005982:	4619      	mov	r1, r3
 8005984:	4610      	mov	r0, r2
 8005986:	f7fe ff0a 	bl	800479e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598e:	4b1b      	ldr	r3, [pc, #108]	; (80059fc <xTaskIncrementTick+0x170>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	429a      	cmp	r2, r3
 8005996:	d3b3      	bcc.n	8005900 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005998:	2301      	movs	r3, #1
 800599a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800599c:	e7b0      	b.n	8005900 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800599e:	4b17      	ldr	r3, [pc, #92]	; (80059fc <xTaskIncrementTick+0x170>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a4:	4914      	ldr	r1, [pc, #80]	; (80059f8 <xTaskIncrementTick+0x16c>)
 80059a6:	4613      	mov	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	4413      	add	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	440b      	add	r3, r1
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d907      	bls.n	80059c6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80059b6:	2301      	movs	r3, #1
 80059b8:	617b      	str	r3, [r7, #20]
 80059ba:	e004      	b.n	80059c6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80059bc:	4b10      	ldr	r3, [pc, #64]	; (8005a00 <xTaskIncrementTick+0x174>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3301      	adds	r3, #1
 80059c2:	4a0f      	ldr	r2, [pc, #60]	; (8005a00 <xTaskIncrementTick+0x174>)
 80059c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80059c6:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <xTaskIncrementTick+0x178>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80059ce:	2301      	movs	r3, #1
 80059d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80059d2:	697b      	ldr	r3, [r7, #20]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	20001088 	.word	0x20001088
 80059e0:	20001064 	.word	0x20001064
 80059e4:	20001018 	.word	0x20001018
 80059e8:	2000101c 	.word	0x2000101c
 80059ec:	20001078 	.word	0x20001078
 80059f0:	20001080 	.word	0x20001080
 80059f4:	20001068 	.word	0x20001068
 80059f8:	20000b90 	.word	0x20000b90
 80059fc:	20000b8c 	.word	0x20000b8c
 8005a00:	20001070 	.word	0x20001070
 8005a04:	20001074 	.word	0x20001074

08005a08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a0e:	4b2a      	ldr	r3, [pc, #168]	; (8005ab8 <vTaskSwitchContext+0xb0>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d003      	beq.n	8005a1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a16:	4b29      	ldr	r3, [pc, #164]	; (8005abc <vTaskSwitchContext+0xb4>)
 8005a18:	2201      	movs	r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a1c:	e046      	b.n	8005aac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005a1e:	4b27      	ldr	r3, [pc, #156]	; (8005abc <vTaskSwitchContext+0xb4>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005a24:	4b26      	ldr	r3, [pc, #152]	; (8005ac0 <vTaskSwitchContext+0xb8>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	e010      	b.n	8005a4e <vTaskSwitchContext+0x46>
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10a      	bne.n	8005a48 <vTaskSwitchContext+0x40>
	__asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	607b      	str	r3, [r7, #4]
}
 8005a44:	bf00      	nop
 8005a46:	e7fe      	b.n	8005a46 <vTaskSwitchContext+0x3e>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	491d      	ldr	r1, [pc, #116]	; (8005ac4 <vTaskSwitchContext+0xbc>)
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4613      	mov	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	440b      	add	r3, r1
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0e4      	beq.n	8005a2c <vTaskSwitchContext+0x24>
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	4613      	mov	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4a15      	ldr	r2, [pc, #84]	; (8005ac4 <vTaskSwitchContext+0xbc>)
 8005a6e:	4413      	add	r3, r2
 8005a70:	60bb      	str	r3, [r7, #8]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	685a      	ldr	r2, [r3, #4]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	605a      	str	r2, [r3, #4]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	3308      	adds	r3, #8
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d104      	bne.n	8005a92 <vTaskSwitchContext+0x8a>
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	605a      	str	r2, [r3, #4]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	4a0b      	ldr	r2, [pc, #44]	; (8005ac8 <vTaskSwitchContext+0xc0>)
 8005a9a:	6013      	str	r3, [r2, #0]
 8005a9c:	4a08      	ldr	r2, [pc, #32]	; (8005ac0 <vTaskSwitchContext+0xb8>)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005aa2:	4b09      	ldr	r3, [pc, #36]	; (8005ac8 <vTaskSwitchContext+0xc0>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3354      	adds	r3, #84	; 0x54
 8005aa8:	4a08      	ldr	r2, [pc, #32]	; (8005acc <vTaskSwitchContext+0xc4>)
 8005aaa:	6013      	str	r3, [r2, #0]
}
 8005aac:	bf00      	nop
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bc80      	pop	{r7}
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	20001088 	.word	0x20001088
 8005abc:	20001074 	.word	0x20001074
 8005ac0:	20001068 	.word	0x20001068
 8005ac4:	20000b90 	.word	0x20000b90
 8005ac8:	20000b8c 	.word	0x20000b8c
 8005acc:	20000010 	.word	0x20000010

08005ad0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10a      	bne.n	8005af6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	60fb      	str	r3, [r7, #12]
}
 8005af2:	bf00      	nop
 8005af4:	e7fe      	b.n	8005af4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005af6:	4b07      	ldr	r3, [pc, #28]	; (8005b14 <vTaskPlaceOnEventList+0x44>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3318      	adds	r3, #24
 8005afc:	4619      	mov	r1, r3
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f7fe fe70 	bl	80047e4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b04:	2101      	movs	r1, #1
 8005b06:	6838      	ldr	r0, [r7, #0]
 8005b08:	f000 fa84 	bl	8006014 <prvAddCurrentTaskToDelayedList>
}
 8005b0c:	bf00      	nop
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}
 8005b14:	20000b8c 	.word	0x20000b8c

08005b18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10a      	bne.n	8005b40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	617b      	str	r3, [r7, #20]
}
 8005b3c:	bf00      	nop
 8005b3e:	e7fe      	b.n	8005b3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b40:	4b0a      	ldr	r3, [pc, #40]	; (8005b6c <vTaskPlaceOnEventListRestricted+0x54>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	3318      	adds	r3, #24
 8005b46:	4619      	mov	r1, r3
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f7fe fe28 	bl	800479e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005b54:	f04f 33ff 	mov.w	r3, #4294967295
 8005b58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b5a:	6879      	ldr	r1, [r7, #4]
 8005b5c:	68b8      	ldr	r0, [r7, #8]
 8005b5e:	f000 fa59 	bl	8006014 <prvAddCurrentTaskToDelayedList>
	}
 8005b62:	bf00      	nop
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000b8c 	.word	0x20000b8c

08005b70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	68db      	ldr	r3, [r3, #12]
 8005b7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10a      	bne.n	8005b9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	60fb      	str	r3, [r7, #12]
}
 8005b98:	bf00      	nop
 8005b9a:	e7fe      	b.n	8005b9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	3318      	adds	r3, #24
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7fe fe57 	bl	8004854 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ba6:	4b1e      	ldr	r3, [pc, #120]	; (8005c20 <xTaskRemoveFromEventList+0xb0>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d11d      	bne.n	8005bea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	3304      	adds	r3, #4
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fe fe4e 	bl	8004854 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bbc:	4b19      	ldr	r3, [pc, #100]	; (8005c24 <xTaskRemoveFromEventList+0xb4>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d903      	bls.n	8005bcc <xTaskRemoveFromEventList+0x5c>
 8005bc4:	693b      	ldr	r3, [r7, #16]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	4a16      	ldr	r2, [pc, #88]	; (8005c24 <xTaskRemoveFromEventList+0xb4>)
 8005bca:	6013      	str	r3, [r2, #0]
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4a13      	ldr	r2, [pc, #76]	; (8005c28 <xTaskRemoveFromEventList+0xb8>)
 8005bda:	441a      	add	r2, r3
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	3304      	adds	r3, #4
 8005be0:	4619      	mov	r1, r3
 8005be2:	4610      	mov	r0, r2
 8005be4:	f7fe fddb 	bl	800479e <vListInsertEnd>
 8005be8:	e005      	b.n	8005bf6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	3318      	adds	r3, #24
 8005bee:	4619      	mov	r1, r3
 8005bf0:	480e      	ldr	r0, [pc, #56]	; (8005c2c <xTaskRemoveFromEventList+0xbc>)
 8005bf2:	f7fe fdd4 	bl	800479e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfa:	4b0d      	ldr	r3, [pc, #52]	; (8005c30 <xTaskRemoveFromEventList+0xc0>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d905      	bls.n	8005c10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c04:	2301      	movs	r3, #1
 8005c06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c08:	4b0a      	ldr	r3, [pc, #40]	; (8005c34 <xTaskRemoveFromEventList+0xc4>)
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	e001      	b.n	8005c14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005c10:	2300      	movs	r3, #0
 8005c12:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005c14:	697b      	ldr	r3, [r7, #20]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3718      	adds	r7, #24
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	20001088 	.word	0x20001088
 8005c24:	20001068 	.word	0x20001068
 8005c28:	20000b90 	.word	0x20000b90
 8005c2c:	20001020 	.word	0x20001020
 8005c30:	20000b8c 	.word	0x20000b8c
 8005c34:	20001074 	.word	0x20001074

08005c38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c40:	4b06      	ldr	r3, [pc, #24]	; (8005c5c <vTaskInternalSetTimeOutState+0x24>)
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c48:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <vTaskInternalSetTimeOutState+0x28>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	605a      	str	r2, [r3, #4]
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bc80      	pop	{r7}
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	20001078 	.word	0x20001078
 8005c60:	20001064 	.word	0x20001064

08005c64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b088      	sub	sp, #32
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10a      	bne.n	8005c8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	613b      	str	r3, [r7, #16]
}
 8005c86:	bf00      	nop
 8005c88:	e7fe      	b.n	8005c88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	60fb      	str	r3, [r7, #12]
}
 8005ca2:	bf00      	nop
 8005ca4:	e7fe      	b.n	8005ca4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005ca6:	f000 fe09 	bl	80068bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005caa:	4b1d      	ldr	r3, [pc, #116]	; (8005d20 <xTaskCheckForTimeOut+0xbc>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	69ba      	ldr	r2, [r7, #24]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc2:	d102      	bne.n	8005cca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	61fb      	str	r3, [r7, #28]
 8005cc8:	e023      	b.n	8005d12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	4b15      	ldr	r3, [pc, #84]	; (8005d24 <xTaskCheckForTimeOut+0xc0>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d007      	beq.n	8005ce6 <xTaskCheckForTimeOut+0x82>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d302      	bcc.n	8005ce6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	61fb      	str	r3, [r7, #28]
 8005ce4:	e015      	b.n	8005d12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d20b      	bcs.n	8005d08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	1ad2      	subs	r2, r2, r3
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff ff9b 	bl	8005c38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d02:	2300      	movs	r3, #0
 8005d04:	61fb      	str	r3, [r7, #28]
 8005d06:	e004      	b.n	8005d12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d12:	f000 fe03 	bl	800691c <vPortExitCritical>

	return xReturn;
 8005d16:	69fb      	ldr	r3, [r7, #28]
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3720      	adds	r7, #32
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	20001064 	.word	0x20001064
 8005d24:	20001078 	.word	0x20001078

08005d28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d28:	b480      	push	{r7}
 8005d2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d2c:	4b03      	ldr	r3, [pc, #12]	; (8005d3c <vTaskMissedYield+0x14>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	601a      	str	r2, [r3, #0]
}
 8005d32:	bf00      	nop
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	20001074 	.word	0x20001074

08005d40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d48:	f000 f852 	bl	8005df0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d4c:	4b06      	ldr	r3, [pc, #24]	; (8005d68 <prvIdleTask+0x28>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d9f9      	bls.n	8005d48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d54:	4b05      	ldr	r3, [pc, #20]	; (8005d6c <prvIdleTask+0x2c>)
 8005d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d5a:	601a      	str	r2, [r3, #0]
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d64:	e7f0      	b.n	8005d48 <prvIdleTask+0x8>
 8005d66:	bf00      	nop
 8005d68:	20000b90 	.word	0x20000b90
 8005d6c:	e000ed04 	.word	0xe000ed04

08005d70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d76:	2300      	movs	r3, #0
 8005d78:	607b      	str	r3, [r7, #4]
 8005d7a:	e00c      	b.n	8005d96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4a12      	ldr	r2, [pc, #72]	; (8005dd0 <prvInitialiseTaskLists+0x60>)
 8005d88:	4413      	add	r3, r2
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7fe fcdc 	bl	8004748 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	3301      	adds	r3, #1
 8005d94:	607b      	str	r3, [r7, #4]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2b37      	cmp	r3, #55	; 0x37
 8005d9a:	d9ef      	bls.n	8005d7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d9c:	480d      	ldr	r0, [pc, #52]	; (8005dd4 <prvInitialiseTaskLists+0x64>)
 8005d9e:	f7fe fcd3 	bl	8004748 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005da2:	480d      	ldr	r0, [pc, #52]	; (8005dd8 <prvInitialiseTaskLists+0x68>)
 8005da4:	f7fe fcd0 	bl	8004748 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005da8:	480c      	ldr	r0, [pc, #48]	; (8005ddc <prvInitialiseTaskLists+0x6c>)
 8005daa:	f7fe fccd 	bl	8004748 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005dae:	480c      	ldr	r0, [pc, #48]	; (8005de0 <prvInitialiseTaskLists+0x70>)
 8005db0:	f7fe fcca 	bl	8004748 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005db4:	480b      	ldr	r0, [pc, #44]	; (8005de4 <prvInitialiseTaskLists+0x74>)
 8005db6:	f7fe fcc7 	bl	8004748 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005dba:	4b0b      	ldr	r3, [pc, #44]	; (8005de8 <prvInitialiseTaskLists+0x78>)
 8005dbc:	4a05      	ldr	r2, [pc, #20]	; (8005dd4 <prvInitialiseTaskLists+0x64>)
 8005dbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dc0:	4b0a      	ldr	r3, [pc, #40]	; (8005dec <prvInitialiseTaskLists+0x7c>)
 8005dc2:	4a05      	ldr	r2, [pc, #20]	; (8005dd8 <prvInitialiseTaskLists+0x68>)
 8005dc4:	601a      	str	r2, [r3, #0]
}
 8005dc6:	bf00      	nop
 8005dc8:	3708      	adds	r7, #8
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000b90 	.word	0x20000b90
 8005dd4:	20000ff0 	.word	0x20000ff0
 8005dd8:	20001004 	.word	0x20001004
 8005ddc:	20001020 	.word	0x20001020
 8005de0:	20001034 	.word	0x20001034
 8005de4:	2000104c 	.word	0x2000104c
 8005de8:	20001018 	.word	0x20001018
 8005dec:	2000101c 	.word	0x2000101c

08005df0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005df6:	e019      	b.n	8005e2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005df8:	f000 fd60 	bl	80068bc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005dfc:	4b10      	ldr	r3, [pc, #64]	; (8005e40 <prvCheckTasksWaitingTermination+0x50>)
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fe fd23 	bl	8004854 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e0e:	4b0d      	ldr	r3, [pc, #52]	; (8005e44 <prvCheckTasksWaitingTermination+0x54>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	4a0b      	ldr	r2, [pc, #44]	; (8005e44 <prvCheckTasksWaitingTermination+0x54>)
 8005e16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e18:	4b0b      	ldr	r3, [pc, #44]	; (8005e48 <prvCheckTasksWaitingTermination+0x58>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	4a0a      	ldr	r2, [pc, #40]	; (8005e48 <prvCheckTasksWaitingTermination+0x58>)
 8005e20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e22:	f000 fd7b 	bl	800691c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f810 	bl	8005e4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e2c:	4b06      	ldr	r3, [pc, #24]	; (8005e48 <prvCheckTasksWaitingTermination+0x58>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d1e1      	bne.n	8005df8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e34:	bf00      	nop
 8005e36:	bf00      	nop
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20001034 	.word	0x20001034
 8005e44:	20001060 	.word	0x20001060
 8005e48:	20001048 	.word	0x20001048

08005e4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	3354      	adds	r3, #84	; 0x54
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f001 f851 	bl	8006f00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d108      	bne.n	8005e7a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f000 fee9 	bl	8006c44 <vPortFree>
				vPortFree( pxTCB );
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fee6 	bl	8006c44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e78:	e018      	b.n	8005eac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d103      	bne.n	8005e8c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f000 fedd 	bl	8006c44 <vPortFree>
	}
 8005e8a:	e00f      	b.n	8005eac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d00a      	beq.n	8005eac <prvDeleteTCB+0x60>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	60fb      	str	r3, [r7, #12]
}
 8005ea8:	bf00      	nop
 8005eaa:	e7fe      	b.n	8005eaa <prvDeleteTCB+0x5e>
	}
 8005eac:	bf00      	nop
 8005eae:	3710      	adds	r7, #16
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eba:	4b0e      	ldr	r3, [pc, #56]	; (8005ef4 <prvResetNextTaskUnblockTime+0x40>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <prvResetNextTaskUnblockTime+0x14>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e000      	b.n	8005eca <prvResetNextTaskUnblockTime+0x16>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d004      	beq.n	8005ed8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ece:	4b0a      	ldr	r3, [pc, #40]	; (8005ef8 <prvResetNextTaskUnblockTime+0x44>)
 8005ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ed6:	e008      	b.n	8005eea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005ed8:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <prvResetNextTaskUnblockTime+0x40>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	4a04      	ldr	r2, [pc, #16]	; (8005ef8 <prvResetNextTaskUnblockTime+0x44>)
 8005ee8:	6013      	str	r3, [r2, #0]
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bc80      	pop	{r7}
 8005ef2:	4770      	bx	lr
 8005ef4:	20001018 	.word	0x20001018
 8005ef8:	20001080 	.word	0x20001080

08005efc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f02:	4b0b      	ldr	r3, [pc, #44]	; (8005f30 <xTaskGetSchedulerState+0x34>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d102      	bne.n	8005f10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	607b      	str	r3, [r7, #4]
 8005f0e:	e008      	b.n	8005f22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f10:	4b08      	ldr	r3, [pc, #32]	; (8005f34 <xTaskGetSchedulerState+0x38>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f18:	2302      	movs	r3, #2
 8005f1a:	607b      	str	r3, [r7, #4]
 8005f1c:	e001      	b.n	8005f22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f22:	687b      	ldr	r3, [r7, #4]
	}
 8005f24:	4618      	mov	r0, r3
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bc80      	pop	{r7}
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	2000106c 	.word	0x2000106c
 8005f34:	20001088 	.word	0x20001088

08005f38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f44:	2300      	movs	r3, #0
 8005f46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d056      	beq.n	8005ffc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f4e:	4b2e      	ldr	r3, [pc, #184]	; (8006008 <xTaskPriorityDisinherit+0xd0>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d00a      	beq.n	8005f6e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	60fb      	str	r3, [r7, #12]
}
 8005f6a:	bf00      	nop
 8005f6c:	e7fe      	b.n	8005f6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10a      	bne.n	8005f8c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	60bb      	str	r3, [r7, #8]
}
 8005f88:	bf00      	nop
 8005f8a:	e7fe      	b.n	8005f8a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f90:	1e5a      	subs	r2, r3, #1
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d02c      	beq.n	8005ffc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d128      	bne.n	8005ffc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	3304      	adds	r3, #4
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7fe fc50 	bl	8004854 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fcc:	4b0f      	ldr	r3, [pc, #60]	; (800600c <xTaskPriorityDisinherit+0xd4>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d903      	bls.n	8005fdc <xTaskPriorityDisinherit+0xa4>
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	4a0c      	ldr	r2, [pc, #48]	; (800600c <xTaskPriorityDisinherit+0xd4>)
 8005fda:	6013      	str	r3, [r2, #0]
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4a09      	ldr	r2, [pc, #36]	; (8006010 <xTaskPriorityDisinherit+0xd8>)
 8005fea:	441a      	add	r2, r3
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	f7fe fbd3 	bl	800479e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ffc:	697b      	ldr	r3, [r7, #20]
	}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	20000b8c 	.word	0x20000b8c
 800600c:	20001068 	.word	0x20001068
 8006010:	20000b90 	.word	0x20000b90

08006014 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800601e:	4b21      	ldr	r3, [pc, #132]	; (80060a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006024:	4b20      	ldr	r3, [pc, #128]	; (80060a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	3304      	adds	r3, #4
 800602a:	4618      	mov	r0, r3
 800602c:	f7fe fc12 	bl	8004854 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006036:	d10a      	bne.n	800604e <prvAddCurrentTaskToDelayedList+0x3a>
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d007      	beq.n	800604e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800603e:	4b1a      	ldr	r3, [pc, #104]	; (80060a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3304      	adds	r3, #4
 8006044:	4619      	mov	r1, r3
 8006046:	4819      	ldr	r0, [pc, #100]	; (80060ac <prvAddCurrentTaskToDelayedList+0x98>)
 8006048:	f7fe fba9 	bl	800479e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800604c:	e026      	b.n	800609c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4413      	add	r3, r2
 8006054:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006056:	4b14      	ldr	r3, [pc, #80]	; (80060a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	429a      	cmp	r2, r3
 8006064:	d209      	bcs.n	800607a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006066:	4b12      	ldr	r3, [pc, #72]	; (80060b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	4b0f      	ldr	r3, [pc, #60]	; (80060a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3304      	adds	r3, #4
 8006070:	4619      	mov	r1, r3
 8006072:	4610      	mov	r0, r2
 8006074:	f7fe fbb6 	bl	80047e4 <vListInsert>
}
 8006078:	e010      	b.n	800609c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800607a:	4b0e      	ldr	r3, [pc, #56]	; (80060b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	4b0a      	ldr	r3, [pc, #40]	; (80060a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3304      	adds	r3, #4
 8006084:	4619      	mov	r1, r3
 8006086:	4610      	mov	r0, r2
 8006088:	f7fe fbac 	bl	80047e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800608c:	4b0a      	ldr	r3, [pc, #40]	; (80060b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	429a      	cmp	r2, r3
 8006094:	d202      	bcs.n	800609c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006096:	4a08      	ldr	r2, [pc, #32]	; (80060b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	6013      	str	r3, [r2, #0]
}
 800609c:	bf00      	nop
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	20001064 	.word	0x20001064
 80060a8:	20000b8c 	.word	0x20000b8c
 80060ac:	2000104c 	.word	0x2000104c
 80060b0:	2000101c 	.word	0x2000101c
 80060b4:	20001018 	.word	0x20001018
 80060b8:	20001080 	.word	0x20001080

080060bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b08a      	sub	sp, #40	; 0x28
 80060c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060c6:	f000 facb 	bl	8006660 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060ca:	4b1c      	ldr	r3, [pc, #112]	; (800613c <xTimerCreateTimerTask+0x80>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d021      	beq.n	8006116 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060d2:	2300      	movs	r3, #0
 80060d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060da:	1d3a      	adds	r2, r7, #4
 80060dc:	f107 0108 	add.w	r1, r7, #8
 80060e0:	f107 030c 	add.w	r3, r7, #12
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fe fb15 	bl	8004714 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	9202      	str	r2, [sp, #8]
 80060f2:	9301      	str	r3, [sp, #4]
 80060f4:	2302      	movs	r3, #2
 80060f6:	9300      	str	r3, [sp, #0]
 80060f8:	2300      	movs	r3, #0
 80060fa:	460a      	mov	r2, r1
 80060fc:	4910      	ldr	r1, [pc, #64]	; (8006140 <xTimerCreateTimerTask+0x84>)
 80060fe:	4811      	ldr	r0, [pc, #68]	; (8006144 <xTimerCreateTimerTask+0x88>)
 8006100:	f7ff f8b6 	bl	8005270 <xTaskCreateStatic>
 8006104:	4603      	mov	r3, r0
 8006106:	4a10      	ldr	r2, [pc, #64]	; (8006148 <xTimerCreateTimerTask+0x8c>)
 8006108:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800610a:	4b0f      	ldr	r3, [pc, #60]	; (8006148 <xTimerCreateTimerTask+0x8c>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d001      	beq.n	8006116 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006112:	2301      	movs	r3, #1
 8006114:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10a      	bne.n	8006132 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	613b      	str	r3, [r7, #16]
}
 800612e:	bf00      	nop
 8006130:	e7fe      	b.n	8006130 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006132:	697b      	ldr	r3, [r7, #20]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	200010bc 	.word	0x200010bc
 8006140:	0800708c 	.word	0x0800708c
 8006144:	08006269 	.word	0x08006269
 8006148:	200010c0 	.word	0x200010c0

0800614c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b08a      	sub	sp, #40	; 0x28
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
 8006158:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800615a:	2300      	movs	r3, #0
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006168:	f383 8811 	msr	BASEPRI, r3
 800616c:	f3bf 8f6f 	isb	sy
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	623b      	str	r3, [r7, #32]
}
 8006176:	bf00      	nop
 8006178:	e7fe      	b.n	8006178 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800617a:	4b1a      	ldr	r3, [pc, #104]	; (80061e4 <xTimerGenericCommand+0x98>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d02a      	beq.n	80061d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2b05      	cmp	r3, #5
 8006192:	dc18      	bgt.n	80061c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006194:	f7ff feb2 	bl	8005efc <xTaskGetSchedulerState>
 8006198:	4603      	mov	r3, r0
 800619a:	2b02      	cmp	r3, #2
 800619c:	d109      	bne.n	80061b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800619e:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <xTimerGenericCommand+0x98>)
 80061a0:	6818      	ldr	r0, [r3, #0]
 80061a2:	f107 0110 	add.w	r1, r7, #16
 80061a6:	2300      	movs	r3, #0
 80061a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061aa:	f7fe fc7f 	bl	8004aac <xQueueGenericSend>
 80061ae:	6278      	str	r0, [r7, #36]	; 0x24
 80061b0:	e012      	b.n	80061d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061b2:	4b0c      	ldr	r3, [pc, #48]	; (80061e4 <xTimerGenericCommand+0x98>)
 80061b4:	6818      	ldr	r0, [r3, #0]
 80061b6:	f107 0110 	add.w	r1, r7, #16
 80061ba:	2300      	movs	r3, #0
 80061bc:	2200      	movs	r2, #0
 80061be:	f7fe fc75 	bl	8004aac <xQueueGenericSend>
 80061c2:	6278      	str	r0, [r7, #36]	; 0x24
 80061c4:	e008      	b.n	80061d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061c6:	4b07      	ldr	r3, [pc, #28]	; (80061e4 <xTimerGenericCommand+0x98>)
 80061c8:	6818      	ldr	r0, [r3, #0]
 80061ca:	f107 0110 	add.w	r1, r7, #16
 80061ce:	2300      	movs	r3, #0
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	f7fe fd69 	bl	8004ca8 <xQueueGenericSendFromISR>
 80061d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3728      	adds	r7, #40	; 0x28
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	200010bc 	.word	0x200010bc

080061e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b088      	sub	sp, #32
 80061ec:	af02      	add	r7, sp, #8
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061f2:	4b1c      	ldr	r3, [pc, #112]	; (8006264 <prvProcessExpiredTimer+0x7c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	3304      	adds	r3, #4
 8006200:	4618      	mov	r0, r3
 8006202:	f7fe fb27 	bl	8004854 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d122      	bne.n	8006254 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	699a      	ldr	r2, [r3, #24]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	18d1      	adds	r1, r2, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	6978      	ldr	r0, [r7, #20]
 800621c:	f000 f8c8 	bl	80063b0 <prvInsertTimerInActiveList>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d016      	beq.n	8006254 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006226:	2300      	movs	r3, #0
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	2300      	movs	r3, #0
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	2100      	movs	r1, #0
 8006230:	6978      	ldr	r0, [r7, #20]
 8006232:	f7ff ff8b 	bl	800614c <xTimerGenericCommand>
 8006236:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10a      	bne.n	8006254 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	60fb      	str	r3, [r7, #12]
}
 8006250:	bf00      	nop
 8006252:	e7fe      	b.n	8006252 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	6978      	ldr	r0, [r7, #20]
 800625a:	4798      	blx	r3
}
 800625c:	bf00      	nop
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	200010b4 	.word	0x200010b4

08006268 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006270:	f107 0308 	add.w	r3, r7, #8
 8006274:	4618      	mov	r0, r3
 8006276:	f000 f857 	bl	8006328 <prvGetNextExpireTime>
 800627a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	4619      	mov	r1, r3
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 f803 	bl	800628c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006286:	f000 f8d5 	bl	8006434 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800628a:	e7f1      	b.n	8006270 <prvTimerTask+0x8>

0800628c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006296:	f7ff fa3f 	bl	8005718 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800629a:	f107 0308 	add.w	r3, r7, #8
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 f866 	bl	8006370 <prvSampleTimeNow>
 80062a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d130      	bne.n	800630e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10a      	bne.n	80062c8 <prvProcessTimerOrBlockTask+0x3c>
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d806      	bhi.n	80062c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062ba:	f7ff fa3b 	bl	8005734 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062be:	68f9      	ldr	r1, [r7, #12]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7ff ff91 	bl	80061e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062c6:	e024      	b.n	8006312 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d008      	beq.n	80062e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062ce:	4b13      	ldr	r3, [pc, #76]	; (800631c <prvProcessTimerOrBlockTask+0x90>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	bf0c      	ite	eq
 80062d8:	2301      	moveq	r3, #1
 80062da:	2300      	movne	r3, #0
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062e0:	4b0f      	ldr	r3, [pc, #60]	; (8006320 <prvProcessTimerOrBlockTask+0x94>)
 80062e2:	6818      	ldr	r0, [r3, #0]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	683a      	ldr	r2, [r7, #0]
 80062ec:	4619      	mov	r1, r3
 80062ee:	f7fe ff8b 	bl	8005208 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062f2:	f7ff fa1f 	bl	8005734 <xTaskResumeAll>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062fc:	4b09      	ldr	r3, [pc, #36]	; (8006324 <prvProcessTimerOrBlockTask+0x98>)
 80062fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006302:	601a      	str	r2, [r3, #0]
 8006304:	f3bf 8f4f 	dsb	sy
 8006308:	f3bf 8f6f 	isb	sy
}
 800630c:	e001      	b.n	8006312 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800630e:	f7ff fa11 	bl	8005734 <xTaskResumeAll>
}
 8006312:	bf00      	nop
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	200010b8 	.word	0x200010b8
 8006320:	200010bc 	.word	0x200010bc
 8006324:	e000ed04 	.word	0xe000ed04

08006328 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006330:	4b0e      	ldr	r3, [pc, #56]	; (800636c <prvGetNextExpireTime+0x44>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	bf0c      	ite	eq
 800633a:	2301      	moveq	r3, #1
 800633c:	2300      	movne	r3, #0
 800633e:	b2db      	uxtb	r3, r3
 8006340:	461a      	mov	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d105      	bne.n	800635a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800634e:	4b07      	ldr	r3, [pc, #28]	; (800636c <prvGetNextExpireTime+0x44>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	e001      	b.n	800635e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800635e:	68fb      	ldr	r3, [r7, #12]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	bc80      	pop	{r7}
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	200010b4 	.word	0x200010b4

08006370 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006378:	f7ff fa7a 	bl	8005870 <xTaskGetTickCount>
 800637c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800637e:	4b0b      	ldr	r3, [pc, #44]	; (80063ac <prvSampleTimeNow+0x3c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	429a      	cmp	r2, r3
 8006386:	d205      	bcs.n	8006394 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006388:	f000 f908 	bl	800659c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	601a      	str	r2, [r3, #0]
 8006392:	e002      	b.n	800639a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800639a:	4a04      	ldr	r2, [pc, #16]	; (80063ac <prvSampleTimeNow+0x3c>)
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80063a0:	68fb      	ldr	r3, [r7, #12]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	200010c4 	.word	0x200010c4

080063b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
 80063bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063be:	2300      	movs	r3, #0
 80063c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d812      	bhi.n	80063fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	1ad2      	subs	r2, r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d302      	bcc.n	80063ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063e4:	2301      	movs	r3, #1
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	e01b      	b.n	8006422 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063ea:	4b10      	ldr	r3, [pc, #64]	; (800642c <prvInsertTimerInActiveList+0x7c>)
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3304      	adds	r3, #4
 80063f2:	4619      	mov	r1, r3
 80063f4:	4610      	mov	r0, r2
 80063f6:	f7fe f9f5 	bl	80047e4 <vListInsert>
 80063fa:	e012      	b.n	8006422 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d206      	bcs.n	8006412 <prvInsertTimerInActiveList+0x62>
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	429a      	cmp	r2, r3
 800640a:	d302      	bcc.n	8006412 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800640c:	2301      	movs	r3, #1
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	e007      	b.n	8006422 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006412:	4b07      	ldr	r3, [pc, #28]	; (8006430 <prvInsertTimerInActiveList+0x80>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3304      	adds	r3, #4
 800641a:	4619      	mov	r1, r3
 800641c:	4610      	mov	r0, r2
 800641e:	f7fe f9e1 	bl	80047e4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006422:	697b      	ldr	r3, [r7, #20]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	200010b8 	.word	0x200010b8
 8006430:	200010b4 	.word	0x200010b4

08006434 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08e      	sub	sp, #56	; 0x38
 8006438:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800643a:	e09d      	b.n	8006578 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	da18      	bge.n	8006474 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006442:	1d3b      	adds	r3, r7, #4
 8006444:	3304      	adds	r3, #4
 8006446:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10a      	bne.n	8006464 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800644e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006452:	f383 8811 	msr	BASEPRI, r3
 8006456:	f3bf 8f6f 	isb	sy
 800645a:	f3bf 8f4f 	dsb	sy
 800645e:	61fb      	str	r3, [r7, #28]
}
 8006460:	bf00      	nop
 8006462:	e7fe      	b.n	8006462 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800646a:	6850      	ldr	r0, [r2, #4]
 800646c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800646e:	6892      	ldr	r2, [r2, #8]
 8006470:	4611      	mov	r1, r2
 8006472:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	db7d      	blt.n	8006576 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800647e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d004      	beq.n	8006490 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	3304      	adds	r3, #4
 800648a:	4618      	mov	r0, r3
 800648c:	f7fe f9e2 	bl	8004854 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006490:	463b      	mov	r3, r7
 8006492:	4618      	mov	r0, r3
 8006494:	f7ff ff6c 	bl	8006370 <prvSampleTimeNow>
 8006498:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b09      	cmp	r3, #9
 800649e:	d86b      	bhi.n	8006578 <prvProcessReceivedCommands+0x144>
 80064a0:	a201      	add	r2, pc, #4	; (adr r2, 80064a8 <prvProcessReceivedCommands+0x74>)
 80064a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a6:	bf00      	nop
 80064a8:	080064d1 	.word	0x080064d1
 80064ac:	080064d1 	.word	0x080064d1
 80064b0:	080064d1 	.word	0x080064d1
 80064b4:	08006579 	.word	0x08006579
 80064b8:	0800652d 	.word	0x0800652d
 80064bc:	08006565 	.word	0x08006565
 80064c0:	080064d1 	.word	0x080064d1
 80064c4:	080064d1 	.word	0x080064d1
 80064c8:	08006579 	.word	0x08006579
 80064cc:	0800652d 	.word	0x0800652d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	18d1      	adds	r1, r2, r3
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064de:	f7ff ff67 	bl	80063b0 <prvInsertTimerInActiveList>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d047      	beq.n	8006578 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064ee:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80064f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d13f      	bne.n	8006578 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fc:	699b      	ldr	r3, [r3, #24]
 80064fe:	441a      	add	r2, r3
 8006500:	2300      	movs	r3, #0
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	2300      	movs	r3, #0
 8006506:	2100      	movs	r1, #0
 8006508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800650a:	f7ff fe1f 	bl	800614c <xTimerGenericCommand>
 800650e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d130      	bne.n	8006578 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	61bb      	str	r3, [r7, #24]
}
 8006528:	bf00      	nop
 800652a:	e7fe      	b.n	800652a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800652c:	68ba      	ldr	r2, [r7, #8]
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10a      	bne.n	8006550 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	617b      	str	r3, [r7, #20]
}
 800654c:	bf00      	nop
 800654e:	e7fe      	b.n	800654e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	699a      	ldr	r2, [r3, #24]
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	18d1      	adds	r1, r2, r3
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800655c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800655e:	f7ff ff27 	bl	80063b0 <prvInsertTimerInActiveList>
					break;
 8006562:	e009      	b.n	8006578 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006566:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800656a:	2b00      	cmp	r3, #0
 800656c:	d104      	bne.n	8006578 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800656e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006570:	f000 fb68 	bl	8006c44 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006574:	e000      	b.n	8006578 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006576:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006578:	4b07      	ldr	r3, [pc, #28]	; (8006598 <prvProcessReceivedCommands+0x164>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	1d39      	adds	r1, r7, #4
 800657e:	2200      	movs	r2, #0
 8006580:	4618      	mov	r0, r3
 8006582:	f7fe fc29 	bl	8004dd8 <xQueueReceive>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	f47f af57 	bne.w	800643c <prvProcessReceivedCommands+0x8>
	}
}
 800658e:	bf00      	nop
 8006590:	bf00      	nop
 8006592:	3730      	adds	r7, #48	; 0x30
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	200010bc 	.word	0x200010bc

0800659c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b088      	sub	sp, #32
 80065a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065a2:	e045      	b.n	8006630 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065a4:	4b2c      	ldr	r3, [pc, #176]	; (8006658 <prvSwitchTimerLists+0xbc>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065ae:	4b2a      	ldr	r3, [pc, #168]	; (8006658 <prvSwitchTimerLists+0xbc>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	3304      	adds	r3, #4
 80065bc:	4618      	mov	r0, r3
 80065be:	f7fe f949 	bl	8004854 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d12e      	bne.n	8006630 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4413      	add	r3, r2
 80065da:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d90e      	bls.n	8006602 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065f0:	4b19      	ldr	r3, [pc, #100]	; (8006658 <prvSwitchTimerLists+0xbc>)
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	3304      	adds	r3, #4
 80065f8:	4619      	mov	r1, r3
 80065fa:	4610      	mov	r0, r2
 80065fc:	f7fe f8f2 	bl	80047e4 <vListInsert>
 8006600:	e016      	b.n	8006630 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006602:	2300      	movs	r3, #0
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	2300      	movs	r3, #0
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	2100      	movs	r1, #0
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f7ff fd9d 	bl	800614c <xTimerGenericCommand>
 8006612:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10a      	bne.n	8006630 <prvSwitchTimerLists+0x94>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	603b      	str	r3, [r7, #0]
}
 800662c:	bf00      	nop
 800662e:	e7fe      	b.n	800662e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006630:	4b09      	ldr	r3, [pc, #36]	; (8006658 <prvSwitchTimerLists+0xbc>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1b4      	bne.n	80065a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800663a:	4b07      	ldr	r3, [pc, #28]	; (8006658 <prvSwitchTimerLists+0xbc>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006640:	4b06      	ldr	r3, [pc, #24]	; (800665c <prvSwitchTimerLists+0xc0>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a04      	ldr	r2, [pc, #16]	; (8006658 <prvSwitchTimerLists+0xbc>)
 8006646:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006648:	4a04      	ldr	r2, [pc, #16]	; (800665c <prvSwitchTimerLists+0xc0>)
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	6013      	str	r3, [r2, #0]
}
 800664e:	bf00      	nop
 8006650:	3718      	adds	r7, #24
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	200010b4 	.word	0x200010b4
 800665c:	200010b8 	.word	0x200010b8

08006660 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006666:	f000 f929 	bl	80068bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800666a:	4b15      	ldr	r3, [pc, #84]	; (80066c0 <prvCheckForValidListAndQueue+0x60>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d120      	bne.n	80066b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006672:	4814      	ldr	r0, [pc, #80]	; (80066c4 <prvCheckForValidListAndQueue+0x64>)
 8006674:	f7fe f868 	bl	8004748 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006678:	4813      	ldr	r0, [pc, #76]	; (80066c8 <prvCheckForValidListAndQueue+0x68>)
 800667a:	f7fe f865 	bl	8004748 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800667e:	4b13      	ldr	r3, [pc, #76]	; (80066cc <prvCheckForValidListAndQueue+0x6c>)
 8006680:	4a10      	ldr	r2, [pc, #64]	; (80066c4 <prvCheckForValidListAndQueue+0x64>)
 8006682:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006684:	4b12      	ldr	r3, [pc, #72]	; (80066d0 <prvCheckForValidListAndQueue+0x70>)
 8006686:	4a10      	ldr	r2, [pc, #64]	; (80066c8 <prvCheckForValidListAndQueue+0x68>)
 8006688:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800668a:	2300      	movs	r3, #0
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	4b11      	ldr	r3, [pc, #68]	; (80066d4 <prvCheckForValidListAndQueue+0x74>)
 8006690:	4a11      	ldr	r2, [pc, #68]	; (80066d8 <prvCheckForValidListAndQueue+0x78>)
 8006692:	2110      	movs	r1, #16
 8006694:	200a      	movs	r0, #10
 8006696:	f7fe f96f 	bl	8004978 <xQueueGenericCreateStatic>
 800669a:	4603      	mov	r3, r0
 800669c:	4a08      	ldr	r2, [pc, #32]	; (80066c0 <prvCheckForValidListAndQueue+0x60>)
 800669e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80066a0:	4b07      	ldr	r3, [pc, #28]	; (80066c0 <prvCheckForValidListAndQueue+0x60>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d005      	beq.n	80066b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80066a8:	4b05      	ldr	r3, [pc, #20]	; (80066c0 <prvCheckForValidListAndQueue+0x60>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	490b      	ldr	r1, [pc, #44]	; (80066dc <prvCheckForValidListAndQueue+0x7c>)
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fe fd82 	bl	80051b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066b4:	f000 f932 	bl	800691c <vPortExitCritical>
}
 80066b8:	bf00      	nop
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	200010bc 	.word	0x200010bc
 80066c4:	2000108c 	.word	0x2000108c
 80066c8:	200010a0 	.word	0x200010a0
 80066cc:	200010b4 	.word	0x200010b4
 80066d0:	200010b8 	.word	0x200010b8
 80066d4:	20001168 	.word	0x20001168
 80066d8:	200010c8 	.word	0x200010c8
 80066dc:	08007094 	.word	0x08007094

080066e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	3b04      	subs	r3, #4
 80066f0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80066f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	3b04      	subs	r3, #4
 80066fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	f023 0201 	bic.w	r2, r3, #1
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	3b04      	subs	r3, #4
 800670e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006710:	4a08      	ldr	r2, [pc, #32]	; (8006734 <pxPortInitialiseStack+0x54>)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3b14      	subs	r3, #20
 800671a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	3b20      	subs	r3, #32
 8006726:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006728:	68fb      	ldr	r3, [r7, #12]
}
 800672a:	4618      	mov	r0, r3
 800672c:	3714      	adds	r7, #20
 800672e:	46bd      	mov	sp, r7
 8006730:	bc80      	pop	{r7}
 8006732:	4770      	bx	lr
 8006734:	08006739 	.word	0x08006739

08006738 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800673e:	2300      	movs	r3, #0
 8006740:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006742:	4b12      	ldr	r3, [pc, #72]	; (800678c <prvTaskExitError+0x54>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674a:	d00a      	beq.n	8006762 <prvTaskExitError+0x2a>
	__asm volatile
 800674c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006750:	f383 8811 	msr	BASEPRI, r3
 8006754:	f3bf 8f6f 	isb	sy
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	60fb      	str	r3, [r7, #12]
}
 800675e:	bf00      	nop
 8006760:	e7fe      	b.n	8006760 <prvTaskExitError+0x28>
	__asm volatile
 8006762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006766:	f383 8811 	msr	BASEPRI, r3
 800676a:	f3bf 8f6f 	isb	sy
 800676e:	f3bf 8f4f 	dsb	sy
 8006772:	60bb      	str	r3, [r7, #8]
}
 8006774:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006776:	bf00      	nop
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0fc      	beq.n	8006778 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800677e:	bf00      	nop
 8006780:	bf00      	nop
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	bc80      	pop	{r7}
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop
 800678c:	2000000c 	.word	0x2000000c

08006790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006790:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <pxCurrentTCBConst2>)
 8006792:	6819      	ldr	r1, [r3, #0]
 8006794:	6808      	ldr	r0, [r1, #0]
 8006796:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800679a:	f380 8809 	msr	PSP, r0
 800679e:	f3bf 8f6f 	isb	sy
 80067a2:	f04f 0000 	mov.w	r0, #0
 80067a6:	f380 8811 	msr	BASEPRI, r0
 80067aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80067ae:	4770      	bx	lr

080067b0 <pxCurrentTCBConst2>:
 80067b0:	20000b8c 	.word	0x20000b8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop

080067b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80067b8:	4806      	ldr	r0, [pc, #24]	; (80067d4 <prvPortStartFirstTask+0x1c>)
 80067ba:	6800      	ldr	r0, [r0, #0]
 80067bc:	6800      	ldr	r0, [r0, #0]
 80067be:	f380 8808 	msr	MSP, r0
 80067c2:	b662      	cpsie	i
 80067c4:	b661      	cpsie	f
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	df00      	svc	0
 80067d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067d2:	bf00      	nop
 80067d4:	e000ed08 	.word	0xe000ed08

080067d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80067de:	4b32      	ldr	r3, [pc, #200]	; (80068a8 <xPortStartScheduler+0xd0>)
 80067e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	22ff      	movs	r2, #255	; 0xff
 80067ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80067f8:	78fb      	ldrb	r3, [r7, #3]
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006800:	b2da      	uxtb	r2, r3
 8006802:	4b2a      	ldr	r3, [pc, #168]	; (80068ac <xPortStartScheduler+0xd4>)
 8006804:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006806:	4b2a      	ldr	r3, [pc, #168]	; (80068b0 <xPortStartScheduler+0xd8>)
 8006808:	2207      	movs	r2, #7
 800680a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800680c:	e009      	b.n	8006822 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800680e:	4b28      	ldr	r3, [pc, #160]	; (80068b0 <xPortStartScheduler+0xd8>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3b01      	subs	r3, #1
 8006814:	4a26      	ldr	r2, [pc, #152]	; (80068b0 <xPortStartScheduler+0xd8>)
 8006816:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006818:	78fb      	ldrb	r3, [r7, #3]
 800681a:	b2db      	uxtb	r3, r3
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	b2db      	uxtb	r3, r3
 8006820:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006822:	78fb      	ldrb	r3, [r7, #3]
 8006824:	b2db      	uxtb	r3, r3
 8006826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682a:	2b80      	cmp	r3, #128	; 0x80
 800682c:	d0ef      	beq.n	800680e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800682e:	4b20      	ldr	r3, [pc, #128]	; (80068b0 <xPortStartScheduler+0xd8>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f1c3 0307 	rsb	r3, r3, #7
 8006836:	2b04      	cmp	r3, #4
 8006838:	d00a      	beq.n	8006850 <xPortStartScheduler+0x78>
	__asm volatile
 800683a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	60bb      	str	r3, [r7, #8]
}
 800684c:	bf00      	nop
 800684e:	e7fe      	b.n	800684e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006850:	4b17      	ldr	r3, [pc, #92]	; (80068b0 <xPortStartScheduler+0xd8>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	021b      	lsls	r3, r3, #8
 8006856:	4a16      	ldr	r2, [pc, #88]	; (80068b0 <xPortStartScheduler+0xd8>)
 8006858:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800685a:	4b15      	ldr	r3, [pc, #84]	; (80068b0 <xPortStartScheduler+0xd8>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006862:	4a13      	ldr	r2, [pc, #76]	; (80068b0 <xPortStartScheduler+0xd8>)
 8006864:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	b2da      	uxtb	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800686e:	4b11      	ldr	r3, [pc, #68]	; (80068b4 <xPortStartScheduler+0xdc>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a10      	ldr	r2, [pc, #64]	; (80068b4 <xPortStartScheduler+0xdc>)
 8006874:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006878:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800687a:	4b0e      	ldr	r3, [pc, #56]	; (80068b4 <xPortStartScheduler+0xdc>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a0d      	ldr	r2, [pc, #52]	; (80068b4 <xPortStartScheduler+0xdc>)
 8006880:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006884:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006886:	f000 f8b9 	bl	80069fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800688a:	4b0b      	ldr	r3, [pc, #44]	; (80068b8 <xPortStartScheduler+0xe0>)
 800688c:	2200      	movs	r2, #0
 800688e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006890:	f7ff ff92 	bl	80067b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006894:	f7ff f8b8 	bl	8005a08 <vTaskSwitchContext>
	prvTaskExitError();
 8006898:	f7ff ff4e 	bl	8006738 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	e000e400 	.word	0xe000e400
 80068ac:	200011b8 	.word	0x200011b8
 80068b0:	200011bc 	.word	0x200011bc
 80068b4:	e000ed20 	.word	0xe000ed20
 80068b8:	2000000c 	.word	0x2000000c

080068bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
	__asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	607b      	str	r3, [r7, #4]
}
 80068d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80068d6:	4b0f      	ldr	r3, [pc, #60]	; (8006914 <vPortEnterCritical+0x58>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	3301      	adds	r3, #1
 80068dc:	4a0d      	ldr	r2, [pc, #52]	; (8006914 <vPortEnterCritical+0x58>)
 80068de:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80068e0:	4b0c      	ldr	r3, [pc, #48]	; (8006914 <vPortEnterCritical+0x58>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d10f      	bne.n	8006908 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80068e8:	4b0b      	ldr	r3, [pc, #44]	; (8006918 <vPortEnterCritical+0x5c>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00a      	beq.n	8006908 <vPortEnterCritical+0x4c>
	__asm volatile
 80068f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	603b      	str	r3, [r7, #0]
}
 8006904:	bf00      	nop
 8006906:	e7fe      	b.n	8006906 <vPortEnterCritical+0x4a>
	}
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	bc80      	pop	{r7}
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	2000000c 	.word	0x2000000c
 8006918:	e000ed04 	.word	0xe000ed04

0800691c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006922:	4b11      	ldr	r3, [pc, #68]	; (8006968 <vPortExitCritical+0x4c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10a      	bne.n	8006940 <vPortExitCritical+0x24>
	__asm volatile
 800692a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692e:	f383 8811 	msr	BASEPRI, r3
 8006932:	f3bf 8f6f 	isb	sy
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	607b      	str	r3, [r7, #4]
}
 800693c:	bf00      	nop
 800693e:	e7fe      	b.n	800693e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006940:	4b09      	ldr	r3, [pc, #36]	; (8006968 <vPortExitCritical+0x4c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3b01      	subs	r3, #1
 8006946:	4a08      	ldr	r2, [pc, #32]	; (8006968 <vPortExitCritical+0x4c>)
 8006948:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800694a:	4b07      	ldr	r3, [pc, #28]	; (8006968 <vPortExitCritical+0x4c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d105      	bne.n	800695e <vPortExitCritical+0x42>
 8006952:	2300      	movs	r3, #0
 8006954:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	f383 8811 	msr	BASEPRI, r3
}
 800695c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800695e:	bf00      	nop
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	bc80      	pop	{r7}
 8006966:	4770      	bx	lr
 8006968:	2000000c 	.word	0x2000000c
 800696c:	00000000 	.word	0x00000000

08006970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006970:	f3ef 8009 	mrs	r0, PSP
 8006974:	f3bf 8f6f 	isb	sy
 8006978:	4b0d      	ldr	r3, [pc, #52]	; (80069b0 <pxCurrentTCBConst>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006980:	6010      	str	r0, [r2, #0]
 8006982:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006986:	f04f 0050 	mov.w	r0, #80	; 0x50
 800698a:	f380 8811 	msr	BASEPRI, r0
 800698e:	f7ff f83b 	bl	8005a08 <vTaskSwitchContext>
 8006992:	f04f 0000 	mov.w	r0, #0
 8006996:	f380 8811 	msr	BASEPRI, r0
 800699a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800699e:	6819      	ldr	r1, [r3, #0]
 80069a0:	6808      	ldr	r0, [r1, #0]
 80069a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80069a6:	f380 8809 	msr	PSP, r0
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	4770      	bx	lr

080069b0 <pxCurrentTCBConst>:
 80069b0:	20000b8c 	.word	0x20000b8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80069b4:	bf00      	nop
 80069b6:	bf00      	nop

080069b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	607b      	str	r3, [r7, #4]
}
 80069d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80069d2:	f7fe ff5b 	bl	800588c <xTaskIncrementTick>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d003      	beq.n	80069e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80069dc:	4b06      	ldr	r3, [pc, #24]	; (80069f8 <xPortSysTickHandler+0x40>)
 80069de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	2300      	movs	r3, #0
 80069e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	f383 8811 	msr	BASEPRI, r3
}
 80069ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80069f0:	bf00      	nop
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	e000ed04 	.word	0xe000ed04

080069fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80069fc:	b480      	push	{r7}
 80069fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a00:	4b0a      	ldr	r3, [pc, #40]	; (8006a2c <vPortSetupTimerInterrupt+0x30>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a06:	4b0a      	ldr	r3, [pc, #40]	; (8006a30 <vPortSetupTimerInterrupt+0x34>)
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a0c:	4b09      	ldr	r3, [pc, #36]	; (8006a34 <vPortSetupTimerInterrupt+0x38>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a09      	ldr	r2, [pc, #36]	; (8006a38 <vPortSetupTimerInterrupt+0x3c>)
 8006a12:	fba2 2303 	umull	r2, r3, r2, r3
 8006a16:	099b      	lsrs	r3, r3, #6
 8006a18:	4a08      	ldr	r2, [pc, #32]	; (8006a3c <vPortSetupTimerInterrupt+0x40>)
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a1e:	4b03      	ldr	r3, [pc, #12]	; (8006a2c <vPortSetupTimerInterrupt+0x30>)
 8006a20:	2207      	movs	r2, #7
 8006a22:	601a      	str	r2, [r3, #0]
}
 8006a24:	bf00      	nop
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bc80      	pop	{r7}
 8006a2a:	4770      	bx	lr
 8006a2c:	e000e010 	.word	0xe000e010
 8006a30:	e000e018 	.word	0xe000e018
 8006a34:	20000000 	.word	0x20000000
 8006a38:	10624dd3 	.word	0x10624dd3
 8006a3c:	e000e014 	.word	0xe000e014

08006a40 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006a46:	f3ef 8305 	mrs	r3, IPSR
 8006a4a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2b0f      	cmp	r3, #15
 8006a50:	d914      	bls.n	8006a7c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006a52:	4a16      	ldr	r2, [pc, #88]	; (8006aac <vPortValidateInterruptPriority+0x6c>)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4413      	add	r3, r2
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006a5c:	4b14      	ldr	r3, [pc, #80]	; (8006ab0 <vPortValidateInterruptPriority+0x70>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	7afa      	ldrb	r2, [r7, #11]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d20a      	bcs.n	8006a7c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	607b      	str	r3, [r7, #4]
}
 8006a78:	bf00      	nop
 8006a7a:	e7fe      	b.n	8006a7a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a7c:	4b0d      	ldr	r3, [pc, #52]	; (8006ab4 <vPortValidateInterruptPriority+0x74>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a84:	4b0c      	ldr	r3, [pc, #48]	; (8006ab8 <vPortValidateInterruptPriority+0x78>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d90a      	bls.n	8006aa2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	603b      	str	r3, [r7, #0]
}
 8006a9e:	bf00      	nop
 8006aa0:	e7fe      	b.n	8006aa0 <vPortValidateInterruptPriority+0x60>
	}
 8006aa2:	bf00      	nop
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bc80      	pop	{r7}
 8006aaa:	4770      	bx	lr
 8006aac:	e000e3f0 	.word	0xe000e3f0
 8006ab0:	200011b8 	.word	0x200011b8
 8006ab4:	e000ed0c 	.word	0xe000ed0c
 8006ab8:	200011bc 	.word	0x200011bc

08006abc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08a      	sub	sp, #40	; 0x28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ac8:	f7fe fe26 	bl	8005718 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006acc:	4b58      	ldr	r3, [pc, #352]	; (8006c30 <pvPortMalloc+0x174>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ad4:	f000 f910 	bl	8006cf8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ad8:	4b56      	ldr	r3, [pc, #344]	; (8006c34 <pvPortMalloc+0x178>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4013      	ands	r3, r2
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f040 808e 	bne.w	8006c02 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d01d      	beq.n	8006b28 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006aec:	2208      	movs	r2, #8
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4413      	add	r3, r2
 8006af2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f003 0307 	and.w	r3, r3, #7
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d014      	beq.n	8006b28 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f023 0307 	bic.w	r3, r3, #7
 8006b04:	3308      	adds	r3, #8
 8006b06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00a      	beq.n	8006b28 <pvPortMalloc+0x6c>
	__asm volatile
 8006b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b16:	f383 8811 	msr	BASEPRI, r3
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	617b      	str	r3, [r7, #20]
}
 8006b24:	bf00      	nop
 8006b26:	e7fe      	b.n	8006b26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d069      	beq.n	8006c02 <pvPortMalloc+0x146>
 8006b2e:	4b42      	ldr	r3, [pc, #264]	; (8006c38 <pvPortMalloc+0x17c>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	687a      	ldr	r2, [r7, #4]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d864      	bhi.n	8006c02 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b38:	4b40      	ldr	r3, [pc, #256]	; (8006c3c <pvPortMalloc+0x180>)
 8006b3a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006b3c:	4b3f      	ldr	r3, [pc, #252]	; (8006c3c <pvPortMalloc+0x180>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b42:	e004      	b.n	8006b4e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b46:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d903      	bls.n	8006b60 <pvPortMalloc+0xa4>
 8006b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1f1      	bne.n	8006b44 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b60:	4b33      	ldr	r3, [pc, #204]	; (8006c30 <pvPortMalloc+0x174>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d04b      	beq.n	8006c02 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2208      	movs	r2, #8
 8006b70:	4413      	add	r3, r2
 8006b72:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	1ad2      	subs	r2, r2, r3
 8006b84:	2308      	movs	r3, #8
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d91f      	bls.n	8006bcc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4413      	add	r3, r2
 8006b92:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	f003 0307 	and.w	r3, r3, #7
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <pvPortMalloc+0xf8>
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	613b      	str	r3, [r7, #16]
}
 8006bb0:	bf00      	nop
 8006bb2:	e7fe      	b.n	8006bb2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	1ad2      	subs	r2, r2, r3
 8006bbc:	69bb      	ldr	r3, [r7, #24]
 8006bbe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	687a      	ldr	r2, [r7, #4]
 8006bc4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006bc6:	69b8      	ldr	r0, [r7, #24]
 8006bc8:	f000 f8f8 	bl	8006dbc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006bcc:	4b1a      	ldr	r3, [pc, #104]	; (8006c38 <pvPortMalloc+0x17c>)
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	4a18      	ldr	r2, [pc, #96]	; (8006c38 <pvPortMalloc+0x17c>)
 8006bd8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006bda:	4b17      	ldr	r3, [pc, #92]	; (8006c38 <pvPortMalloc+0x17c>)
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	4b18      	ldr	r3, [pc, #96]	; (8006c40 <pvPortMalloc+0x184>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d203      	bcs.n	8006bee <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006be6:	4b14      	ldr	r3, [pc, #80]	; (8006c38 <pvPortMalloc+0x17c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a15      	ldr	r2, [pc, #84]	; (8006c40 <pvPortMalloc+0x184>)
 8006bec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	4b10      	ldr	r3, [pc, #64]	; (8006c34 <pvPortMalloc+0x178>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfe:	2200      	movs	r2, #0
 8006c00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c02:	f7fe fd97 	bl	8005734 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	f003 0307 	and.w	r3, r3, #7
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00a      	beq.n	8006c26 <pvPortMalloc+0x16a>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	60fb      	str	r3, [r7, #12]
}
 8006c22:	bf00      	nop
 8006c24:	e7fe      	b.n	8006c24 <pvPortMalloc+0x168>
	return pvReturn;
 8006c26:	69fb      	ldr	r3, [r7, #28]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3728      	adds	r7, #40	; 0x28
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20001dc8 	.word	0x20001dc8
 8006c34:	20001dd4 	.word	0x20001dd4
 8006c38:	20001dcc 	.word	0x20001dcc
 8006c3c:	20001dc0 	.word	0x20001dc0
 8006c40:	20001dd0 	.word	0x20001dd0

08006c44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d048      	beq.n	8006ce8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c56:	2308      	movs	r3, #8
 8006c58:	425b      	negs	r3, r3
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	4b21      	ldr	r3, [pc, #132]	; (8006cf0 <vPortFree+0xac>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10a      	bne.n	8006c88 <vPortFree+0x44>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	60fb      	str	r3, [r7, #12]
}
 8006c84:	bf00      	nop
 8006c86:	e7fe      	b.n	8006c86 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d00a      	beq.n	8006ca6 <vPortFree+0x62>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	60bb      	str	r3, [r7, #8]
}
 8006ca2:	bf00      	nop
 8006ca4:	e7fe      	b.n	8006ca4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	4b11      	ldr	r3, [pc, #68]	; (8006cf0 <vPortFree+0xac>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4013      	ands	r3, r2
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d019      	beq.n	8006ce8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d115      	bne.n	8006ce8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	685a      	ldr	r2, [r3, #4]
 8006cc0:	4b0b      	ldr	r3, [pc, #44]	; (8006cf0 <vPortFree+0xac>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	43db      	mvns	r3, r3
 8006cc6:	401a      	ands	r2, r3
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ccc:	f7fe fd24 	bl	8005718 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	685a      	ldr	r2, [r3, #4]
 8006cd4:	4b07      	ldr	r3, [pc, #28]	; (8006cf4 <vPortFree+0xb0>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4413      	add	r3, r2
 8006cda:	4a06      	ldr	r2, [pc, #24]	; (8006cf4 <vPortFree+0xb0>)
 8006cdc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cde:	6938      	ldr	r0, [r7, #16]
 8006ce0:	f000 f86c 	bl	8006dbc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006ce4:	f7fe fd26 	bl	8005734 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006ce8:	bf00      	nop
 8006cea:	3718      	adds	r7, #24
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	20001dd4 	.word	0x20001dd4
 8006cf4:	20001dcc 	.word	0x20001dcc

08006cf8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cfe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006d02:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006d04:	4b27      	ldr	r3, [pc, #156]	; (8006da4 <prvHeapInit+0xac>)
 8006d06:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f003 0307 	and.w	r3, r3, #7
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d00c      	beq.n	8006d2c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	3307      	adds	r3, #7
 8006d16:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 0307 	bic.w	r3, r3, #7
 8006d1e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	4a1f      	ldr	r2, [pc, #124]	; (8006da4 <prvHeapInit+0xac>)
 8006d28:	4413      	add	r3, r2
 8006d2a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d30:	4a1d      	ldr	r2, [pc, #116]	; (8006da8 <prvHeapInit+0xb0>)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d36:	4b1c      	ldr	r3, [pc, #112]	; (8006da8 <prvHeapInit+0xb0>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	4413      	add	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d44:	2208      	movs	r2, #8
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	1a9b      	subs	r3, r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f023 0307 	bic.w	r3, r3, #7
 8006d52:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4a15      	ldr	r2, [pc, #84]	; (8006dac <prvHeapInit+0xb4>)
 8006d58:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d5a:	4b14      	ldr	r3, [pc, #80]	; (8006dac <prvHeapInit+0xb4>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d62:	4b12      	ldr	r3, [pc, #72]	; (8006dac <prvHeapInit+0xb4>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2200      	movs	r2, #0
 8006d68:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	1ad2      	subs	r2, r2, r3
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d78:	4b0c      	ldr	r3, [pc, #48]	; (8006dac <prvHeapInit+0xb4>)
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	4a0a      	ldr	r2, [pc, #40]	; (8006db0 <prvHeapInit+0xb8>)
 8006d86:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	4a09      	ldr	r2, [pc, #36]	; (8006db4 <prvHeapInit+0xbc>)
 8006d8e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d90:	4b09      	ldr	r3, [pc, #36]	; (8006db8 <prvHeapInit+0xc0>)
 8006d92:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d96:	601a      	str	r2, [r3, #0]
}
 8006d98:	bf00      	nop
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bc80      	pop	{r7}
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	200011c0 	.word	0x200011c0
 8006da8:	20001dc0 	.word	0x20001dc0
 8006dac:	20001dc8 	.word	0x20001dc8
 8006db0:	20001dd0 	.word	0x20001dd0
 8006db4:	20001dcc 	.word	0x20001dcc
 8006db8:	20001dd4 	.word	0x20001dd4

08006dbc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006dc4:	4b27      	ldr	r3, [pc, #156]	; (8006e64 <prvInsertBlockIntoFreeList+0xa8>)
 8006dc6:	60fb      	str	r3, [r7, #12]
 8006dc8:	e002      	b.n	8006dd0 <prvInsertBlockIntoFreeList+0x14>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	60fb      	str	r3, [r7, #12]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d8f7      	bhi.n	8006dca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	4413      	add	r3, r2
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d108      	bne.n	8006dfe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	441a      	add	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	68ba      	ldr	r2, [r7, #8]
 8006e08:	441a      	add	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d118      	bne.n	8006e44 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	4b14      	ldr	r3, [pc, #80]	; (8006e68 <prvInsertBlockIntoFreeList+0xac>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d00d      	beq.n	8006e3a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	685a      	ldr	r2, [r3, #4]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	441a      	add	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	e008      	b.n	8006e4c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e3a:	4b0b      	ldr	r3, [pc, #44]	; (8006e68 <prvInsertBlockIntoFreeList+0xac>)
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	e003      	b.n	8006e4c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d002      	beq.n	8006e5a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e5a:	bf00      	nop
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bc80      	pop	{r7}
 8006e62:	4770      	bx	lr
 8006e64:	20001dc0 	.word	0x20001dc0
 8006e68:	20001dc8 	.word	0x20001dc8

08006e6c <__libc_init_array>:
 8006e6c:	b570      	push	{r4, r5, r6, lr}
 8006e6e:	2600      	movs	r6, #0
 8006e70:	4d0c      	ldr	r5, [pc, #48]	; (8006ea4 <__libc_init_array+0x38>)
 8006e72:	4c0d      	ldr	r4, [pc, #52]	; (8006ea8 <__libc_init_array+0x3c>)
 8006e74:	1b64      	subs	r4, r4, r5
 8006e76:	10a4      	asrs	r4, r4, #2
 8006e78:	42a6      	cmp	r6, r4
 8006e7a:	d109      	bne.n	8006e90 <__libc_init_array+0x24>
 8006e7c:	f000 f8f0 	bl	8007060 <_init>
 8006e80:	2600      	movs	r6, #0
 8006e82:	4d0a      	ldr	r5, [pc, #40]	; (8006eac <__libc_init_array+0x40>)
 8006e84:	4c0a      	ldr	r4, [pc, #40]	; (8006eb0 <__libc_init_array+0x44>)
 8006e86:	1b64      	subs	r4, r4, r5
 8006e88:	10a4      	asrs	r4, r4, #2
 8006e8a:	42a6      	cmp	r6, r4
 8006e8c:	d105      	bne.n	8006e9a <__libc_init_array+0x2e>
 8006e8e:	bd70      	pop	{r4, r5, r6, pc}
 8006e90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e94:	4798      	blx	r3
 8006e96:	3601      	adds	r6, #1
 8006e98:	e7ee      	b.n	8006e78 <__libc_init_array+0xc>
 8006e9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e9e:	4798      	blx	r3
 8006ea0:	3601      	adds	r6, #1
 8006ea2:	e7f2      	b.n	8006e8a <__libc_init_array+0x1e>
 8006ea4:	08007154 	.word	0x08007154
 8006ea8:	08007154 	.word	0x08007154
 8006eac:	08007154 	.word	0x08007154
 8006eb0:	08007158 	.word	0x08007158

08006eb4 <__retarget_lock_acquire_recursive>:
 8006eb4:	4770      	bx	lr

08006eb6 <__retarget_lock_release_recursive>:
 8006eb6:	4770      	bx	lr

08006eb8 <memcpy>:
 8006eb8:	440a      	add	r2, r1
 8006eba:	4291      	cmp	r1, r2
 8006ebc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ec0:	d100      	bne.n	8006ec4 <memcpy+0xc>
 8006ec2:	4770      	bx	lr
 8006ec4:	b510      	push	{r4, lr}
 8006ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006eca:	4291      	cmp	r1, r2
 8006ecc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ed0:	d1f9      	bne.n	8006ec6 <memcpy+0xe>
 8006ed2:	bd10      	pop	{r4, pc}

08006ed4 <memset>:
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	4402      	add	r2, r0
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d100      	bne.n	8006ede <memset+0xa>
 8006edc:	4770      	bx	lr
 8006ede:	f803 1b01 	strb.w	r1, [r3], #1
 8006ee2:	e7f9      	b.n	8006ed8 <memset+0x4>

08006ee4 <cleanup_glue>:
 8006ee4:	b538      	push	{r3, r4, r5, lr}
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	6809      	ldr	r1, [r1, #0]
 8006eea:	4605      	mov	r5, r0
 8006eec:	b109      	cbz	r1, 8006ef2 <cleanup_glue+0xe>
 8006eee:	f7ff fff9 	bl	8006ee4 <cleanup_glue>
 8006ef2:	4621      	mov	r1, r4
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006efa:	f000 b869 	b.w	8006fd0 <_free_r>
	...

08006f00 <_reclaim_reent>:
 8006f00:	4b2c      	ldr	r3, [pc, #176]	; (8006fb4 <_reclaim_reent+0xb4>)
 8006f02:	b570      	push	{r4, r5, r6, lr}
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4604      	mov	r4, r0
 8006f08:	4283      	cmp	r3, r0
 8006f0a:	d051      	beq.n	8006fb0 <_reclaim_reent+0xb0>
 8006f0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006f0e:	b143      	cbz	r3, 8006f22 <_reclaim_reent+0x22>
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d14a      	bne.n	8006fac <_reclaim_reent+0xac>
 8006f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f18:	6819      	ldr	r1, [r3, #0]
 8006f1a:	b111      	cbz	r1, 8006f22 <_reclaim_reent+0x22>
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	f000 f857 	bl	8006fd0 <_free_r>
 8006f22:	6961      	ldr	r1, [r4, #20]
 8006f24:	b111      	cbz	r1, 8006f2c <_reclaim_reent+0x2c>
 8006f26:	4620      	mov	r0, r4
 8006f28:	f000 f852 	bl	8006fd0 <_free_r>
 8006f2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006f2e:	b111      	cbz	r1, 8006f36 <_reclaim_reent+0x36>
 8006f30:	4620      	mov	r0, r4
 8006f32:	f000 f84d 	bl	8006fd0 <_free_r>
 8006f36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006f38:	b111      	cbz	r1, 8006f40 <_reclaim_reent+0x40>
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f000 f848 	bl	8006fd0 <_free_r>
 8006f40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006f42:	b111      	cbz	r1, 8006f4a <_reclaim_reent+0x4a>
 8006f44:	4620      	mov	r0, r4
 8006f46:	f000 f843 	bl	8006fd0 <_free_r>
 8006f4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006f4c:	b111      	cbz	r1, 8006f54 <_reclaim_reent+0x54>
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f000 f83e 	bl	8006fd0 <_free_r>
 8006f54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006f56:	b111      	cbz	r1, 8006f5e <_reclaim_reent+0x5e>
 8006f58:	4620      	mov	r0, r4
 8006f5a:	f000 f839 	bl	8006fd0 <_free_r>
 8006f5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006f60:	b111      	cbz	r1, 8006f68 <_reclaim_reent+0x68>
 8006f62:	4620      	mov	r0, r4
 8006f64:	f000 f834 	bl	8006fd0 <_free_r>
 8006f68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f6a:	b111      	cbz	r1, 8006f72 <_reclaim_reent+0x72>
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	f000 f82f 	bl	8006fd0 <_free_r>
 8006f72:	69a3      	ldr	r3, [r4, #24]
 8006f74:	b1e3      	cbz	r3, 8006fb0 <_reclaim_reent+0xb0>
 8006f76:	4620      	mov	r0, r4
 8006f78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006f7a:	4798      	blx	r3
 8006f7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006f7e:	b1b9      	cbz	r1, 8006fb0 <_reclaim_reent+0xb0>
 8006f80:	4620      	mov	r0, r4
 8006f82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006f86:	f7ff bfad 	b.w	8006ee4 <cleanup_glue>
 8006f8a:	5949      	ldr	r1, [r1, r5]
 8006f8c:	b941      	cbnz	r1, 8006fa0 <_reclaim_reent+0xa0>
 8006f8e:	3504      	adds	r5, #4
 8006f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f92:	2d80      	cmp	r5, #128	; 0x80
 8006f94:	68d9      	ldr	r1, [r3, #12]
 8006f96:	d1f8      	bne.n	8006f8a <_reclaim_reent+0x8a>
 8006f98:	4620      	mov	r0, r4
 8006f9a:	f000 f819 	bl	8006fd0 <_free_r>
 8006f9e:	e7ba      	b.n	8006f16 <_reclaim_reent+0x16>
 8006fa0:	680e      	ldr	r6, [r1, #0]
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	f000 f814 	bl	8006fd0 <_free_r>
 8006fa8:	4631      	mov	r1, r6
 8006faa:	e7ef      	b.n	8006f8c <_reclaim_reent+0x8c>
 8006fac:	2500      	movs	r5, #0
 8006fae:	e7ef      	b.n	8006f90 <_reclaim_reent+0x90>
 8006fb0:	bd70      	pop	{r4, r5, r6, pc}
 8006fb2:	bf00      	nop
 8006fb4:	20000010 	.word	0x20000010

08006fb8 <__malloc_lock>:
 8006fb8:	4801      	ldr	r0, [pc, #4]	; (8006fc0 <__malloc_lock+0x8>)
 8006fba:	f7ff bf7b 	b.w	8006eb4 <__retarget_lock_acquire_recursive>
 8006fbe:	bf00      	nop
 8006fc0:	20001dd8 	.word	0x20001dd8

08006fc4 <__malloc_unlock>:
 8006fc4:	4801      	ldr	r0, [pc, #4]	; (8006fcc <__malloc_unlock+0x8>)
 8006fc6:	f7ff bf76 	b.w	8006eb6 <__retarget_lock_release_recursive>
 8006fca:	bf00      	nop
 8006fcc:	20001dd8 	.word	0x20001dd8

08006fd0 <_free_r>:
 8006fd0:	b538      	push	{r3, r4, r5, lr}
 8006fd2:	4605      	mov	r5, r0
 8006fd4:	2900      	cmp	r1, #0
 8006fd6:	d040      	beq.n	800705a <_free_r+0x8a>
 8006fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fdc:	1f0c      	subs	r4, r1, #4
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	bfb8      	it	lt
 8006fe2:	18e4      	addlt	r4, r4, r3
 8006fe4:	f7ff ffe8 	bl	8006fb8 <__malloc_lock>
 8006fe8:	4a1c      	ldr	r2, [pc, #112]	; (800705c <_free_r+0x8c>)
 8006fea:	6813      	ldr	r3, [r2, #0]
 8006fec:	b933      	cbnz	r3, 8006ffc <_free_r+0x2c>
 8006fee:	6063      	str	r3, [r4, #4]
 8006ff0:	6014      	str	r4, [r2, #0]
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ff8:	f7ff bfe4 	b.w	8006fc4 <__malloc_unlock>
 8006ffc:	42a3      	cmp	r3, r4
 8006ffe:	d908      	bls.n	8007012 <_free_r+0x42>
 8007000:	6820      	ldr	r0, [r4, #0]
 8007002:	1821      	adds	r1, r4, r0
 8007004:	428b      	cmp	r3, r1
 8007006:	bf01      	itttt	eq
 8007008:	6819      	ldreq	r1, [r3, #0]
 800700a:	685b      	ldreq	r3, [r3, #4]
 800700c:	1809      	addeq	r1, r1, r0
 800700e:	6021      	streq	r1, [r4, #0]
 8007010:	e7ed      	b.n	8006fee <_free_r+0x1e>
 8007012:	461a      	mov	r2, r3
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	b10b      	cbz	r3, 800701c <_free_r+0x4c>
 8007018:	42a3      	cmp	r3, r4
 800701a:	d9fa      	bls.n	8007012 <_free_r+0x42>
 800701c:	6811      	ldr	r1, [r2, #0]
 800701e:	1850      	adds	r0, r2, r1
 8007020:	42a0      	cmp	r0, r4
 8007022:	d10b      	bne.n	800703c <_free_r+0x6c>
 8007024:	6820      	ldr	r0, [r4, #0]
 8007026:	4401      	add	r1, r0
 8007028:	1850      	adds	r0, r2, r1
 800702a:	4283      	cmp	r3, r0
 800702c:	6011      	str	r1, [r2, #0]
 800702e:	d1e0      	bne.n	8006ff2 <_free_r+0x22>
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	4401      	add	r1, r0
 8007036:	6011      	str	r1, [r2, #0]
 8007038:	6053      	str	r3, [r2, #4]
 800703a:	e7da      	b.n	8006ff2 <_free_r+0x22>
 800703c:	d902      	bls.n	8007044 <_free_r+0x74>
 800703e:	230c      	movs	r3, #12
 8007040:	602b      	str	r3, [r5, #0]
 8007042:	e7d6      	b.n	8006ff2 <_free_r+0x22>
 8007044:	6820      	ldr	r0, [r4, #0]
 8007046:	1821      	adds	r1, r4, r0
 8007048:	428b      	cmp	r3, r1
 800704a:	bf01      	itttt	eq
 800704c:	6819      	ldreq	r1, [r3, #0]
 800704e:	685b      	ldreq	r3, [r3, #4]
 8007050:	1809      	addeq	r1, r1, r0
 8007052:	6021      	streq	r1, [r4, #0]
 8007054:	6063      	str	r3, [r4, #4]
 8007056:	6054      	str	r4, [r2, #4]
 8007058:	e7cb      	b.n	8006ff2 <_free_r+0x22>
 800705a:	bd38      	pop	{r3, r4, r5, pc}
 800705c:	20001ddc 	.word	0x20001ddc

08007060 <_init>:
 8007060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007062:	bf00      	nop
 8007064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007066:	bc08      	pop	{r3}
 8007068:	469e      	mov	lr, r3
 800706a:	4770      	bx	lr

0800706c <_fini>:
 800706c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800706e:	bf00      	nop
 8007070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007072:	bc08      	pop	{r3}
 8007074:	469e      	mov	lr, r3
 8007076:	4770      	bx	lr
